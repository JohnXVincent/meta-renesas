diff --git a/arch/arm/include/asm/arch-rmobile/iwg21m.h b/arch/arm/include/asm/arch-rmobile/iwg21m.h
index 6432168..638f22b 100644
--- a/arch/arm/include/asm/arch-rmobile/iwg21m.h
+++ b/arch/arm/include/asm/arch-rmobile/iwg21m.h
@@ -117,8 +117,43 @@
 #define DBSC3_0_QOS_W14_BASE	0xE6792E00
 #define DBSC3_0_QOS_W15_BASE	0xE6792F00
 
+#define DBSC3_1_QOS_R0_BASE	0xE67A1000
+#define DBSC3_1_QOS_R1_BASE	0xE67A1100
+#define DBSC3_1_QOS_R2_BASE	0xE67A1200
+#define DBSC3_1_QOS_R3_BASE	0xE67A1300
+#define DBSC3_1_QOS_R4_BASE	0xE67A1400
+#define DBSC3_1_QOS_R5_BASE	0xE67A1500
+#define DBSC3_1_QOS_R6_BASE	0xE67A1600
+#define DBSC3_1_QOS_R7_BASE	0xE67A1700
+#define DBSC3_1_QOS_R8_BASE	0xE67A1800
+#define DBSC3_1_QOS_R9_BASE	0xE67A1900
+#define DBSC3_1_QOS_R10_BASE	0xE67A1A00
+#define DBSC3_1_QOS_R11_BASE	0xE67A1B00
+#define DBSC3_1_QOS_R12_BASE	0xE67A1C00
+#define DBSC3_1_QOS_R13_BASE	0xE67A1D00
+#define DBSC3_1_QOS_R14_BASE	0xE67A1E00
+#define DBSC3_1_QOS_R15_BASE	0xE67A1F00
+#define DBSC3_1_QOS_W0_BASE	0xE67A2000
+#define DBSC3_1_QOS_W1_BASE	0xE67A2100
+#define DBSC3_1_QOS_W2_BASE	0xE67A2200
+#define DBSC3_1_QOS_W3_BASE	0xE67A2300
+#define DBSC3_1_QOS_W4_BASE	0xE67A2400
+#define DBSC3_1_QOS_W5_BASE	0xE67A2500
+#define DBSC3_1_QOS_W6_BASE	0xE67A2600
+#define DBSC3_1_QOS_W7_BASE	0xE67A2700
+#define DBSC3_1_QOS_W8_BASE	0xE67A2800
+#define DBSC3_1_QOS_W9_BASE	0xE67A2900
+#define DBSC3_1_QOS_W10_BASE	0xE67A2A00
+#define DBSC3_1_QOS_W11_BASE	0xE67A2B00
+#define DBSC3_1_QOS_W12_BASE	0xE67A2C00
+#define DBSC3_1_QOS_W13_BASE	0xE67A2D00
+#define DBSC3_1_QOS_W14_BASE	0xE67A2E00
+#define DBSC3_1_QOS_W15_BASE	0xE67A2F00
+
 #define DBSC3_0_DBADJ2		0xE67900C8
+#define DBSC3_1_DBADJ2		0xE67A00C8
 #define DBSC3_0_DBCALTR		0xE67900F8
+#define DBSC3_1_DBCALTR		0xE67A00F8
 
 #define CCI_400_MAXOT_1		0xF0091110
 #define CCI_400_MAXOT_2		0xF0092110

diff --git a/board/renesas/iwg21m_q7/qos.c b/board/renesas/iwg21m_q7/qos.c
index 929a06b..5af85e1 100644
--- a/board/renesas/iwg21m_q7/qos.c
+++ b/board/renesas/iwg21m_q7/qos.c
@@ -77,6 +77,48 @@ static u32 dbsc3_0_w_qos_addr[DBSC3_NR] = {
 	[DBSC3_15] = DBSC3_0_QOS_W15_BASE,
 };
 
+static u32 dbsc3_1_r_qos_addr[DBSC3_NR] = {
+	[DBSC3_00] = DBSC3_1_QOS_R0_BASE,
+	[DBSC3_01] = DBSC3_1_QOS_R1_BASE,
+	[DBSC3_02] = DBSC3_1_QOS_R2_BASE,
+	[DBSC3_03] = DBSC3_1_QOS_R3_BASE,
+	[DBSC3_04] = DBSC3_1_QOS_R4_BASE,
+	[DBSC3_05] = DBSC3_1_QOS_R5_BASE,
+	[DBSC3_06] = DBSC3_1_QOS_R6_BASE,
+	[DBSC3_07] = DBSC3_1_QOS_R7_BASE,
+	[DBSC3_08] = DBSC3_1_QOS_R8_BASE,
+	[DBSC3_09] = DBSC3_1_QOS_R9_BASE,
+	[DBSC3_10] = DBSC3_1_QOS_R10_BASE,
+	[DBSC3_11] = DBSC3_1_QOS_R11_BASE,
+	[DBSC3_12] = DBSC3_1_QOS_R12_BASE,
+	[DBSC3_13] = DBSC3_1_QOS_R13_BASE,
+	[DBSC3_14] = DBSC3_1_QOS_R14_BASE,
+	[DBSC3_15] = DBSC3_1_QOS_R15_BASE,
+};
+
+static u32 dbsc3_1_w_qos_addr[DBSC3_NR] = {
+	[DBSC3_00] = DBSC3_1_QOS_W0_BASE,
+	[DBSC3_01] = DBSC3_1_QOS_W1_BASE,
+	[DBSC3_02] = DBSC3_1_QOS_W2_BASE,
+	[DBSC3_03] = DBSC3_1_QOS_W3_BASE,
+	[DBSC3_04] = DBSC3_1_QOS_W4_BASE,
+	[DBSC3_05] = DBSC3_1_QOS_W5_BASE,
+	[DBSC3_06] = DBSC3_1_QOS_W6_BASE,
+	[DBSC3_07] = DBSC3_1_QOS_W7_BASE,
+	[DBSC3_08] = DBSC3_1_QOS_W8_BASE,
+	[DBSC3_09] = DBSC3_1_QOS_W9_BASE,
+	[DBSC3_10] = DBSC3_1_QOS_W10_BASE,
+	[DBSC3_11] = DBSC3_1_QOS_W11_BASE,
+	[DBSC3_12] = DBSC3_1_QOS_W12_BASE,
+	[DBSC3_13] = DBSC3_1_QOS_W13_BASE,
+	[DBSC3_14] = DBSC3_1_QOS_W14_BASE,
+	[DBSC3_15] = DBSC3_1_QOS_W15_BASE,
+};
+
+#define S3CADSPLCR_LINEAR_ALL				0
+#define S3CADSPLCR_4K_SPLIT_LINEAR_0x7000_0x7800	1
+#define S3CADSPLCR_4K_SPLIT_LINEAR_0x6800_0x7000	0
+#define S3CADSPLCR_4K_SPLIT_ALL				0
 
 /* QoS version 0.980 for ES2 later */
 
@@ -92,24 +134,36 @@ void qos_init_es2(void)
 
 	/* DBSC DBADJ2 */
 	writel(0x20042004, DBSC3_0_DBADJ2);
+	writel(0x20042004, DBSC3_1_DBADJ2);
 	/* DBSC Calibration Timing */
 	writel(0x05F003C0, DBSC3_0_DBCALTR);
+	writel(0x05F003C0, DBSC3_1_DBCALTR);
 
 	/* S3C -QoS */
 	s3c = (struct iwg21m_s3c *)S3C_BASE;
+#if S3CADSPLCR_LINEAR_ALL
+	writel(0x00000000, &s3c->s3cadsplcr);
+#elif S3CADSPLCR_4K_SPLIT_LINEAR_0x7000_0x7800
+	writel(0x00BF1B0C, &s3c->s3cadsplcr);
+#elif S3CADSPLCR_4K_SPLIT_LINEAR_0x6800_0x7000
+	writel(0x00DF1B0C, &s3c->s3cadsplcr);
+#elif S3CADSPLCR_4K_SPLIT_ALL
 	writel(0x00FF1B0C, &s3c->s3cadsplcr);
+#else
+#error "S3CADSPLCR_* not defined"
+#endif
 #if CONFIG_QOS_PRI_VIN
-	writel(0x1F070606, &s3c->s3crorr);
-	writel(0x1F070606, &s3c->s3cworr);
+	writel(0x1F0E0C0C, &s3c->s3crorr);
+	writel(0x1F0E0C0C, &s3c->s3cworr);
 #elif CONFIG_QOS_PRI_MEDIA
-	writel(0x1F060302, &s3c->s3crorr);
-	writel(0x07070302, &s3c->s3cworr);
+	writel(0x1F0B0604, &s3c->s3crorr);
+	writel(0x1F0E0705, &s3c->s3cworr);
 #elif CONFIG_QOS_PRI_NORMAL
-	writel(0x1F060504, &s3c->s3crorr);
-	writel(0x07070503, &s3c->s3cworr);
+	writel(0x1F0B0908, &s3c->s3crorr);
+	writel(0x1F0E0A08, &s3c->s3cworr);
 #elif CONFIG_QOS_PRI_GFX
-	writel(0x1F060606, &s3c->s3crorr);
-	writel(0x07070606, &s3c->s3cworr);
+	writel(0x1F0B0B0B, &s3c->s3crorr);
+	writel(0x1F0E0C0C, &s3c->s3cworr);
 #else
 #error "CONFIG_QOS_PRI_* not defined"
 #endif
@@ -205,11 +259,11 @@ void qos_init_es2(void)
 		writel(0x00002096, &qos_addr->dbtmval0);
 		writel(0x00002064, &qos_addr->dbtmval1);
 		writel(0x00002032, &qos_addr->dbtmval2);
-		writel(0x00002032, &qos_addr->dbtmval3);
+		writel(0x00001FB0, &qos_addr->dbtmval3);
 		writel(0x00000001, &qos_addr->dbrqctr);
 		writel(0x00002078, &qos_addr->dbthres0);
 		writel(0x0000204B, &qos_addr->dbthres1);
-		writel(0x00000000, &qos_addr->dbthres2);
+		writel(0x0000201E, &qos_addr->dbthres2);
 		writel(0x00000001, &qos_addr->dblgqon);
 	}
 
@@ -228,27 +282,43 @@ void qos_init_es2(void)
 		writel(0x00000001, &qos_addr->dblgqon);
 	}
 
-#if 0
-	/* CCI-400 -QoS */
-	writel(0x20001000, CCI_400_MAXOT_1);
-	writel(0x20001000, CCI_400_MAXOT_2);
-	writel(0x0000000C, CCI_400_QOSCNTL_1);
-	writel(0x0000000C, CCI_400_QOSCNTL_2);
-#endif
+	/* DBSC1 - Read */
+	for (i = DBSC3_00; i < DBSC3_NR; i++) {
+		qos_addr = (struct iwg21m_dbsc3_qos *)dbsc3_1_r_qos_addr[i];
+		writel(0x00000002, &qos_addr->dblgcnt);
+		writel(0x00002096, &qos_addr->dbtmval0);
+		writel(0x00002064, &qos_addr->dbtmval1);
+		writel(0x00002032, &qos_addr->dbtmval2);
+		writel(0x00001FB0, &qos_addr->dbtmval3);
+		writel(0x00000001, &qos_addr->dbrqctr);
+		writel(0x00002078, &qos_addr->dbthres0);
+		writel(0x0000204B, &qos_addr->dbthres1);
+		writel(0x0000201E, &qos_addr->dbthres2);
+		writel(0x00000001, &qos_addr->dblgqon);
+	}
+
+	/* DBSC1 - Write */
+	for (i = DBSC3_00; i < DBSC3_NR; i++) {
+		qos_addr = (struct iwg21m_dbsc3_qos *)dbsc3_1_w_qos_addr[i];
+		writel(0x00000002, &qos_addr->dblgcnt);
+		writel(0x00002096, &qos_addr->dbtmval0);
+		writel(0x00002064, &qos_addr->dbtmval1);
+		writel(0x00002050, &qos_addr->dbtmval2);
+		writel(0x0000203A, &qos_addr->dbtmval3);
+		writel(0x00000001, &qos_addr->dbrqctr);
+		writel(0x00002078, &qos_addr->dbthres0);
+		writel(0x0000204B, &qos_addr->dbthres1);
+		writel(0x0000203C, &qos_addr->dbthres2);
+		writel(0x00000001, &qos_addr->dblgqon);
+	}
 
 	/* MXI -QoS */
 	/* Transaction Control (MXI) */
 	mxi = (struct iwg21m_mxi *)MXI_BASE;
 	writel(0x00000013, &mxi->mxrtcr);
-	writel(0x00000011, &mxi->mxwtcr);
-	writel(0x00B800C0, &mxi->mxsaar0);
+	writel(0x00000016, &mxi->mxwtcr);
+	writel(0x00780080, &mxi->mxsaar0);
 	writel(0x02000800, &mxi->mxsaar1);
-#if 0
-	writel(0x00200000, &mxi->mxs3cracr);
-	writel(0x00200000, &mxi->mxs3cwacr);
-	writel(0x00200000, &mxi->mxaxiracr);
-	writel(0x00200000, &mxi->mxaxiwacr);
-#endif
 
 	/* QoS Control (MXI) */
 	mxi_qos = (struct iwg21m_mxi_qos *)MXI_QOS_BASE;
@@ -1386,17 +1456,6 @@ void qos_init_es2(void)
 	writel(0x00002004, &axi_qos->qosthres1);
 	writel(0x00000001, &axi_qos->qosthres2);
 	writel(0x00000001, &axi_qos->qosqon);
-
-#if 0
-	/* CCI-AXI Function Register */
-	writel(0x00000011, CCI_AXI_IPMMUIDVMCR);
-	writel(0x00000011, CCI_AXI_IPMMURDVMCR);
-	writel(0x00000011, CCI_AXI_IPMMUS0DVMCR);
-	writel(0x00000011, CCI_AXI_IPMMUS1DVMCR);
-	writel(0x00000011, CCI_AXI_IPMMUMPDVMCR);
-	writel(0x00000011, CCI_AXI_IPMMUDSDVMCR);
-	writel(0x0000F700, CCI_AXI_AX2ADDRMASK);
-#endif
 }
 
 void qos_init(void)
