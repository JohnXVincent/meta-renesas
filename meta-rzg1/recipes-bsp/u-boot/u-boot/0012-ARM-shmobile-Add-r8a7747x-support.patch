From a79b1fbb2f01da39c737f2d7176929378bbedd5b Mon Sep 17 00:00:00 2001
From: "Nguyen Van Linh [FGA.BU13.RZG]" <LinhNV25@fsoft.com.vn>
Date: Sun, 16 Apr 2017 12:32:57 +0700
Subject: [PATCH 1/2] ARM: shmobile: Add r8a7747x support Signed-off-by:
 Nguyen Van Linh [FGA.BU13.RZG]
 <LinhNV25@fsoft.com.vn>

---
 arch/arm/cpu/armv7/rmobile/Makefile               |    2 +
 arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c    |   50 +
 arch/arm/cpu/armv7/rmobile/cpu_info.c             |   10 +
 arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c         | 2514 +++++++++++++++++++++
 arch/arm/include/asm/arch-rmobile/gpio.h          |    3 +
 arch/arm/include/asm/arch-rmobile/r8a7747x-gpio.h |  287 +++
 arch/arm/include/asm/arch-rmobile/r8a7747x.h      |  619 +++++
 arch/arm/include/asm/arch-rmobile/rmobile.h       |    2 +
 arch/arm/lib/bootm.c                              |    6 +-
 arch/sh/lib/time.c                                |   14 +-
 drivers/mmc/sh_sdhi.c                             |  130 +-
 drivers/mmc/sh_sdhi.h                             |   23 +-
 drivers/net/sh_eth.c                              |   11 +-
 drivers/net/sh_eth.h                              |   12 +-
 drivers/serial/serial_sh.c                        |    5 +-
 drivers/serial/serial_sh.h                        |   16 +-
 drivers/usb/host/ehci-r8a779x.c                   |  151 +-
 drivers/usb/host/r8a779x.h                        |   41 +-
 18 files changed, 3832 insertions(+), 64 deletions(-)
 create mode 100644 arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c
 create mode 100644 arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c
 create mode 100644 arch/arm/include/asm/arch-rmobile/r8a7747x-gpio.h
 create mode 100644 arch/arm/include/asm/arch-rmobile/r8a7747x.h

diff --git a/arch/arm/cpu/armv7/rmobile/Makefile b/arch/arm/cpu/armv7/rmobile/Makefile
index 4ec6315..7800e6e 100644
--- a/arch/arm/cpu/armv7/rmobile/Makefile
+++ b/arch/arm/cpu/armv7/rmobile/Makefile
@@ -45,6 +45,8 @@ COBJS-$(CONFIG_R8A7745) += cpu_info-r8a7745.o
 COBJS-$(CONFIG_R8A7745) += pfc-r8a7745.o
 COBJS-$(CONFIG_R8A7743) += cpu_info-r8a7743.o
 COBJS-$(CONFIG_R8A7743) += pfc-r8a7743.o
+COBJS-$(CONFIG_R8A7747X) += cpu_info-r8a7747x.o
+COBJS-$(CONFIG_R8A7747X) += pfc-r8a7747x.o
 COBJS-$(CONFIG_R8A7740) += cpu_info-r8a7740.o
 COBJS-$(CONFIG_R8A7740) += pfc-r8a7740.o
 COBJS-$(CONFIG_SH73A0) += cpu_info-sh73a0.o
diff --git a/arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c b/arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c
new file mode 100644
index 0000000..e571006
--- /dev/null
+++ b/arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c
@@ -0,0 +1,50 @@
+/*
+ * arch/arm/cpu/armv7/rmobile/cpu_info-r8a7747x.c
+ *     This file is r8a77470 processor support.
+ *
+ * Copyright (C) 2016 Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <common.h>
+#include <asm/io.h>
+
+#define PRR 0xFF000044
+
+u32 rmobile_get_cpu_type(void)
+{
+	u32 product;
+
+	product = readl(PRR);
+
+	return (u32)((product & 0x00007F00) >> 8);
+}
+
+u32 rmobile_get_cpu_rev_integer(void)
+{
+	u32 product;
+
+	product = readl(PRR);
+
+	return (u32)(((product & 0x000000F0) >> 4) + 1);
+}
+
+u32 rmobile_get_cpu_rev_fraction(void)
+{
+	u32 product;
+
+	product = readl(PRR);
+
+	return (u32)(product & 0x0000000F);
+}
diff --git a/arch/arm/cpu/armv7/rmobile/cpu_info.c b/arch/arm/cpu/armv7/rmobile/cpu_info.c
index f4a06db..0d64ba2 100644
--- a/arch/arm/cpu/armv7/rmobile/cpu_info.c
+++ b/arch/arm/cpu/armv7/rmobile/cpu_info.c
@@ -107,6 +107,16 @@ int print_cpuinfo(void)
 		       rmobile_get_cpu_rev_fraction());
 		break;
 
+	case 0x53:
+#if defined(CONFIG_R8A7747X)
+		printf("CPU: Renesas Electronics R8A7747X rev %d.%d\n",
+#else
+		printf("CPU: Renesas Electronics R8A7794X rev %d.%d\n",
+#endif
+		       rmobile_get_cpu_rev_integer(),
+		       rmobile_get_cpu_rev_fraction());
+		break;
+
 	default:
 		printf("CPU: Renesas Electronics CPU rev %d.%d\n",
 		       rmobile_get_cpu_rev_integer(),
diff --git a/arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c b/arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c
new file mode 100644
index 0000000..862fe77
--- /dev/null
+++ b/arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c
@@ -0,0 +1,2514 @@
+/*
+ * arch/arm/cpu/armv7/rmobile/pfc-r8a7747x.c
+ *     This file is r8a77470 processor support - PFC hardware block.
+ *
+ * Copyright (C) 2016 Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include <common.h>
+#include <sh_pfc.h>
+#include <asm/gpio.h>
+
+#define CPU_32_PORT(fn, pfx, sfx)				\
+	PORT_10(fn, pfx, sfx), PORT_10(fn, pfx##1, sfx),	\
+	PORT_10(fn, pfx##2, sfx), PORT_1(fn, pfx##30, sfx),	\
+	PORT_1(fn, pfx##31, sfx)
+
+#define CPU_19_PORT(fn, pfx, sfx)				\
+	PORT_10(fn, pfx, sfx), PORT_1(fn, pfx##10, sfx),	\
+	PORT_1(fn, pfx##11, sfx), PORT_1(fn, pfx##12, sfx),	\
+	PORT_1(fn, pfx##13, sfx), PORT_1(fn, pfx##14, sfx),	\
+	PORT_1(fn, pfx##15, sfx), PORT_1(fn, pfx##16, sfx),	\
+	PORT_1(fn, pfx##27, sfx), PORT_1(fn, pfx##28, sfx), \
+	PORT_1(fn, pfx##29, sfx)
+
+#define CPU_22_PORT(fn, pfx, sfx)				\
+	PORT_10(fn, pfx, sfx), PORT_10(fn, pfx##1, sfx),	\
+	PORT_1(fn, pfx##20, sfx), PORT_1(fn, pfx##21, sfx),	\
+	PORT_1(fn, pfx##22, sfx)
+
+#define CPU_25_PORT(fn, pfx, sfx)				\
+	PORT_10(fn, pfx, sfx), PORT_10(fn, pfx##1, sfx),	\
+	PORT_1(fn, pfx##20, sfx), PORT_1(fn, pfx##21, sfx),	\
+	PORT_1(fn, pfx##22, sfx), PORT_1(fn, pfx##23, sfx),	\
+	PORT_1(fn, pfx##24, sfx), PORT_1(fn, pfx##25, sfx)	\
+
+/*
+ * GP_0_0_DATA -> GP_6_25_DATA
+ * (except for GP1[26],GP1[27],GP1[28],GP1[29]),GP1[30],GP1[31]
+ *  GP5[28],GP5[29]),GP5[30],GP5[31],GP6[26],GP6[27],GP6[28],
+ *  GP6[29]),GP6[30],GP6[31])
+ */
+#define CPU_ALL_PORT(fn, pfx, sfx)			\
+	CPU_22_PORT(fn, pfx##_0_, sfx),			\
+	CPU_22_PORT(fn, pfx##_1_, sfx),			\
+	CPU_32_PORT(fn, pfx##_2_, sfx),			\
+	CPU_19_PORT(fn, pfx##_3_, sfx),			\
+	CPU_25_PORT(fn, pfx##_4_, sfx),			\
+	CPU_32_PORT(fn, pfx##_5_, sfx)
+
+#define _GP_GPIO(pfx, sfx) PINMUX_GPIO(GPIO_GP##pfx, GP##pfx##_DATA)
+#define _GP_DATA(pfx, sfx) PINMUX_DATA(GP##pfx##_DATA, GP##pfx##_FN,	\
+				       GP##pfx##_IN, GP##pfx##_OUT)
+
+#define _GP_INOUTSEL(pfx, sfx) GP##pfx##_IN, GP##pfx##_OUT
+#define _GP_INDT(pfx, sfx) GP##pfx##_DATA
+
+#define GP_ALL(str)	CPU_ALL_PORT(_PORT_ALL, GP, str)
+#define PINMUX_GPIO_GP_ALL()	CPU_ALL_PORT(_GP_GPIO, , unused)
+#define PINMUX_DATA_GP_ALL()	CPU_ALL_PORT(_GP_DATA, , unused)
+
+
+#define PORT_10_REV(fn, pfx, sfx)				\
+	PORT_1(fn, pfx##9, sfx), PORT_1(fn, pfx##8, sfx),	\
+	PORT_1(fn, pfx##7, sfx), PORT_1(fn, pfx##6, sfx),	\
+	PORT_1(fn, pfx##5, sfx), PORT_1(fn, pfx##4, sfx),	\
+	PORT_1(fn, pfx##3, sfx), PORT_1(fn, pfx##2, sfx),	\
+	PORT_1(fn, pfx##1, sfx), PORT_1(fn, pfx##0, sfx)
+
+#define CPU_32_PORT_REV(fn, pfx, sfx)					\
+	PORT_1(fn, pfx##31, sfx), PORT_1(fn, pfx##30, sfx),		\
+	PORT_10_REV(fn, pfx##2, sfx), PORT_10_REV(fn, pfx##1, sfx),	\
+	PORT_10_REV(fn, pfx, sfx)
+
+#define GP_INOUTSEL(bank) CPU_32_PORT_REV(_GP_INOUTSEL, _##bank##_, unused)
+#define GP_INDT(bank) CPU_32_PORT_REV(_GP_INDT, _##bank##_, unused)
+
+#define PINMUX_IPSR_DATA(ipsr, fn) PINMUX_DATA(fn##_MARK, FN_##ipsr, FN_##fn)
+#define PINMUX_IPSR_MODSEL_DATA(ipsr, fn, ms) PINMUX_DATA(fn##_MARK, FN_##ms, \
+							  FN_##ipsr, FN_##fn)
+#define PINMUX_IPSR_MODSEL_DATA2(ipsr, fn, ms...) PINMUX_DATA(fn##_MARK, ms, \
+							  FN_##ipsr, FN_##fn)
+
+enum {
+	PINMUX_RESERVED = 0,
+
+	PINMUX_DATA_BEGIN,
+	GP_ALL(DATA),
+	PINMUX_DATA_END,
+
+	PINMUX_INPUT_BEGIN,
+	GP_ALL(IN),
+	PINMUX_INPUT_END,
+
+	PINMUX_OUTPUT_BEGIN,
+	GP_ALL(OUT),
+	PINMUX_OUTPUT_END,
+
+	PINMUX_FUNCTION_BEGIN,
+	GP_ALL(FN),
+
+	/* GPSR0 */
+	FN_USB0_PWEN, FN_USB0_OVC, FN_USB1_PWEN, FN_USB1_OVC, FN_CLKOUT,
+	FN_IP0_3_0, FN_IP0_7_4, FN_IP0_11_8, FN_IP0_15_12, FN_IP0_19_16,
+	FN_IP0_23_20, FN_IP0_27_24, FN_IP0_31_28, FN_MMC0_CLK_SDHI1_CLK,
+	FN_MMC0_CMD_SDHI1_CMD, FN_MMC0_D0_SDHI1_D0, FN_MMC0_D1_SDHI1_D1,
+	FN_MMC0_D2_SDHI1_D2, FN_MMC0_D3_SDHI1_D3, FN_IP1_3_0,
+	FN_IP1_7_4, FN_MMC0_D6, FN_MMC0_D7,
+
+	/* GPSR1 */
+	FN_IP1_11_8, FN_IP1_15_12, FN_IP1_19_16, FN_IP1_23_20, FN_IP1_27_24,
+	FN_IP1_31_28, FN_IP2_3_0, FN_IP2_7_4, FN_IP2_11_8, FN_IP2_15_12,
+	FN_IP2_19_16, FN_IP2_23_20, FN_IP2_27_24, FN_IP2_31_28, FN_IP3_3_0,
+	FN_IP3_7_4, FN_IP3_11_8, FN_IP3_15_12, FN_IP3_19_16, FN_IP3_23_20,
+	FN_IP3_27_24, FN_IP3_31_28, FN_IP4_3_0,
+
+	/* GPSR2 */
+	FN_IP4_7_4, FN_IP4_11_8, FN_IP4_15_12, FN_IP4_19_16, FN_IP4_23_20,
+	FN_IP4_27_24, FN_IP4_31_28, FN_IP5_3_0, FN_IP5_7_4, FN_IP5_11_8,
+	FN_IP5_15_12, FN_IP5_19_16, FN_IP5_23_20, FN_IP5_27_24, FN_IP5_31_28,
+	FN_IP6_3_0, FN_IP6_7_4, FN_IP6_11_8, FN_IP6_15_12, FN_IP6_19_16,
+	FN_IP6_23_20, FN_IP6_27_24, FN_IP6_31_28, FN_IP7_3_0, FN_IP7_7_4,
+	FN_IP7_11_8, FN_IP7_15_12, FN_IP7_19_16, FN_IP7_23_20, FN_IP7_27_24,
+	FN_IP7_31_28, FN_IP8_3_0,
+
+	/* GPSR3 */
+	FN_IP8_7_4,	FN_IP8_11_8, FN_IP8_15_12, FN_IP8_19_16, FN_IP8_23_20,
+	FN_IP8_27_24, FN_IP8_31_28, FN_IP9_3_0, FN_IP9_7_4, FN_IP9_11_8,
+	FN_IP9_15_12, FN_IP9_19_16, FN_IP9_23_20, FN_IP9_27_24, FN_IP9_31_28,
+	FN_IP10_3_0, FN_IP10_7_4, FN_IP10_11_8, FN_IP10_15_12, FN_IP10_19_16,
+
+	/* GPSR4 */
+	FN_IP10_23_20, FN_IP10_27_24, FN_IP10_31_28, FN_IP11_3_0, FN_IP11_7_4,
+	FN_IP11_11_8, FN_IP11_15_12, FN_IP11_19_16, FN_IP11_23_20,
+	FN_IP11_27_24, FN_IP11_31_28, FN_IP12_3_0, FN_IP12_7_4, FN_IP12_11_8,
+	FN_IP12_15_12, FN_IP12_19_16, FN_IP12_23_20, FN_IP12_27_24,
+	FN_IP12_31_28, FN_IP13_3_0, FN_IP13_7_4, FN_IP13_11_8, FN_IP13_15_12,
+	FN_IP13_19_16, FN_IP13_23_20, FN_IP13_27_24,
+
+	/* GPSR5 */
+	FN_IP13_31_28, FN_IP14_3_0, FN_IP14_7_4, FN_IP14_11_8, FN_IP14_15_12,
+	FN_IP14_19_16, FN_IP14_23_20, FN_IP14_27_24, FN_IP14_31_28,
+	FN_IP15_3_0, FN_IP15_7_4, FN_IP15_11_8, FN_IP15_15_12, FN_IP15_19_16,
+	FN_IP15_23_20, FN_IP15_27_24, FN_IP15_31_28, FN_IP16_3_0, FN_IP16_7_4,
+	FN_IP16_11_8, FN_IP16_15_12, FN_IP16_19_16, FN_IP16_23_20,
+	FN_IP16_27_24, FN_IP16_31_28, FN_IP17_3_0, FN_IP17_7_4, FN_IP17_11_8,
+	FN_IP17_15_12, FN_IP17_19_16, FN_IP17_23_20, FN_IP17_27_24,
+
+	/* IPSR0 */
+	FN_SD0_CLK, FN_SSI_SCK1_C, FN_RX3_C, FN_SD0_CMD, FN_SSI_WS1_C,
+	FN_TX3_C, FN_SD0_DATA0, FN_SSI_SDATA1_C, FN_RX4_E, FN_SD0_DATA1,
+	FN_SSI_SCK0129_B, FN_TX4_E, FN_SD0_DATA2, FN_SSI_WS0129_B, FN_RX5_E,
+	FN_SD0_DATA3, FN_SSI_SDATA0_B, FN_TX5_E, FN_SD0_CD, FN_CAN0_RX_A,
+	FN_SD0_WP, FN_IRQ7, FN_CAN0_TX_A,
+
+	/* IPSR1 */
+	FN_MMC0_D4, FN_SD1_CD, FN_MMC0_D5, FN_SD1_WP, FN_D0, FN_RIF0_D0_A,
+	FN_SCL3_B, FN_RX5_B, FN_IRQ4, FN_MSIOF2_RXD_C, FN_SSI_SDATA5_B,
+	FN_D1, FN_RIF0_D1_A, FN_SDA3_B, FN_TX5_B, FN_MSIOF2_TXD_C, FN_SSI_WS5_B,
+	FN_D2, FN_RIF0_CLK_A, FN_RX4_B, FN_SCL0_D, FN_PWM1_C, FN_MSIOF2_SCK_C,
+	FN_SSI_SCK5_B, FN_D3, FN_RIF0_SYNC_A, FN_TX4_B, FN_SDA0_D, FN_PWM0_A,
+	FN_MSIOF2_SYNC_C, FN_D4, FN_IRQ3, FN_TCLK1_A, FN_PWM6_C, FN_TS_SDAT0_B,
+	FN_D5, FN_HRX2, FN_SCL1_B, FN_PWM2_C, FN_TCLK2_B, FN_TS_SCK0_B,
+
+	/* IPSR2 */
+	FN_D6, FN_HTX2, FN_SDA1_B, FN_PWM4_C, FN_TS_SDEN0_B, FN_D7, FN_HSCK2,
+	FN_SCIF1_SCK_C, FN_IRQ6, FN_PWM5_C, FN_TS_SPSYNC0_B, FN_D8, FN_HCTS2_N,
+	FN_RX1_C, FN_SCL1_D, FN_PWM3_C, FN_ADIDATA, FN_D9, FN_HRTS2_N, FN_TX1_C,
+	FN_SDA1_D, FN_ADICS_SAMP, FN_D10, FN_MSIOF2_RXD_A, FN_HRX0_B, FN_ADICLK,
+	FN_D11, FN_MSIOF2_TXD_A, FN_HTX0_B, FN_ADICHS0, FN_D12, FN_MSIOF2_SCK_A,
+	FN_HSCK0, FN_SPEEDIN_A, FN_CAN_CLK_C, FN_ADICHS1, FN_D13,
+	FN_MSIOF2_SYNC_A, FN_RX4_C, FN_ADICHS2,
+
+	/* IPSR3 */
+	FN_D14, FN_MSIOF2_SS1_A, FN_TX4_C, FN_CAN1_RX_B, FN_SPEEDIN_C,
+	FN_AVB_AVTP_CAPTURE_A, FN_D15, FN_MSIOF2_SS2_A, FN_PWM4_A, FN_CAN1_TX_B,
+	FN_IRQ2, FN_AVB_AVTP_MATCH_A, FN_QSPI0_SPCLK, FN_WE0_N,
+	FN_QSPI0_MOSI_IO0, FN_BS_N, FN_QSPI0_MISO_IO1, FN_RD_WR_N, FN_QSPI0_IO2,
+	FN_CS0_N, FN_QSPI0_IO3, FN_RD_N, FN_QSPI0_SSL, FN_WE1_N,
+
+	/* IPSR4 */
+	FN_EX_WAIT0, FN_CAN_CLK_B, FN_SCIF_CLK_A, FN_PWMFSW0, FN_DU0_DR0,
+	FN_LCDOUT16, FN_RX5_C, FN_SCL2_D, FN_A0, FN_DU0_DR1, FN_LCDOUT17,
+	FN_TX5_C, FN_SDA2_D, FN_A1, FN_DU0_DR2, FN_LCDOUT18, FN_RX0_D,
+	FN_SCL0_E, FN_A2, FN_DU0_DR3, FN_LCDOUT19, FN_TX0_D, FN_SDA0_E,
+	FN_PWM0_B, FN_A3, FN_DU0_DR4, FN_LCDOUT20, FN_RX1_D, FN_A4, FN_DU0_DR5,
+	FN_LCDOUT21, FN_TX1_D, FN_PWM1_B, FN_A5, FN_DU0_DR6, FN_LCDOUT22,
+	FN_RX2_C, FN_A6,
+
+	/* IPSR5 */
+	FN_DU0_DR7, FN_LCDOUT23, FN_TX2_C, FN_PWM2_B, FN_A7, FN_DU0_DG0,
+	FN_LCDOUT8, FN_RX3_B, FN_SCL3_D, FN_A8, FN_DU0_DG1, FN_LCDOUT9,
+	FN_TX3_B, FN_SDA3_D, FN_PWM3_B, FN_A9, FN_DU0_DG2, FN_LCDOUT10,
+	FN_RX4_D, FN_A10, FN_DU0_DG3, FN_LCDOUT11, FN_TX4_D, FN_PWM4_B, FN_A11,
+	FN_DU0_DG4, FN_LCDOUT12, FN_HRX0_A, FN_A12, FN_DU0_DG5, FN_LCDOUT13,
+	FN_HTX0_A, FN_PWM5_B, FN_A13, FN_DU0_DG6, FN_LCDOUT14, FN_HRX1_C,
+	FN_A14,
+
+	/* IPSR6 */
+	FN_DU0_DG7, FN_LCDOUT15, FN_HTX1_C, FN_PWM6_B, FN_A15, FN_DU0_DB0,
+	FN_LCDOUT0, FN_SCL4_D, FN_CAN0_RX_C, FN_A16, FN_DU0_DB1, FN_LCDOUT1,
+	FN_SDA4_D, FN_CAN0_TX_C, FN_A17, FN_DU0_DB2, FN_LCDOUT2, FN_HCTS0_N,
+	FN_A18, FN_DU0_DB3, FN_LCDOUT3, FN_HRTS0_N, FN_A19, FN_DU0_DB4,
+	FN_LCDOUT4, FN_HCTS1_N_C, FN_RIF0_CLK_B, FN_A20, FN_DU0_DB5, FN_LCDOUT5,
+	FN_HRTS1_N_C, FN_RIF0_SYNC_B, FN_A21, FN_DU0_DB6, FN_LCDOUT6,
+	FN_RIF0_D0_B, FN_A22,
+
+	/* IPSR7 */
+	FN_DU0_DB7, FN_LCDOUT7, FN_RIF0_D1_B, FN_A23, FN_DU0_DOTCLKIN,
+	FN_QSTVA_QVS, FN_A24, FN_DU0_DOTCLKOUT0, FN_QCLK, FN_A25,
+	FN_DU0_DOTCLKOUT1, FN_QSTVB_QVE, FN_MSIOF2_RXD_B, FN_CS1_N_A26,
+	FN_DU0_EXHSYNC_DU0_HSYNC, FN_QSTH_QHS, FN_MSIOF2_TXD_B, FN_DREQ0_N,
+	FN_DU0_EXVSYNC_DU0_VSYNC, FN_QSTB_QHE, FN_MSIOF2_SYNC_B, FN_DACK0,
+	FN_DU0_EXODDF_DU0_ODDF_DISP_CDE, FN_QCPV_QDE, FN_MSIOF2_SCK_B,
+	FN_DRACK0, FN_DU0_DISP, FN_QPOLA, FN_CAN1_RX_C,
+
+	/* IPSR8 */
+	FN_DU0_CDE, FN_QPOLB, FN_CAN1_TX_C, FN_VI1_CLK, FN_AVB_RX_CLK,
+	FN_ETH_REF_CLK, FN_VI1_DATA0, FN_AVB_RX_DV, FN_ETH_CRS_DV, FN_VI1_DATA1,
+	FN_AVB_RXD0, FN_ETH_RXD0, FN_VI1_DATA2, FN_AVB_RXD1, FN_ETH_RXD1,
+	FN_VI1_DATA3, FN_AVB_RXD2, FN_ETH_MDIO, FN_VI1_DATA4, FN_AVB_RXD3,
+	FN_ETH_RX_ER, FN_VI1_DATA5, FN_AVB_RXD4, FN_ETH_LINK,
+
+	/* IPSR9 */
+	FN_VI1_DATA6, FN_AVB_RXD5, FN_ETH_TXD1, FN_VI1_DATA7, FN_AVB_RXD6,
+	FN_ETH_TX_EN, FN_VI1_CLKENB, FN_SCL3_A, FN_AVB_RXD7, FN_ETH_MAGIC,
+	FN_VI1_FIELD, FN_SDA3_A, FN_AVB_RX_ER, FN_ETH_TXD0, FN_VI1_HSYNC_N,
+	FN_RX0_B, FN_SCL0_C, FN_AVB_GTXREFCLK, FN_ETH_MDC, FN_VI1_VSYNC_N,
+	FN_TX0_B, FN_SDA0_C, FN_AUDIO_CLKOUT_B, FN_AVB_TX_CLK, FN_VI1_DATA8,
+	FN_SCL2_B, FN_AVB_TX_EN, FN_VI1_DATA9, FN_SDA2_B, FN_AVB_TXD0,
+
+	/* IPSR10 */
+	FN_VI1_DATA10, FN_CAN0_RX_B, FN_AVB_TXD1, FN_VI1_DATA11, FN_CAN0_TX_B,
+	FN_AVB_TXD2, FN_AVB_TXD3, FN_AUDIO_CLKA_B, FN_SSI_SCK1_D, FN_RX5_F,
+	FN_MSIOF0_RXD_B, FN_AVB_TXD4, FN_AUDIO_CLKB_B, FN_SSI_WS1_D, FN_TX5_F,
+	FN_MSIOF0_TXD_B, FN_AVB_TXD5, FN_SCIF_CLK_B, FN_AUDIO_CLKC_B,
+	FN_SSI_SDATA1_D, FN_MSIOF0_SCK_B, FN_SCL0_A, FN_RX0_C, FN_PWM5_A,
+	FN_TCLK1_B, FN_AVB_TXD6, FN_CAN1_RX_D, FN_MSIOF0_SYNC_B, FN_SDA0_A,
+	FN_TX0_C, FN_IRQ5, FN_CAN_CLK_A, FN_AVB_GTX_CLK, FN_CAN1_TX_D,
+	FN_DVC_MUTE, FN_SCL1_A, FN_RX4_A, FN_PWM5_D, FN_DU1_DR0, FN_SSI_SCK6_B,
+	FN_VI0_G0,
+
+	/* IPSR11 */
+	FN_SDA1_A, FN_TX4_A, FN_DU1_DR1, FN_SSI_WS6_B, FN_VI0_G1,
+	FN_MSIOF0_RXD_A, FN_RX5_A, FN_SCL2_C, FN_DU1_DR2, FN_QSPI1_MOSI_IO0,
+	FN_SSI_SDATA6_B, FN_VI0_G2, FN_MSIOF0_TXD_A, FN_TX5_A, FN_SDA2_C,
+	FN_DU1_DR3, FN_QSPI1_MISO_IO1, FN_SSI_WS78_B, FN_VI0_G3,
+	FN_MSIOF0_SCK_A, FN_IRQ0, FN_TS_SCK0_A, FN_DU1_DR4, FN_RIF1_CLK,
+	FN_QSPI1_SPCLK, FN_SSI_SCK78_B, FN_VI0_G4, FN_MSIOF0_SYNC_A,
+	FN_PWM1_A, FN_TS_SDAT0_A, FN_DU1_DR5, FN_RIF1_SYNC, FN_QSPI1_IO2,
+	FN_SSI_SDATA7_B, FN_MSIOF0_SS1_A, FN_TS_SDEN0_A, FN_DU1_DR6, FN_RIF1_D0,
+	FN_QSPI1_IO3, FN_SSI_SDATA8_B, FN_MSIOF0_SS2_A, FN_TS_SPSYNC0_A,
+	FN_DU1_DR7, FN_RIF1_D1, FN_QSPI1_SSL, FN_HRX1_A, FN_SCL4_A, FN_PWM6_A,
+	FN_DU1_DG0, FN_RX0_A,
+
+	/* IPSR12 */
+	FN_HTX1_A, FN_SDA4_A, FN_DU1_DG1, FN_TX0_A, FN_HCTS1_N_A, FN_PWM2_A,
+	FN_DU1_DG2, FN_REMOCON_B, FN_SPEEDIN_B, FN_HRTS1_N_A, FN_DU1_DG3,
+	FN_SSI_WS1_B, FN_IRQ1, FN_SD2_CLK, FN_HSCK1, FN_DU1_DG4, FN_SSI_SCK1_B,
+	FN_SD2_CMD, FN_SCIF1_SCK_A, FN_TCLK2_A, FN_DU1_DG5, FN_SSI_SCK2_B,
+	FN_PWM3_A, FN_SD2_DATA0, FN_RX1_A, FN_SCL1_E, FN_DU1_DG6,
+	FN_SSI_SDATA1_B, FN_SD2_DATA1, FN_TX1_A, FN_SDA1_E, FN_DU1_DG7,
+	FN_SSI_WS2_B, FN_SD2_DATA2, FN_RX2_A, FN_DU1_DB0, FN_SSI_SDATA2_B,
+
+	/* IPSR13 */
+	FN_SD2_DATA3, FN_TX2_A, FN_DU1_DB1, FN_SSI_WS9_B, FN_SD2_CD,
+	FN_SCIF2_SCK_A, FN_DU1_DB2, FN_SSI_SCK9_B, FN_SD2_WP, FN_SCIF3_SCK_A,
+	FN_DU1_DB3, FN_SSI_SDATA9_B, FN_RX3_A, FN_SCL1_C, FN_MSIOF1_RXD_B,
+	FN_DU1_DB4, FN_AUDIO_CLKA_C, FN_SSI_SDATA4_B, FN_TX3_A, FN_SDA1_C,
+	FN_MSIOF1_TXD_B, FN_DU1_DB5, FN_AUDIO_CLKB_C, FN_SSI_WS4_B, FN_SCL2_A,
+	FN_MSIOF1_SCK_B, FN_DU1_DB6, FN_AUDIO_CLKC_C, FN_SSI_SCK4_B, FN_SDA2_A,
+	FN_MSIOF1_SYNC_B, FN_DU1_DB7, FN_AUDIO_CLKOUT_C, FN_SSI_SCK5_A,
+	FN_DU1_DOTCLKOUT1,
+
+	/* IPSR14 */
+	FN_SSI_WS5_A, FN_SCL3_C, FN_DU1_DOTCLKIN, FN_SSI_SDATA5_A, FN_SDA3_C,
+	FN_DU1_DOTCLKOUT0, FN_SSI_SCK6_A, FN_DU1_EXODDF_DU1_ODDF_DISP_CDE,
+	FN_SSI_WS6_A, FN_SCL4_C, FN_DU1_EXHSYNC_DU1_HSYNC, FN_SSI_SDATA6_A,
+	FN_SDA4_C, FN_DU1_EXVSYNC_DU1_VSYNC, FN_SSI_SCK78_A, FN_SDA4_E,
+	FN_DU1_DISP, FN_SSI_WS78_A, FN_SCL4_E, FN_DU1_CDE, FN_SSI_SDATA7_A,
+	FN_IRQ8, FN_AUDIO_CLKA_D, FN_CAN_CLK_D, FN_VI0_G5,
+
+	/* IPSR15 */
+	FN_SSI_SCK0129_A, FN_MSIOF1_RXD_A, FN_RX5_D, FN_VI0_G6, FN_SSI_WS0129_A,
+	FN_MSIOF1_TXD_A, FN_TX5_D, FN_VI0_G7, FN_SSI_SDATA0_A, FN_MSIOF1_SYNC_A,
+	FN_PWM0_C, FN_VI0_R0, FN_SSI_SCK34, FN_MSIOF1_SCK_A, FN_AVB_MDC,
+	FN_DACK1, FN_VI0_R1, FN_SSI_WS34, FN_MSIOF1_SS1_A, FN_AVB_MDIO,
+	FN_CAN1_RX_A, FN_DREQ1_N, FN_VI0_R2, FN_SSI_SDATA3, FN_MSIOF1_SS2_A,
+	FN_AVB_LINK, FN_CAN1_TX_A, FN_DREQ2_N, FN_VI0_R3, FN_SSI_SCK4_A,
+	FN_AVB_MAGIC, FN_VI0_R4, FN_SSI_WS4_A, FN_AVB_PHY_INT, FN_VI0_R5,
+
+	/* IPSR16 */
+	FN_SSI_SDATA4_A, FN_AVB_CRS, FN_VI0_R6, FN_SSI_SCK1_A, FN_SCIF1_SCK_B,
+	FN_PWM1_D, FN_IRQ9, FN_REMOCON_A, FN_DACK2, FN_VI0_CLK, FN_AVB_COL,
+	FN_SSI_SDATA8_A, FN_RX1_B, FN_CAN0_RX_D, FN_AVB_AVTP_CAPTURE_B,
+	FN_VI0_R7, FN_SSI_WS1_A, FN_TX1_B, FN_CAN0_TX_D, FN_AVB_AVTP_MATCH_B,
+	FN_VI0_DATA0_VI0_B0, FN_SSI_SDATA1_A, FN_HRX1_B, FN_VI0_DATA1_VI0_B1,
+	FN_SSI_SCK2_A, FN_HTX1_B, FN_AVB_TXD7, FN_VI0_DATA2_VI0_B2,
+	FN_SSI_WS2_A, FN_HCTS1_N_B, FN_AVB_TX_ER, FN_VI0_DATA3_VI0_B3,
+	FN_SSI_SDATA2_A, FN_HRTS1_N_B, FN_VI0_DATA4_VI0_B4,
+
+	/* IPSR17 */
+	FN_SSI_SCK9_A, FN_RX2_B, FN_SCL3_E, FN_EX_WAIT1, FN_VI0_DATA5_VI0_B5,
+	FN_SSI_WS9_A, FN_TX2_B, FN_SDA3_E, FN_VI0_DATA6_VI0_B6, FN_SSI_SDATA9_A,
+	FN_SCIF2_SCK_B, FN_PWM2_D, FN_VI0_DATA7_VI0_B7, FN_AUDIO_CLKA_A,
+	FN_SCL0_B, FN_TS_SDAT0_C, FN_TANS1, FN_VI0_CLKENB, FN_AUDIO_CLKB_A,
+	FN_SDA0_B, FN_TS_SCK0_C, FN_TANS2, FN_VI0_FIELD, FN_AUDIO_CLKC_A,
+	FN_SCL4_B, FN_TS_SDEN0_C, FN_VI0_HSYNC_N, FN_AUDIO_CLKOUT_A, FN_SDA4_B,
+	FN_TS_SPSYNC0_C, FN_VI0_VSYNC_N,
+
+	/* MOD_SEL */
+	FN_SEL_ADGA_0, FN_SEL_ADGA_1, FN_SEL_ADGA_2, FN_SEL_ADGA_3,
+	FN_SEL_DR0_0, FN_SEL_DR0_1, FN_SEL_CANCLK_0, FN_SEL_CANCLK_1,
+	FN_SEL_CANCLK_2, FN_SEL_CANCLK_3, FN_SEL_CAN1_0, FN_SEL_CAN1_1,
+	FN_SEL_CAN1_2, FN_SEL_CAN1_3, FN_SEL_CAN0_0, FN_SEL_CAN0_1,
+	FN_SEL_CAN0_2, FN_SEL_CAN0_3, FN_SEL_I2C04_0, FN_SEL_I2C04_1,
+	FN_SEL_I2C04_2, FN_SEL_I2C04_3, FN_SEL_I2C04_4, FN_SEL_I2C03_0,
+	FN_SEL_I2C03_1, FN_SEL_I2C03_2, FN_SEL_I2C03_3, FN_SEL_I2C03_4,
+	FN_SEL_I2C02_0, FN_SEL_I2C02_1, FN_SEL_I2C02_2, FN_SEL_I2C02_3,
+	FN_SEL_I2C01_0, FN_SEL_I2C01_1, FN_SEL_I2C01_2, FN_SEL_I2C01_3,
+	FN_SEL_I2C01_4, FN_SEL_I2C00_0, FN_SEL_I2C00_1, FN_SEL_I2C00_2,
+	FN_SEL_I2C00_3, FN_SEL_I2C00_4, FN_SEL_AVB_0, FN_SEL_AVB_1,
+
+	/* MOD_SEL1 */
+	FN_SEL_SCIFCLK_0, FN_SEL_SCIFCLK_1, FN_SEL_SCIF5_0, FN_SEL_SCIF5_1,
+	FN_SEL_SCIF5_2, FN_SEL_SCIF5_3, FN_SEL_SCIF5_4, FN_SEL_SCIF5_5,
+	FN_SEL_SCIF4_0, FN_SEL_SCIF4_1, FN_SEL_SCIF4_2, FN_SEL_SCIF4_3,
+	FN_SEL_SCIF4_4, FN_SEL_SCIF3_0, FN_SEL_SCIF3_1, FN_SEL_SCIF3_2,
+	FN_SEL_SCIF2_0, FN_SEL_SCIF2_1, FN_SEL_SCIF2_2, FN_SEL_SCIF2_CLK_0,
+	FN_SEL_SCIF2_CLK_1, FN_SEL_SCIF1_0, FN_SEL_SCIF1_1, FN_SEL_SCIF1_2,
+	FN_SEL_SCIF1_3, FN_SEL_SCIF0_0, FN_SEL_SCIF0_1, FN_SEL_SCIF0_2,
+	FN_SEL_SCIF0_3, FN_SEL_MSIOF2_0, FN_SEL_MSIOF2_1, FN_SEL_MSIOF2_2,
+	FN_SEL_MSIOF1_0, FN_SEL_MSIOF1_1, FN_SEL_MSIOF0_0, FN_SEL_MSIOF0_1,
+	FN_SEL_RCN_0, FN_SEL_RCN_1, FN_SEL_RSP_0, FN_SEL_RSP_1,
+	FN_SEL_RSP_2, FN_SEL_TMU2_0, FN_SEL_TMU2_1, FN_SEL_TMU1_0,
+	FN_SEL_TMU1_1, FN_SEL_TSIF_0, FN_SEL_TSIF_1, FN_SEL_TSIF_2,
+	FN_SEL_HSCIF1_0, FN_SEL_HSCIF1_1, FN_SEL_HSCIF1_2,
+	FN_SEL_HSCIF0_0, FN_SEL_HSCIF0_1,
+
+	/* MOD_SEL2 */
+	FN_SEL_ADGB_0, FN_SEL_ADGB_1, FN_SEL_ADGB_2, FN_SEL_ADGC_0,
+	FN_SEL_ADGC_1, FN_SEL_ADGC_2, FN_SEL_SSI9_0, FN_SEL_SSI9_1,
+	FN_SEL_SSI8_0, FN_SEL_SSI8_1, FN_SEL_SSI7_0, FN_SEL_SSI7_1,
+	FN_SEL_SSI6_0, FN_SEL_SSI6_1, FN_SEL_SSI5_0, FN_SEL_SSI5_1,
+	FN_SEL_SSI4_0, FN_SEL_SSI4_1, FN_SEL_SSI2_0, FN_SEL_SSI2_1,
+	FN_SEL_SSI1_0, FN_SEL_SSI1_1, FN_SEL_SSI1_2, FN_SEL_SSI1_3,
+	FN_SEL_SSI0_0, FN_SEL_SSI0_1,
+	PINMUX_FUNCTION_END,
+
+	PINMUX_MARK_BEGIN,
+	USB0_PWEN_MARK, USB0_OVC_MARK, USB1_PWEN_MARK, USB1_OVC_MARK,
+	CLKOUT_MARK, MMC0_CLK_SDHI1_CLK_MARK, MMC0_CMD_SDHI1_CMD_MARK,
+	MMC0_D0_SDHI1_D0_MARK, MMC0_D1_SDHI1_D1_MARK,
+	MMC0_D2_SDHI1_D2_MARK, MMC0_D3_SDHI1_D3_MARK, MMC0_D6_MARK,
+	MMC0_D7_MARK,
+
+	/* IPSR0 */
+	SD0_CLK_MARK, SSI_SCK1_C_MARK, RX3_C_MARK, SD0_CMD_MARK, SSI_WS1_C_MARK,
+	TX3_C_MARK, SD0_DATA0_MARK, SSI_SDATA1_C_MARK, RX4_E_MARK,
+	SD0_DATA1_MARK, SSI_SCK0129_B_MARK, TX4_E_MARK, SD0_DATA2_MARK,
+	SSI_WS0129_B_MARK, RX5_E_MARK, SD0_DATA3_MARK, SSI_SDATA0_B_MARK,
+	TX5_E_MARK, SD0_CD_MARK, CAN0_RX_A_MARK, SD0_WP_MARK, IRQ7_MARK,
+	CAN0_TX_A_MARK,
+
+	/* IPSR1 */
+	MMC0_D4_MARK, SD1_CD_MARK, MMC0_D5_MARK, SD1_WP_MARK, D0_MARK,
+	RIF0_D0_A_MARK, SCL3_B_MARK, RX5_B_MARK, IRQ4_MARK, MSIOF2_RXD_C_MARK,
+	SSI_SDATA5_B_MARK, D1_MARK, RIF0_D1_A_MARK, SDA3_B_MARK, TX5_B_MARK,
+	MSIOF2_TXD_C_MARK, SSI_WS5_B_MARK, D2_MARK, RIF0_CLK_A_MARK, RX4_B_MARK,
+	SCL0_D_MARK, PWM1_C_MARK, MSIOF2_SCK_C_MARK, SSI_SCK5_B_MARK, D3_MARK,
+	RIF0_SYNC_A_MARK, TX4_B_MARK, SDA0_D_MARK, PWM0_A_MARK,
+	MSIOF2_SYNC_C_MARK, D4_MARK, IRQ3_MARK, TCLK1_A_MARK, PWM6_C_MARK,
+	TS_SDAT0_B_MARK, D5_MARK, HRX2_MARK, SCL1_B_MARK, PWM2_C_MARK,
+	TCLK2_B_MARK, TS_SCK0_B_MARK,
+
+	/* IPSR2 */
+	D6_MARK, HTX2_MARK, SDA1_B_MARK, PWM4_C_MARK, TS_SDEN0_B_MARK, D7_MARK,
+	HSCK2_MARK, SCIF1_SCK_C_MARK, IRQ6_MARK, PWM5_C_MARK,
+	TS_SPSYNC0_B_MARK, D8_MARK, HCTS2_N_MARK, RX1_C_MARK, SCL1_D_MARK,
+	PWM3_C_MARK, ADIDATA_MARK, D9_MARK, HRTS2_N_MARK, TX1_C_MARK,
+	SDA1_D_MARK, ADICS_SAMP_MARK, D10_MARK, MSIOF2_RXD_A_MARK,
+	HRX0_B_MARK, ADICLK_MARK, D11_MARK, MSIOF2_TXD_A_MARK, HTX0_B_MARK,
+	ADICHS0_MARK, D12_MARK, MSIOF2_SCK_A_MARK, HSCK0_MARK, SPEEDIN_A_MARK,
+	CAN_CLK_C_MARK, ADICHS1_MARK, D13_MARK, MSIOF2_SYNC_A_MARK,
+	RX4_C_MARK, ADICHS2_MARK,
+
+	/* IPSR3 */
+	D14_MARK, MSIOF2_SS1_A_MARK, TX4_C_MARK, CAN1_RX_B_MARK, SPEEDIN_C_MARK,
+	AVB_AVTP_CAPTURE_A_MARK, D15_MARK, MSIOF2_SS2_A_MARK, PWM4_A_MARK,
+	CAN1_TX_B_MARK, IRQ2_MARK, AVB_AVTP_MATCH_A_MARK, QSPI0_SPCLK_MARK,
+	WE0_N_MARK, QSPI0_MOSI_IO0_MARK, BS_N_MARK, QSPI0_MISO_IO1_MARK,
+	RD_WR_N_MARK, QSPI0_IO2_MARK, CS0_N_MARK, QSPI0_IO3_MARK, RD_N_MARK,
+	QSPI0_SSL_MARK, WE1_N_MARK,
+
+	/* IPSR4 */
+	EX_WAIT0_MARK, CAN_CLK_B_MARK, SCIF_CLK_A_MARK, PWMFSW0_MARK,
+	DU0_DR0_MARK, LCDOUT16_MARK, RX5_C_MARK, SCL2_D_MARK, A0_MARK,
+	DU0_DR1_MARK, LCDOUT17_MARK, TX5_C_MARK, SDA2_D_MARK, A1_MARK,
+	DU0_DR2_MARK, LCDOUT18_MARK, RX0_D_MARK, SCL0_E_MARK, A2_MARK,
+	DU0_DR3_MARK, LCDOUT19_MARK, TX0_D_MARK, SDA0_E_MARK, PWM0_B_MARK,
+	A3_MARK, DU0_DR4_MARK, LCDOUT20_MARK, RX1_D_MARK, A4_MARK, DU0_DR5_MARK,
+	LCDOUT21_MARK, TX1_D_MARK, PWM1_B_MARK, A5_MARK, DU0_DR6_MARK,
+	LCDOUT22_MARK, RX2_C_MARK, A6_MARK,
+
+	/* IPSR5 */
+	DU0_DR7_MARK, LCDOUT23_MARK, TX2_C_MARK, PWM2_B_MARK, A7_MARK,
+	DU0_DG0_MARK, LCDOUT8_MARK, RX3_B_MARK, SCL3_D_MARK, A8_MARK,
+	DU0_DG1_MARK, LCDOUT9_MARK, TX3_B_MARK, SDA3_D_MARK, PWM3_B_MARK,
+	A9_MARK, DU0_DG2_MARK, LCDOUT10_MARK, RX4_D_MARK, A10_MARK,
+	DU0_DG3_MARK, LCDOUT11_MARK, TX4_D_MARK, PWM4_B_MARK, A11_MARK,
+	DU0_DG4_MARK, LCDOUT12_MARK, HRX0_A_MARK, A12_MARK, DU0_DG5_MARK,
+	LCDOUT13_MARK, HTX0_A_MARK, PWM5_B_MARK, A13_MARK, DU0_DG6_MARK,
+	LCDOUT14_MARK, HRX1_C_MARK, A14_MARK,
+
+	/* IPSR6 */
+	DU0_DG7_MARK, LCDOUT15_MARK, HTX1_C_MARK, PWM6_B_MARK, A15_MARK,
+	DU0_DB0_MARK, LCDOUT0_MARK, SCL4_D_MARK, CAN0_RX_C_MARK, A16_MARK,
+	DU0_DB1_MARK, LCDOUT1_MARK, SDA4_D_MARK, CAN0_TX_C_MARK, A17_MARK,
+	DU0_DB2_MARK, LCDOUT2_MARK, HCTS0_N_MARK, A18_MARK, DU0_DB3_MARK,
+	LCDOUT3_MARK, HRTS0_N_MARK, A19_MARK, DU0_DB4_MARK, LCDOUT4_MARK,
+	HCTS1_N_C_MARK, RIF0_CLK_B_MARK, A20_MARK, DU0_DB5_MARK,
+	LCDOUT5_MARK, HRTS1_N_C_MARK, RIF0_SYNC_B_MARK, A21_MARK, DU0_DB6_MARK,
+	LCDOUT6_MARK, RIF0_D0_B_MARK, A22_MARK,
+
+	/* IPSR7 */
+	DU0_DB7_MARK, LCDOUT7_MARK, RIF0_D1_B_MARK, A23_MARK, DU0_DOTCLKIN_MARK,
+	QSTVA_QVS_MARK, A24_MARK, DU0_DOTCLKOUT0_MARK, QCLK_MARK, A25_MARK,
+	DU0_DOTCLKOUT1_MARK, QSTVB_QVE_MARK, MSIOF2_RXD_B_MARK, CS1_N_A26_MARK,
+	DU0_EXHSYNC_DU0_HSYNC_MARK, QSTH_QHS_MARK, MSIOF2_TXD_B_MARK,
+	DREQ0_N_MARK, DU0_EXVSYNC_DU0_VSYNC_MARK, QSTB_QHE_MARK,
+	MSIOF2_SYNC_B_MARK, DACK0_MARK, DU0_EXODDF_DU0_ODDF_DISP_CDE_MARK,
+	QCPV_QDE_MARK, MSIOF2_SCK_B_MARK, DRACK0_MARK, DU0_DISP_MARK,
+	QPOLA_MARK, CAN1_RX_C_MARK,
+
+	/* IPSR8 */
+	DU0_CDE_MARK, QPOLB_MARK, CAN1_TX_C_MARK, VI1_CLK_MARK, AVB_RX_CLK_MARK,
+	ETH_REF_CLK_MARK, VI1_DATA0_MARK, AVB_RX_DV_MARK, ETH_CRS_DV_MARK,
+	VI1_DATA1_MARK, AVB_RXD0_MARK, ETH_RXD0_MARK, VI1_DATA2_MARK,
+	AVB_RXD1_MARK, ETH_RXD1_MARK, VI1_DATA3_MARK, AVB_RXD2_MARK,
+	ETH_MDIO_MARK, VI1_DATA4_MARK, AVB_RXD3_MARK, ETH_RX_ER_MARK,
+	VI1_DATA5_MARK, AVB_RXD4_MARK, ETH_LINK_MARK,
+
+	/* IPSR9 */
+	VI1_DATA6_MARK, AVB_RXD5_MARK, ETH_TXD1_MARK, VI1_DATA7_MARK,
+	AVB_RXD6_MARK, ETH_TX_EN_MARK, VI1_CLKENB_MARK, SCL3_A_MARK,
+	AVB_RXD7_MARK, ETH_MAGIC_MARK, VI1_FIELD_MARK, SDA3_A_MARK,
+	AVB_RX_ER_MARK, ETH_TXD0_MARK, VI1_HSYNC_N_MARK, RX0_B_MARK,
+	SCL0_C_MARK, AVB_GTXREFCLK_MARK, ETH_MDC_MARK, VI1_VSYNC_N_MARK,
+	TX0_B_MARK, SDA0_C_MARK, AUDIO_CLKOUT_B_MARK, AVB_TX_CLK_MARK,
+	VI1_DATA8_MARK, SCL2_B_MARK, AVB_TX_EN_MARK, VI1_DATA9_MARK,
+	SDA2_B_MARK, AVB_TXD0_MARK,
+
+	/* IPSR10 */
+	VI1_DATA10_MARK, CAN0_RX_B_MARK, AVB_TXD1_MARK, VI1_DATA11_MARK,
+	CAN0_TX_B_MARK, AVB_TXD2_MARK, AVB_TXD3_MARK, AUDIO_CLKA_B_MARK,
+	SSI_SCK1_D_MARK, RX5_F_MARK, MSIOF0_RXD_B_MARK, AVB_TXD4_MARK,
+	AUDIO_CLKB_B_MARK, SSI_WS1_D_MARK, TX5_F_MARK, MSIOF0_TXD_B_MARK,
+	AVB_TXD5_MARK, SCIF_CLK_B_MARK, AUDIO_CLKC_B_MARK, SSI_SDATA1_D_MARK,
+	MSIOF0_SCK_B_MARK, SCL0_A_MARK, RX0_C_MARK, PWM5_A_MARK, TCLK1_B_MARK,
+	AVB_TXD6_MARK, CAN1_RX_D_MARK, MSIOF0_SYNC_B_MARK, SDA0_A_MARK,
+	TX0_C_MARK, IRQ5_MARK, CAN_CLK_A_MARK, AVB_GTX_CLK_MARK, CAN1_TX_D_MARK,
+	DVC_MUTE_MARK, SCL1_A_MARK, RX4_A_MARK, PWM5_D_MARK, DU1_DR0_MARK,
+	SSI_SCK6_B_MARK, VI0_G0_MARK,
+
+	/* IPSR11 */
+	SDA1_A_MARK, TX4_A_MARK, DU1_DR1_MARK, SSI_WS6_B_MARK, VI0_G1_MARK,
+	MSIOF0_RXD_A_MARK, RX5_A_MARK, SCL2_C_MARK, DU1_DR2_MARK,
+	QSPI1_MOSI_IO0_MARK, SSI_SDATA6_B_MARK, VI0_G2_MARK, MSIOF0_TXD_A_MARK,
+	TX5_A_MARK, SDA2_C_MARK, DU1_DR3_MARK, QSPI1_MISO_IO1_MARK,
+	SSI_WS78_B_MARK, VI0_G3_MARK, MSIOF0_SCK_A_MARK, IRQ0_MARK,
+	TS_SCK0_A_MARK, DU1_DR4_MARK, RIF1_CLK_MARK, QSPI1_SPCLK_MARK,
+	SSI_SCK78_B_MARK, VI0_G4_MARK, MSIOF0_SYNC_A_MARK, PWM1_A_MARK,
+	TS_SDAT0_A_MARK, DU1_DR5_MARK, RIF1_SYNC_MARK, QSPI1_IO2_MARK,
+	SSI_SDATA7_B_MARK, MSIOF0_SS1_A_MARK, TS_SDEN0_A_MARK, DU1_DR6_MARK,
+	RIF1_D0_MARK, QSPI1_IO3_MARK, SSI_SDATA8_B_MARK, MSIOF0_SS2_A_MARK,
+	TS_SPSYNC0_A_MARK, DU1_DR7_MARK, RIF1_D1_MARK, QSPI1_SSL_MARK,
+	HRX1_A_MARK, SCL4_A_MARK, PWM6_A_MARK, DU1_DG0_MARK, RX0_A_MARK,
+
+	/* IPSR12 */
+	HTX1_A_MARK, SDA4_A_MARK, DU1_DG1_MARK, TX0_A_MARK, HCTS1_N_A_MARK,
+	PWM2_A_MARK, DU1_DG2_MARK, REMOCON_B_MARK, SPEEDIN_B_MARK,
+	HRTS1_N_A_MARK, DU1_DG3_MARK, SSI_WS1_B_MARK, IRQ1_MARK, SD2_CLK_MARK,
+	HSCK1_MARK, DU1_DG4_MARK, SSI_SCK1_B_MARK, SD2_CMD_MARK,
+	SCIF1_SCK_A_MARK, TCLK2_A_MARK, DU1_DG5_MARK, SSI_SCK2_B_MARK,
+	PWM3_A_MARK, SD2_DATA0_MARK, RX1_A_MARK, SCL1_E_MARK, DU1_DG6_MARK,
+	SSI_SDATA1_B_MARK, SD2_DATA1_MARK, TX1_A_MARK, SDA1_E_MARK,
+	DU1_DG7_MARK, SSI_WS2_B_MARK, SD2_DATA2_MARK, RX2_A_MARK, DU1_DB0_MARK,
+	SSI_SDATA2_B_MARK,
+
+	/* IPSR13 */
+	SD2_DATA3_MARK, TX2_A_MARK, DU1_DB1_MARK, SSI_WS9_B_MARK, SD2_CD_MARK,
+	SCIF2_SCK_A_MARK, DU1_DB2_MARK, SSI_SCK9_B_MARK, SD2_WP_MARK,
+	SCIF3_SCK_A_MARK, DU1_DB3_MARK, SSI_SDATA9_B_MARK, RX3_A_MARK,
+	SCL1_C_MARK, MSIOF1_RXD_B_MARK, DU1_DB4_MARK, AUDIO_CLKA_C_MARK,
+	SSI_SDATA4_B_MARK, TX3_A_MARK, SDA1_C_MARK, MSIOF1_TXD_B_MARK,
+	DU1_DB5_MARK, AUDIO_CLKB_C_MARK, SSI_WS4_B_MARK, SCL2_A_MARK,
+	MSIOF1_SCK_B_MARK, DU1_DB6_MARK, AUDIO_CLKC_C_MARK,
+	SSI_SCK4_B_MARK, SDA2_A_MARK, MSIOF1_SYNC_B_MARK, DU1_DB7_MARK,
+	AUDIO_CLKOUT_C_MARK, SSI_SCK5_A_MARK, DU1_DOTCLKOUT1_MARK,
+
+	/* IPSR14 */
+	SSI_WS5_A_MARK, SCL3_C_MARK, DU1_DOTCLKIN_MARK, SSI_SDATA5_A_MARK,
+	SDA3_C_MARK, DU1_DOTCLKOUT0_MARK, SSI_SCK6_A_MARK,
+	DU1_EXODDF_DU1_ODDF_DISP_CDE_MARK, SSI_WS6_A_MARK, SCL4_C_MARK,
+	DU1_EXHSYNC_DU1_HSYNC_MARK, SSI_SDATA6_A_MARK, SDA4_C_MARK,
+	DU1_EXVSYNC_DU1_VSYNC_MARK, SSI_SCK78_A_MARK, SDA4_E_MARK,
+	DU1_DISP_MARK, SSI_WS78_A_MARK, SCL4_E_MARK, DU1_CDE_MARK,
+	SSI_SDATA7_A_MARK, IRQ8_MARK, AUDIO_CLKA_D_MARK, CAN_CLK_D_MARK,
+	VI0_G5_MARK,
+
+	/* IPSR15 */
+	SSI_SCK0129_A_MARK, MSIOF1_RXD_A_MARK, RX5_D_MARK, VI0_G6_MARK,
+	SSI_WS0129_A_MARK, MSIOF1_TXD_A_MARK, TX5_D_MARK, VI0_G7_MARK,
+	SSI_SDATA0_A_MARK, MSIOF1_SYNC_A_MARK, PWM0_C_MARK, VI0_R0_MARK,
+	SSI_SCK34_MARK, MSIOF1_SCK_A_MARK, AVB_MDC_MARK, DACK1_MARK,
+	VI0_R1_MARK, SSI_WS34_MARK, MSIOF1_SS1_A_MARK, AVB_MDIO_MARK,
+	CAN1_RX_A_MARK, DREQ1_N_MARK, VI0_R2_MARK, SSI_SDATA3_MARK,
+	MSIOF1_SS2_A_MARK, AVB_LINK_MARK, CAN1_TX_A_MARK, DREQ2_N_MARK,
+	VI0_R3_MARK, SSI_SCK4_A_MARK, AVB_MAGIC_MARK, VI0_R4_MARK,
+	SSI_WS4_A_MARK, AVB_PHY_INT_MARK, VI0_R5_MARK,
+
+	/* IPSR16 */
+	SSI_SDATA4_A_MARK, AVB_CRS_MARK, VI0_R6_MARK, SSI_SCK1_A_MARK,
+	SCIF1_SCK_B_MARK, PWM1_D_MARK, IRQ9_MARK, REMOCON_A_MARK, DACK2_MARK,
+	VI0_CLK_MARK, AVB_COL_MARK, SSI_SDATA8_A_MARK, RX1_B_MARK,
+	CAN0_RX_D_MARK, AVB_AVTP_CAPTURE_B_MARK, VI0_R7_MARK, SSI_WS1_A_MARK,
+	TX1_B_MARK, CAN0_TX_D_MARK, AVB_AVTP_MATCH_B_MARK,
+	VI0_DATA0_VI0_B0_MARK, SSI_SDATA1_A_MARK, HRX1_B_MARK,
+	VI0_DATA1_VI0_B1_MARK, SSI_SCK2_A_MARK, HTX1_B_MARK, AVB_TXD7_MARK,
+	VI0_DATA2_VI0_B2_MARK, SSI_WS2_A_MARK, HCTS1_N_B_MARK,
+	AVB_TX_ER_MARK, VI0_DATA3_VI0_B3_MARK, SSI_SDATA2_A_MARK,
+	HRTS1_N_B_MARK, VI0_DATA4_VI0_B4_MARK,
+
+	/* IPSR17 */
+	SSI_SCK9_A_MARK, RX2_B_MARK, SCL3_E_MARK, EX_WAIT1_MARK,
+	VI0_DATA5_VI0_B5_MARK, SSI_WS9_A_MARK, TX2_B_MARK, SDA3_E_MARK,
+	VI0_DATA6_VI0_B6_MARK, SSI_SDATA9_A_MARK, SCIF2_SCK_B_MARK, PWM2_D_MARK,
+	VI0_DATA7_VI0_B7_MARK, AUDIO_CLKA_A_MARK, SCL0_B_MARK, TS_SDAT0_C_MARK,
+	TANS1_MARK, VI0_CLKENB_MARK, AUDIO_CLKB_A_MARK, SDA0_B_MARK,
+	TS_SCK0_C_MARK, TANS2_MARK, VI0_FIELD_MARK, AUDIO_CLKC_A_MARK,
+	SCL4_B_MARK, TS_SDEN0_C_MARK, VI0_HSYNC_N_MARK, AUDIO_CLKOUT_A_MARK,
+	SDA4_B_MARK, TS_SPSYNC0_C_MARK, VI0_VSYNC_N_MARK,
+	PINMUX_MARK_END,
+};
+
+static pinmux_enum_t pinmux_data[] = {
+	PINMUX_DATA_GP_ALL(), /* PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */
+
+	PINMUX_DATA(USB0_PWEN_MARK, FN_USB0_PWEN),
+	PINMUX_DATA(USB0_OVC_MARK, FN_USB0_OVC),
+	PINMUX_DATA(USB1_PWEN_MARK, FN_USB1_PWEN),
+	PINMUX_DATA(USB1_OVC_MARK, FN_USB1_OVC),
+	PINMUX_DATA(CLKOUT_MARK, FN_CLKOUT),
+	PINMUX_DATA(MMC0_CLK_SDHI1_CLK_MARK, FN_MMC0_CLK_SDHI1_CLK),
+	PINMUX_DATA(MMC0_CMD_SDHI1_CMD_MARK, FN_MMC0_CMD_SDHI1_CMD),
+	PINMUX_DATA(MMC0_D0_SDHI1_D0_MARK, FN_MMC0_D0_SDHI1_D0),
+	PINMUX_DATA(MMC0_D1_SDHI1_D1_MARK, FN_MMC0_D1_SDHI1_D1),
+	PINMUX_DATA(MMC0_D2_SDHI1_D2_MARK, FN_MMC0_D2_SDHI1_D2),
+	PINMUX_DATA(MMC0_D3_SDHI1_D3_MARK, FN_MMC0_D3_SDHI1_D3),
+	PINMUX_DATA(MMC0_D6_MARK, FN_MMC0_D6),
+	PINMUX_DATA(MMC0_D7_MARK, FN_MMC0_D7),
+
+	/* IPSR0 */
+	PINMUX_IPSR_DATA(IP0_3_0, SD0_CLK),
+	PINMUX_IPSR_MODSEL_DATA(IP0_3_0, SSI_SCK1_C, SEL_SSI1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP0_3_0, RX3_C, SEL_SCIF3_2),
+	PINMUX_IPSR_DATA(IP0_7_4, SD0_CMD),
+	PINMUX_IPSR_MODSEL_DATA(IP0_7_4, SSI_WS1_C, SEL_SSI1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP0_7_4, TX3_C, SEL_SCIF3_2),
+	PINMUX_IPSR_DATA(IP0_11_8, SD0_DATA0),
+	PINMUX_IPSR_MODSEL_DATA(IP0_11_8, SSI_SDATA1_C, SEL_SSI1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP0_11_8, RX4_E, SEL_SCIF4_4),
+	PINMUX_IPSR_DATA(IP0_15_12, SD0_DATA1),
+	PINMUX_IPSR_MODSEL_DATA(IP0_15_12, SSI_SCK0129_B, SEL_SSI0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP0_15_12, TX4_E, SEL_SCIF4_4),
+	PINMUX_IPSR_DATA(IP0_19_16, SD0_DATA2),
+	PINMUX_IPSR_MODSEL_DATA(IP0_19_16, SSI_WS0129_B, SEL_SSI0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP0_19_16, RX5_E, SEL_SCIF5_4),
+	PINMUX_IPSR_DATA(IP0_23_20, SD0_DATA3),
+	PINMUX_IPSR_MODSEL_DATA(IP0_23_20, SSI_SDATA0_B, SEL_SSI0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP0_23_20, TX5_E, SEL_SCIF5_4),
+	PINMUX_IPSR_DATA(IP0_27_24, SD0_CD),
+	PINMUX_IPSR_MODSEL_DATA(IP0_27_24, CAN0_RX_A, SEL_CAN0_0),
+	PINMUX_IPSR_DATA(IP0_31_28, SD0_WP),
+	PINMUX_IPSR_DATA(IP0_31_28, IRQ7),
+	PINMUX_IPSR_MODSEL_DATA(IP0_31_28, CAN0_TX_A, SEL_CAN0_0),
+
+	/* IPSR1 */
+	PINMUX_IPSR_DATA(IP1_3_0, MMC0_D4),
+	PINMUX_IPSR_DATA(IP1_3_0, SD1_CD),
+	PINMUX_IPSR_DATA(IP1_7_4, MMC0_D5),
+	PINMUX_IPSR_DATA(IP1_7_4, SD1_WP),
+	PINMUX_IPSR_DATA(IP1_11_8, D0),
+	PINMUX_IPSR_MODSEL_DATA(IP1_11_8, RIF0_D0_A, SEL_DR0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP1_11_8, SCL3_B, SEL_I2C03_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_11_8, RX5_B, SEL_SCIF5_1),
+	PINMUX_IPSR_DATA(IP1_11_8, IRQ4),
+	PINMUX_IPSR_MODSEL_DATA(IP1_11_8, MSIOF2_RXD_C, SEL_MSIOF2_2),
+	PINMUX_IPSR_MODSEL_DATA(IP1_11_8, SSI_SDATA5_B, SEL_SSI5_1),
+	PINMUX_IPSR_DATA(IP1_15_12, D1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_15_12, RIF0_D1_A, SEL_DR0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP1_15_12, SDA3_B, SEL_I2C03_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_15_12, TX5_B, SEL_SCIF5_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_15_12, MSIOF2_TXD_C, SEL_MSIOF2_2),
+	PINMUX_IPSR_MODSEL_DATA(IP1_15_12, SSI_WS5_B, SEL_SSI5_1),
+	PINMUX_IPSR_DATA(IP1_19_16, D2),
+	PINMUX_IPSR_MODSEL_DATA(IP1_19_16, RIF0_CLK_A, SEL_DR0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP1_19_16, RX4_B, SEL_SCIF4_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_19_16, SCL0_D, SEL_I2C00_3),
+	PINMUX_IPSR_DATA(IP1_19_16, PWM1_C),
+	PINMUX_IPSR_MODSEL_DATA(IP1_19_16, MSIOF2_SCK_C, SEL_MSIOF2_2),
+	PINMUX_IPSR_MODSEL_DATA(IP1_19_16, SSI_SCK5_B, SEL_SSI5_1),
+	PINMUX_IPSR_DATA(IP1_23_20, D3),
+	PINMUX_IPSR_MODSEL_DATA(IP1_23_20, RIF0_SYNC_A, SEL_DR0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP1_23_20, TX4_B, SEL_SCIF4_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_23_20, SDA0_D, SEL_I2C00_3),
+	PINMUX_IPSR_DATA(IP1_23_20, PWM0_A),
+	PINMUX_IPSR_MODSEL_DATA(IP1_23_20, MSIOF2_SYNC_C, SEL_MSIOF2_2),
+	PINMUX_IPSR_DATA(IP1_27_24, D4),
+	PINMUX_IPSR_DATA(IP1_27_24, IRQ3),
+	PINMUX_IPSR_MODSEL_DATA(IP1_27_24, TCLK1_A, SEL_TMU1_0),
+	PINMUX_IPSR_DATA(IP1_27_24, PWM6_C),
+	PINMUX_IPSR_MODSEL_DATA(IP1_27_24, TS_SDAT0_B, SEL_TSIF_1),
+	PINMUX_IPSR_DATA(IP1_31_28, D5),
+	PINMUX_IPSR_DATA(IP1_31_28, HRX2),
+	PINMUX_IPSR_MODSEL_DATA(IP1_31_28, SCL1_B, SEL_I2C01_1),
+	PINMUX_IPSR_DATA(IP1_31_28, PWM2_C),
+	PINMUX_IPSR_MODSEL_DATA(IP1_31_28, TCLK2_B, SEL_TMU2_1),
+	PINMUX_IPSR_MODSEL_DATA(IP1_31_28, TS_SCK0_B, SEL_TSIF_1),
+
+	/* IPSR2 */
+	PINMUX_IPSR_DATA(IP2_3_0, D6),
+	PINMUX_IPSR_DATA(IP2_3_0, HTX2),
+	PINMUX_IPSR_MODSEL_DATA(IP2_3_0, SDA1_B, SEL_I2C00_1),
+	PINMUX_IPSR_DATA(IP2_3_0, PWM4_C),
+	PINMUX_IPSR_MODSEL_DATA(IP2_3_0, TS_SDEN0_B, SEL_TSIF_1),
+	PINMUX_IPSR_DATA(IP2_7_4, D7),
+	PINMUX_IPSR_DATA(IP2_7_4, HSCK2),
+	PINMUX_IPSR_DATA(IP2_7_4, SCIF1_SCK_C),
+	PINMUX_IPSR_DATA(IP2_7_4, IRQ6),
+	PINMUX_IPSR_DATA(IP2_7_4, PWM5_C),
+	PINMUX_IPSR_MODSEL_DATA(IP2_7_4, TS_SPSYNC0_B, SEL_TSIF_1),
+	PINMUX_IPSR_DATA(IP2_11_8, D8),
+	PINMUX_IPSR_DATA(IP2_11_8, HCTS2_N),
+	PINMUX_IPSR_MODSEL_DATA(IP2_11_8, RX1_C, SEL_SCIF1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP2_11_8, SCL1_D, SEL_I2C01_3),
+	PINMUX_IPSR_DATA(IP2_11_8, PWM3_C),
+	PINMUX_IPSR_DATA(IP2_11_8, ADIDATA),
+	PINMUX_IPSR_DATA(IP2_15_12, D9),
+	PINMUX_IPSR_DATA(IP2_15_12, HRTS2_N),
+	PINMUX_IPSR_MODSEL_DATA(IP2_15_12, TX1_C, SEL_SCIF1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP2_15_12, SDA1_D, SEL_I2C01_3),
+	PINMUX_IPSR_DATA(IP2_15_12, ADICS_SAMP),
+	PINMUX_IPSR_DATA(IP2_19_16, D10),
+	PINMUX_IPSR_MODSEL_DATA(IP2_19_16, MSIOF2_RXD_A, SEL_MSIOF2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP2_19_16, HRX0_B, SEL_HSCIF0_1),
+	PINMUX_IPSR_DATA(IP2_19_16, ADICLK),
+	PINMUX_IPSR_DATA(IP2_23_20, D11),
+	PINMUX_IPSR_MODSEL_DATA(IP2_23_20, MSIOF2_TXD_A, SEL_MSIOF2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP2_23_20, HTX0_B, SEL_HSCIF0_1),
+	PINMUX_IPSR_DATA(IP2_23_20, ADICHS0),
+	PINMUX_IPSR_DATA(IP2_27_24, D12),
+	PINMUX_IPSR_MODSEL_DATA(IP2_27_24, MSIOF2_SCK_A, SEL_MSIOF2_0),
+	PINMUX_IPSR_DATA(IP2_27_24, HSCK0),
+	PINMUX_IPSR_MODSEL_DATA(IP2_27_24, SPEEDIN_A, SEL_RSP_0),
+	PINMUX_IPSR_MODSEL_DATA(IP2_27_24, CAN_CLK_C, SEL_CANCLK_2),
+	PINMUX_IPSR_DATA(IP2_27_24, ADICHS1),
+	PINMUX_IPSR_DATA(IP2_31_28, D13),
+	PINMUX_IPSR_MODSEL_DATA(IP2_31_28, MSIOF2_SYNC_A, SEL_MSIOF2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP2_31_28, RX4_C, SEL_SCIF4_2),
+	PINMUX_IPSR_DATA(IP2_31_28, ADICHS2),
+
+	/* IPSR3 */
+	PINMUX_IPSR_DATA(IP3_3_0, D14),
+	PINMUX_IPSR_DATA(IP3_3_0, MSIOF2_SS1_A),
+	PINMUX_IPSR_MODSEL_DATA(IP3_3_0, TX4_C, SEL_SCIF4_2),
+	PINMUX_IPSR_MODSEL_DATA(IP3_3_0, CAN1_RX_B, SEL_CAN1_1),
+	PINMUX_IPSR_MODSEL_DATA(IP3_3_0, SPEEDIN_C, SEL_RSP_2),
+	PINMUX_IPSR_MODSEL_DATA(IP3_3_0, AVB_AVTP_CAPTURE_A, SEL_AVB_0),
+	PINMUX_IPSR_DATA(IP3_7_4, D15),
+	PINMUX_IPSR_DATA(IP3_7_4, MSIOF2_SS2_A),
+	PINMUX_IPSR_MODSEL_DATA(IP3_7_4, CAN1_TX_B, SEL_CAN1_1),
+	PINMUX_IPSR_DATA(IP3_7_4, IRQ2),
+	PINMUX_IPSR_MODSEL_DATA(IP3_7_4, AVB_AVTP_MATCH_A, SEL_AVB_0),
+	PINMUX_IPSR_DATA(IP3_11_8, QSPI0_SPCLK),
+	PINMUX_IPSR_DATA(IP3_11_8, WE0_N),
+	PINMUX_IPSR_DATA(IP3_15_12, QSPI0_MOSI_IO0),
+	PINMUX_IPSR_DATA(IP3_15_12, BS_N),
+	PINMUX_IPSR_DATA(IP3_19_16, QSPI0_MISO_IO1),
+	PINMUX_IPSR_DATA(IP3_19_16, RD_WR_N),
+	PINMUX_IPSR_DATA(IP3_23_20, QSPI0_IO2),
+	PINMUX_IPSR_DATA(IP3_23_20, CS0_N),
+	PINMUX_IPSR_DATA(IP3_27_24, QSPI0_IO3),
+	PINMUX_IPSR_DATA(IP3_27_24, RD_N),
+	PINMUX_IPSR_DATA(IP3_31_28, QSPI0_SSL),
+	PINMUX_IPSR_DATA(IP3_31_28, WE1_N),
+
+	/* IPSR4 */
+	PINMUX_IPSR_DATA(IP4_3_0, EX_WAIT0),
+	PINMUX_IPSR_MODSEL_DATA(IP4_3_0, CAN_CLK_B, SEL_CANCLK_1),
+	PINMUX_IPSR_MODSEL_DATA(IP4_3_0, SCIF_CLK_A, SEL_SCIFCLK_0),
+	PINMUX_IPSR_DATA(IP4_3_0, PWMFSW0),
+	PINMUX_IPSR_DATA(IP4_7_4, DU0_DR0),
+	PINMUX_IPSR_DATA(IP4_7_4, LCDOUT16),
+	PINMUX_IPSR_MODSEL_DATA(IP4_7_4, RX5_C, SEL_SCIF5_2),
+	PINMUX_IPSR_MODSEL_DATA(IP4_7_4, SCL2_D, SEL_I2C02_3),
+	PINMUX_IPSR_DATA(IP4_7_4, A0),
+	PINMUX_IPSR_DATA(IP4_11_8, DU0_DR1),
+	PINMUX_IPSR_DATA(IP4_11_8, LCDOUT17),
+	PINMUX_IPSR_MODSEL_DATA(IP4_11_8, TX5_C, SEL_SCIF5_2),
+	PINMUX_IPSR_MODSEL_DATA(IP4_11_8, SDA2_D, SEL_I2C02_3),
+	PINMUX_IPSR_DATA(IP4_11_8, A1),
+	PINMUX_IPSR_DATA(IP4_15_12, DU0_DR2),
+	PINMUX_IPSR_DATA(IP4_15_12, LCDOUT18),
+	PINMUX_IPSR_MODSEL_DATA(IP4_15_12, RX0_D, SEL_SCIF0_3),
+	PINMUX_IPSR_MODSEL_DATA(IP4_15_12, SCL0_E, SEL_I2C00_4),
+	PINMUX_IPSR_DATA(IP4_15_12, A2),
+	PINMUX_IPSR_DATA(IP4_19_16, DU0_DR3),
+	PINMUX_IPSR_DATA(IP4_19_16, LCDOUT19),
+	PINMUX_IPSR_MODSEL_DATA(IP4_19_16, TX0_D, SEL_SCIF0_3),
+	PINMUX_IPSR_MODSEL_DATA(IP4_19_16, SDA0_E, SEL_I2C00_4),
+	PINMUX_IPSR_DATA(IP4_19_16, PWM0_B),
+	PINMUX_IPSR_DATA(IP4_19_16, A3),
+	PINMUX_IPSR_DATA(IP4_23_20, DU0_DR4),
+	PINMUX_IPSR_DATA(IP4_23_20, LCDOUT20),
+	PINMUX_IPSR_MODSEL_DATA(IP4_23_20, RX1_D, SEL_SCIF1_3),
+	PINMUX_IPSR_DATA(IP4_23_20, A4),
+	PINMUX_IPSR_DATA(IP4_27_24, DU0_DR5),
+	PINMUX_IPSR_DATA(IP4_27_24, LCDOUT21),
+	PINMUX_IPSR_MODSEL_DATA(IP4_27_24, TX1_D, SEL_SCIF1_3),
+	PINMUX_IPSR_DATA(IP4_27_24, PWM1_B),
+	PINMUX_IPSR_DATA(IP4_27_24, A5),
+	PINMUX_IPSR_DATA(IP4_31_28, DU0_DR6),
+	PINMUX_IPSR_DATA(IP4_31_28, LCDOUT22),
+	PINMUX_IPSR_MODSEL_DATA(IP4_31_28, RX2_C, SEL_SCIF2_2),
+	PINMUX_IPSR_DATA(IP4_31_28, A6),
+
+	/* IPSR5 */
+	PINMUX_IPSR_DATA(IP5_3_0, DU0_DR7),
+	PINMUX_IPSR_DATA(IP5_3_0, LCDOUT23),
+	PINMUX_IPSR_MODSEL_DATA(IP5_3_0, TX2_C, SEL_SCIF2_2),
+	PINMUX_IPSR_DATA(IP5_3_0, PWM2_B),
+	PINMUX_IPSR_DATA(IP5_3_0, A7),
+	PINMUX_IPSR_DATA(IP5_7_4, DU0_DG0),
+	PINMUX_IPSR_DATA(IP5_7_4, LCDOUT8),
+	PINMUX_IPSR_MODSEL_DATA(IP5_7_4, RX3_B, SEL_SCIF3_1),
+	PINMUX_IPSR_MODSEL_DATA(IP5_7_4, SCL3_D, SEL_I2C03_3),
+	PINMUX_IPSR_DATA(IP5_7_4, A8),
+	PINMUX_IPSR_DATA(IP5_11_8, DU0_DG1),
+	PINMUX_IPSR_DATA(IP5_11_8, LCDOUT9),
+	PINMUX_IPSR_MODSEL_DATA(IP5_11_8, TX3_B, SEL_SCIF3_1),
+	PINMUX_IPSR_MODSEL_DATA(IP5_11_8, SDA3_D, SEL_I2C03_3),
+	PINMUX_IPSR_DATA(IP5_11_8, PWM3_B),
+	PINMUX_IPSR_DATA(IP5_11_8, A9),
+	PINMUX_IPSR_DATA(IP5_15_12, DU0_DG2),
+	PINMUX_IPSR_DATA(IP5_15_12, LCDOUT10),
+	PINMUX_IPSR_MODSEL_DATA(IP5_15_12, RX4_D, SEL_SCIF4_3),
+	PINMUX_IPSR_DATA(IP5_15_12, A10),
+	PINMUX_IPSR_DATA(IP5_19_16, DU0_DG3),
+	PINMUX_IPSR_DATA(IP5_19_16, LCDOUT11),
+	PINMUX_IPSR_MODSEL_DATA(IP5_19_16, TX4_D, SEL_SCIF4_3),
+	PINMUX_IPSR_DATA(IP5_19_16, PWM4_B),
+	PINMUX_IPSR_DATA(IP5_19_16, A11),
+	PINMUX_IPSR_DATA(IP5_23_20, DU0_DG4),
+	PINMUX_IPSR_DATA(IP5_23_20, LCDOUT12),
+	PINMUX_IPSR_MODSEL_DATA(IP5_23_20, HRX0_A, SEL_HSCIF0_0),
+	PINMUX_IPSR_DATA(IP5_23_20, A12),
+	PINMUX_IPSR_DATA(IP5_27_24, DU0_DG5),
+	PINMUX_IPSR_DATA(IP5_27_24, LCDOUT13),
+	PINMUX_IPSR_MODSEL_DATA(IP5_27_24, HTX0_A, SEL_HSCIF0_0),
+	PINMUX_IPSR_DATA(IP5_27_24, PWM5_B),
+	PINMUX_IPSR_DATA(IP5_27_24, A13),
+	PINMUX_IPSR_DATA(IP5_31_28, DU0_DG6),
+	PINMUX_IPSR_DATA(IP5_31_28, LCDOUT14),
+	PINMUX_IPSR_MODSEL_DATA(IP5_31_28, HRX1_C, SEL_HSCIF1_2),
+	PINMUX_IPSR_DATA(IP5_31_28, A14),
+
+	/* IPSR6 */
+	PINMUX_IPSR_DATA(IP6_3_0, DU0_DG7),
+	PINMUX_IPSR_DATA(IP6_3_0, LCDOUT15),
+	PINMUX_IPSR_MODSEL_DATA(IP6_3_0, HTX1_C, SEL_HSCIF1_2),
+	PINMUX_IPSR_DATA(IP6_3_0, PWM6_B),
+	PINMUX_IPSR_DATA(IP6_3_0, A15),
+	PINMUX_IPSR_DATA(IP6_7_4, DU0_DB0),
+	PINMUX_IPSR_DATA(IP6_7_4, LCDOUT0),
+	PINMUX_IPSR_MODSEL_DATA(IP6_7_4, SCL4_D, SEL_I2C04_3),
+	PINMUX_IPSR_MODSEL_DATA(IP6_7_4, CAN0_RX_C, SEL_CAN0_2),
+	PINMUX_IPSR_DATA(IP6_7_4, A16),
+	PINMUX_IPSR_DATA(IP6_11_8, DU0_DB1),
+	PINMUX_IPSR_DATA(IP6_11_8, LCDOUT1),
+	PINMUX_IPSR_MODSEL_DATA(IP6_11_8, SDA4_D, SEL_I2C04_3),
+	PINMUX_IPSR_MODSEL_DATA(IP6_11_8, CAN0_TX_C, SEL_CAN0_2),
+	PINMUX_IPSR_DATA(IP6_11_8, A17),
+	PINMUX_IPSR_DATA(IP6_15_12, DU0_DB2),
+	PINMUX_IPSR_DATA(IP6_15_12, LCDOUT2),
+	PINMUX_IPSR_DATA(IP6_15_12, HCTS0_N),
+	PINMUX_IPSR_DATA(IP6_15_12, A18),
+	PINMUX_IPSR_DATA(IP6_19_16, DU0_DB3),
+	PINMUX_IPSR_DATA(IP6_19_16, LCDOUT3),
+	PINMUX_IPSR_DATA(IP6_19_16, HRTS0_N),
+	PINMUX_IPSR_DATA(IP6_19_16, A19),
+	PINMUX_IPSR_DATA(IP6_23_20, DU0_DB4),
+	PINMUX_IPSR_DATA(IP6_23_20, LCDOUT4),
+	PINMUX_IPSR_MODSEL_DATA(IP6_23_20, HCTS1_N_C, SEL_HSCIF1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP6_23_20, RIF0_CLK_B, SEL_DR0_1),
+	PINMUX_IPSR_DATA(IP6_23_20, A20),
+	PINMUX_IPSR_DATA(IP6_27_24, DU0_DB5),
+	PINMUX_IPSR_DATA(IP6_27_24, LCDOUT5),
+	PINMUX_IPSR_MODSEL_DATA(IP6_27_24, HRTS1_N_C, SEL_HSCIF1_2),
+	PINMUX_IPSR_MODSEL_DATA(IP6_27_24, RIF0_SYNC_B, SEL_DR0_1),
+	PINMUX_IPSR_DATA(IP6_27_24, A21),
+	PINMUX_IPSR_DATA(IP6_31_28, DU0_DB6),
+	PINMUX_IPSR_DATA(IP6_31_28, LCDOUT6),
+	PINMUX_IPSR_MODSEL_DATA(IP6_31_28, RIF0_D0_B, SEL_DR0_1),
+	PINMUX_IPSR_DATA(IP6_31_28, A22),
+
+	/* IPSR7 */
+	PINMUX_IPSR_DATA(IP7_3_0, DU0_DB7),
+	PINMUX_IPSR_DATA(IP7_3_0, LCDOUT7),
+	PINMUX_IPSR_MODSEL_DATA(IP7_3_0, RIF0_D1_B, SEL_DR0_1),
+	PINMUX_IPSR_DATA(IP7_3_0, A23),
+	PINMUX_IPSR_DATA(IP7_7_4, DU0_DOTCLKIN),
+	PINMUX_IPSR_DATA(IP7_7_4, QSTVA_QVS),
+	PINMUX_IPSR_DATA(IP7_7_4, A24),
+	PINMUX_IPSR_DATA(IP7_11_8, DU0_DOTCLKOUT0),
+	PINMUX_IPSR_DATA(IP7_11_8, QCLK),
+	PINMUX_IPSR_DATA(IP7_11_8, A25),
+	PINMUX_IPSR_DATA(IP7_15_12, DU0_DOTCLKOUT1),
+	PINMUX_IPSR_DATA(IP7_15_12, QSTVB_QVE),
+	PINMUX_IPSR_MODSEL_DATA(IP7_15_12, MSIOF2_RXD_B, SEL_MSIOF2_1),
+	PINMUX_IPSR_DATA(IP7_15_12, CS1_N_A26),
+	PINMUX_IPSR_DATA(IP7_19_16, DU0_EXHSYNC_DU0_HSYNC),
+	PINMUX_IPSR_DATA(IP7_19_16, QSTH_QHS),
+	PINMUX_IPSR_MODSEL_DATA(IP7_19_16, MSIOF2_TXD_B, SEL_MSIOF2_1),
+	PINMUX_IPSR_DATA(IP7_19_16, DREQ0_N),
+	PINMUX_IPSR_DATA(IP7_23_20, DU0_EXVSYNC_DU0_VSYNC),
+	PINMUX_IPSR_DATA(IP7_23_20, QSTB_QHE),
+	PINMUX_IPSR_MODSEL_DATA(IP7_23_20, MSIOF2_SYNC_B, SEL_MSIOF2_1),
+	PINMUX_IPSR_DATA(IP7_23_20, DACK0),
+	PINMUX_IPSR_DATA(IP7_27_24, DU0_EXODDF_DU0_ODDF_DISP_CDE),
+	PINMUX_IPSR_DATA(IP7_27_24, QCPV_QDE),
+	PINMUX_IPSR_MODSEL_DATA(IP7_27_24, MSIOF2_SCK_B, SEL_MSIOF2_1),
+	PINMUX_IPSR_DATA(IP7_27_24, DRACK0),
+	PINMUX_IPSR_DATA(IP7_31_28, DU0_DISP),
+	PINMUX_IPSR_DATA(IP7_31_28, QPOLA),
+	PINMUX_IPSR_MODSEL_DATA(IP7_31_28, CAN1_RX_C, SEL_CAN1_2),
+
+	/* IPSR8 */
+	PINMUX_IPSR_DATA(IP8_3_0, DU0_CDE),
+	PINMUX_IPSR_DATA(IP8_3_0, QPOLB),
+	PINMUX_IPSR_MODSEL_DATA(IP8_3_0, CAN1_TX_C, SEL_CAN1_2),
+	PINMUX_IPSR_DATA(IP8_7_4, VI1_CLK),
+	PINMUX_IPSR_DATA(IP8_7_4, AVB_RX_CLK),
+	PINMUX_IPSR_DATA(IP8_7_4, ETH_REF_CLK),
+	PINMUX_IPSR_DATA(IP8_11_8, VI1_DATA0),
+	PINMUX_IPSR_DATA(IP8_11_8, AVB_RX_DV),
+	PINMUX_IPSR_DATA(IP8_11_8, ETH_CRS_DV),
+	PINMUX_IPSR_DATA(IP8_15_12, VI1_DATA1),
+	PINMUX_IPSR_DATA(IP8_15_12, AVB_RXD0),
+	PINMUX_IPSR_DATA(IP8_15_12, ETH_RXD0),
+	PINMUX_IPSR_DATA(IP8_19_16, VI1_DATA2),
+	PINMUX_IPSR_DATA(IP8_19_16, AVB_RXD1),
+	PINMUX_IPSR_DATA(IP8_19_16, ETH_RXD1),
+	PINMUX_IPSR_DATA(IP8_23_20, VI1_DATA3),
+	PINMUX_IPSR_DATA(IP8_23_20, AVB_RXD2),
+	PINMUX_IPSR_DATA(IP8_23_20, ETH_MDIO),
+	PINMUX_IPSR_DATA(IP8_27_24, VI1_DATA4),
+	PINMUX_IPSR_DATA(IP8_27_24, AVB_RXD3),
+	PINMUX_IPSR_DATA(IP8_27_24, ETH_RX_ER),
+	PINMUX_IPSR_DATA(IP8_31_28, VI1_DATA5),
+	PINMUX_IPSR_DATA(IP8_31_28, AVB_RXD4),
+	PINMUX_IPSR_DATA(IP8_31_28, ETH_LINK),
+
+	/* IPSR9 */
+	PINMUX_IPSR_DATA(IP9_3_0, VI1_DATA6),
+	PINMUX_IPSR_DATA(IP9_3_0, AVB_RXD5),
+	PINMUX_IPSR_DATA(IP9_3_0, ETH_TXD1),
+	PINMUX_IPSR_DATA(IP9_7_4, VI1_DATA7),
+	PINMUX_IPSR_DATA(IP9_7_4, AVB_RXD6),
+	PINMUX_IPSR_DATA(IP9_7_4, ETH_TX_EN),
+	PINMUX_IPSR_DATA(IP9_11_8, VI1_CLKENB),
+	PINMUX_IPSR_MODSEL_DATA(IP9_11_8, SCL3_A, SEL_I2C03_0),
+	PINMUX_IPSR_DATA(IP9_11_8, AVB_RXD7),
+	PINMUX_IPSR_DATA(IP9_11_8, ETH_MAGIC),
+	PINMUX_IPSR_DATA(IP9_15_12, VI1_FIELD),
+	PINMUX_IPSR_MODSEL_DATA(IP9_15_12, SDA3_A, SEL_I2C03_0),
+	PINMUX_IPSR_DATA(IP9_15_12, AVB_RX_ER),
+	PINMUX_IPSR_DATA(IP9_15_12, ETH_TXD0),
+	PINMUX_IPSR_DATA(IP9_19_16, VI1_HSYNC_N),
+	PINMUX_IPSR_MODSEL_DATA(IP9_19_16, RX0_B, SEL_SCIF0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP9_19_16, SCL0_C, SEL_I2C00_2),
+	PINMUX_IPSR_DATA(IP9_19_16, AVB_GTXREFCLK),
+	PINMUX_IPSR_DATA(IP9_19_16, ETH_MDC),
+	PINMUX_IPSR_DATA(IP9_23_20, VI1_VSYNC_N),
+	PINMUX_IPSR_MODSEL_DATA(IP9_23_20, TX0_B, SEL_SCIF0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP9_23_20, SDA0_C, SEL_I2C00_2),
+	PINMUX_IPSR_DATA(IP9_23_20, AUDIO_CLKOUT_B),
+	PINMUX_IPSR_DATA(IP9_23_20, AVB_TX_CLK),
+	PINMUX_IPSR_DATA(IP9_27_24, VI1_DATA8),
+	PINMUX_IPSR_MODSEL_DATA(IP9_27_24, SCL2_B, SEL_I2C02_1),
+	PINMUX_IPSR_DATA(IP9_27_24, AVB_TX_EN),
+	PINMUX_IPSR_DATA(IP9_31_28, VI1_DATA9),
+	PINMUX_IPSR_MODSEL_DATA(IP9_31_28, SDA2_B, SEL_I2C02_1),
+	PINMUX_IPSR_DATA(IP9_31_28, AVB_TXD0),
+
+	/* IPSR10 */
+	PINMUX_IPSR_DATA(IP10_3_0, VI1_DATA10),
+	PINMUX_IPSR_MODSEL_DATA(IP10_3_0, CAN0_RX_B, SEL_CAN0_1),
+	PINMUX_IPSR_DATA(IP10_3_0, AVB_TXD1),
+	PINMUX_IPSR_DATA(IP10_7_4, VI1_DATA11),
+	PINMUX_IPSR_MODSEL_DATA(IP10_7_4, CAN0_TX_B, SEL_CAN0_1),
+	PINMUX_IPSR_DATA(IP10_7_4, AVB_TXD2),
+	PINMUX_IPSR_DATA(IP10_11_8, AVB_TXD3),
+	PINMUX_IPSR_MODSEL_DATA(IP10_11_8, AUDIO_CLKA_B, SEL_ADGA_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_11_8, SSI_SCK1_D, SEL_SSI1_3),
+	PINMUX_IPSR_MODSEL_DATA(IP10_11_8, RX5_F, SEL_SCIF5_5),
+	PINMUX_IPSR_MODSEL_DATA(IP10_11_8, MSIOF0_RXD_B, SEL_MSIOF0_1),
+	PINMUX_IPSR_DATA(IP10_15_12, AVB_TXD4),
+	PINMUX_IPSR_MODSEL_DATA(IP10_15_12, AUDIO_CLKB_B, SEL_ADGB_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_15_12, SSI_WS1_D, SEL_SSI1_3),
+	PINMUX_IPSR_MODSEL_DATA(IP10_15_12, TX5_F, SEL_SCIF5_5),
+	PINMUX_IPSR_MODSEL_DATA(IP10_15_12, MSIOF0_TXD_B, SEL_MSIOF0_1),
+	PINMUX_IPSR_DATA(IP10_19_16, AVB_TXD5),
+	PINMUX_IPSR_MODSEL_DATA(IP10_19_16, SCIF_CLK_B, SEL_SCIFCLK_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_19_16, AUDIO_CLKC_B, SEL_ADGC_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_19_16, SSI_SDATA1_D, SEL_SSI1_3),
+	PINMUX_IPSR_MODSEL_DATA(IP10_19_16, MSIOF0_SCK_B, SEL_MSIOF0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_23_20, SCL0_A, SEL_I2C00_0),
+	PINMUX_IPSR_MODSEL_DATA(IP10_23_20, RX0_C, SEL_SCIF0_2),
+	PINMUX_IPSR_DATA(IP10_23_20, PWM5_A),
+	PINMUX_IPSR_MODSEL_DATA(IP10_23_20, TCLK1_B, SEL_TMU1_1),
+	PINMUX_IPSR_DATA(IP10_23_20, AVB_TXD6),
+	PINMUX_IPSR_MODSEL_DATA(IP10_23_20, CAN1_RX_D, SEL_CAN1_3),
+	PINMUX_IPSR_MODSEL_DATA(IP10_23_20, MSIOF0_SYNC_B, SEL_MSIOF0_1),
+	PINMUX_IPSR_MODSEL_DATA(IP10_27_24, SDA0_A, SEL_I2C00_0),
+	PINMUX_IPSR_MODSEL_DATA(IP10_27_24, TX0_C, SEL_SCIF0_2),
+	PINMUX_IPSR_DATA(IP10_27_24, IRQ5),
+	PINMUX_IPSR_MODSEL_DATA(IP10_27_24, CAN_CLK_A, SEL_CANCLK_0),
+	PINMUX_IPSR_DATA(IP10_27_24, AVB_GTX_CLK),
+	PINMUX_IPSR_MODSEL_DATA(IP10_27_24, CAN1_TX_D, SEL_CAN1_3),
+	PINMUX_IPSR_DATA(IP10_27_24, DVC_MUTE),
+	PINMUX_IPSR_MODSEL_DATA(IP10_31_28, SCL1_A, SEL_I2C01_0),
+	PINMUX_IPSR_MODSEL_DATA(IP10_31_28, RX4_A, SEL_SCIF4_0),
+	PINMUX_IPSR_DATA(IP10_31_28, PWM5_D),
+	PINMUX_IPSR_DATA(IP10_31_28, DU1_DR0),
+	PINMUX_IPSR_MODSEL_DATA(IP10_31_28, SSI_SCK6_B, SEL_SSI6_1),
+	PINMUX_IPSR_DATA(IP10_31_28, VI0_G0),
+
+	/* IPSR11 */
+	PINMUX_IPSR_MODSEL_DATA(IP11_3_0, SDA1_A, SEL_I2C01_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_3_0, TX4_A, SEL_SCIF4_0),
+	PINMUX_IPSR_DATA(IP11_3_0, DU1_DR1),
+	PINMUX_IPSR_MODSEL_DATA(IP11_3_0, SSI_WS6_B, SEL_SSI6_1),
+	PINMUX_IPSR_DATA(IP11_3_0, VI0_G1),
+	PINMUX_IPSR_MODSEL_DATA(IP11_7_4, MSIOF0_RXD_A, SEL_MSIOF0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_7_4, RX5_A, SEL_SCIF5_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_7_4, SCL2_C, SEL_I2C02_2),
+	PINMUX_IPSR_DATA(IP11_7_4, DU1_DR2),
+	PINMUX_IPSR_DATA(IP11_7_4, QSPI1_MOSI_IO0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_7_4, SSI_SDATA6_B, SEL_SSI6_1),
+	PINMUX_IPSR_DATA(IP11_7_4, VI0_G2),
+	PINMUX_IPSR_MODSEL_DATA(IP11_11_8, MSIOF0_TXD_A, SEL_MSIOF0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_11_8, TX5_A, SEL_SCIF5_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_11_8, SDA2_C, SEL_I2C02_2),
+	PINMUX_IPSR_DATA(IP11_11_8, DU1_DR3),
+	PINMUX_IPSR_DATA(IP11_11_8, QSPI1_MISO_IO1),
+	PINMUX_IPSR_MODSEL_DATA(IP11_11_8, SSI_WS78_B, SEL_SSI7_1),
+	PINMUX_IPSR_DATA(IP11_11_8, VI0_G3),
+	PINMUX_IPSR_MODSEL_DATA(IP11_15_12, MSIOF0_SCK_A, SEL_MSIOF0_0),
+	PINMUX_IPSR_DATA(IP11_15_12, IRQ0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_15_12, TS_SCK0_A, SEL_TSIF_0),
+	PINMUX_IPSR_DATA(IP11_15_12, DU1_DR4),
+	PINMUX_IPSR_DATA(IP11_15_12, RIF1_CLK),
+	PINMUX_IPSR_DATA(IP11_15_12, QSPI1_SPCLK),
+	PINMUX_IPSR_MODSEL_DATA(IP11_15_12, SSI_SCK78_B, SEL_SSI7_1),
+	PINMUX_IPSR_DATA(IP11_15_12, VI0_G4),
+	PINMUX_IPSR_MODSEL_DATA(IP11_19_16, MSIOF0_SYNC_A, SEL_MSIOF0_0),
+	PINMUX_IPSR_DATA(IP11_19_16, PWM1_A),
+	PINMUX_IPSR_MODSEL_DATA(IP11_19_16, TS_SDAT0_A, SEL_TSIF_0),
+	PINMUX_IPSR_DATA(IP11_19_16, DU1_DR5),
+	PINMUX_IPSR_DATA(IP11_19_16, RIF1_SYNC),
+	PINMUX_IPSR_DATA(IP11_19_16, QSPI1_IO2),
+	PINMUX_IPSR_MODSEL_DATA(IP11_19_16, SSI_SDATA7_B, SEL_SSI7_1),
+	PINMUX_IPSR_DATA(IP11_23_20, MSIOF0_SS1_A),
+	PINMUX_IPSR_MODSEL_DATA(IP11_23_20, TS_SDEN0_A, SEL_TSIF_0),
+	PINMUX_IPSR_DATA(IP11_23_20, DU1_DR6),
+	PINMUX_IPSR_DATA(IP11_23_20, RIF1_D0),
+	PINMUX_IPSR_DATA(IP11_23_20, QSPI1_IO3),
+	PINMUX_IPSR_MODSEL_DATA(IP11_23_20, SSI_SDATA8_B, SEL_SSI8_1),
+	PINMUX_IPSR_DATA(IP11_27_24, MSIOF0_SS2_A),
+	PINMUX_IPSR_MODSEL_DATA(IP11_27_24, TS_SPSYNC0_A, SEL_TSIF_0),
+	PINMUX_IPSR_DATA(IP11_27_24, DU1_DR7),
+	PINMUX_IPSR_DATA(IP11_27_24, RIF1_D1),
+	PINMUX_IPSR_DATA(IP11_27_24, QSPI1_SSL),
+	PINMUX_IPSR_MODSEL_DATA(IP11_31_28, HRX1_A, SEL_HSCIF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_31_28, SCL4_A, SEL_I2C04_0),
+	PINMUX_IPSR_DATA(IP11_31_28, PWM6_A),
+	PINMUX_IPSR_DATA(IP11_31_28, DU1_DG0),
+	PINMUX_IPSR_MODSEL_DATA(IP11_31_28, RX0_A, SEL_SCIF0_0),
+
+	/* IPSR12 */
+	PINMUX_IPSR_MODSEL_DATA(IP12_3_0, HTX1_A, SEL_HSCIF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_3_0, SDA4_A, SEL_I2C04_0),
+	PINMUX_IPSR_DATA(IP12_3_0, DU1_DG1),
+	PINMUX_IPSR_MODSEL_DATA(IP12_3_0, TX0_A, SEL_SCIF0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_7_4, HCTS1_N_A, SEL_HSCIF1_0),
+	PINMUX_IPSR_DATA(IP12_7_4, PWM2_A),
+	PINMUX_IPSR_DATA(IP12_7_4, DU1_DG2),
+	PINMUX_IPSR_MODSEL_DATA(IP12_7_4, REMOCON_B, SEL_RCN_1),
+	PINMUX_IPSR_MODSEL_DATA(IP12_7_4, SPEEDIN_B, SEL_RSP_1),
+	PINMUX_IPSR_MODSEL_DATA(IP12_11_8, HRTS1_N_A, SEL_HSCIF1_0),
+	PINMUX_IPSR_DATA(IP12_11_8, DU1_DG3),
+	PINMUX_IPSR_MODSEL_DATA(IP12_11_8, SSI_WS1_B, SEL_SSI1_1),
+	PINMUX_IPSR_DATA(IP12_11_8, IRQ1),
+	PINMUX_IPSR_DATA(IP12_15_12, SD2_CLK),
+	PINMUX_IPSR_DATA(IP12_15_12, HSCK1),
+	PINMUX_IPSR_DATA(IP12_15_12, DU1_DG4),
+	PINMUX_IPSR_MODSEL_DATA(IP12_15_12, SSI_SCK1_B, SEL_SSI1_1),
+	PINMUX_IPSR_DATA(IP12_19_16, SD2_CMD),
+	PINMUX_IPSR_DATA(IP12_19_16, SCIF1_SCK_A),
+	PINMUX_IPSR_MODSEL_DATA(IP12_19_16, TCLK2_A, SEL_TMU2_0),
+	PINMUX_IPSR_DATA(IP12_19_16, DU1_DG5),
+	PINMUX_IPSR_MODSEL_DATA(IP12_19_16, SSI_SCK2_B, SEL_SSI2_1),
+	PINMUX_IPSR_DATA(IP12_19_16, PWM3_A),
+	PINMUX_IPSR_DATA(IP12_23_20, SD2_DATA0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_23_20, RX1_A, SEL_SCIF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_23_20, SCL1_E, SEL_I2C01_4),
+	PINMUX_IPSR_DATA(IP12_23_20, DU1_DG6),
+	PINMUX_IPSR_MODSEL_DATA(IP12_23_20, SSI_SDATA1_B, SEL_SSI1_1),
+	PINMUX_IPSR_DATA(IP12_27_24, SD2_DATA1),
+	PINMUX_IPSR_MODSEL_DATA(IP12_27_24, TX1_A, SEL_SCIF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_27_24, SDA1_E, SEL_I2C01_4),
+	PINMUX_IPSR_DATA(IP12_27_24, DU1_DG7),
+	PINMUX_IPSR_MODSEL_DATA(IP12_27_24, SSI_WS2_B, SEL_SSI2_1),
+	PINMUX_IPSR_DATA(IP12_31_28, SD2_DATA2),
+	PINMUX_IPSR_MODSEL_DATA(IP12_31_28, RX2_A, SEL_SCIF2_0),
+	PINMUX_IPSR_DATA(IP12_31_28, DU1_DB0),
+	PINMUX_IPSR_MODSEL_DATA(IP12_31_28, SSI_SDATA2_B, SEL_SSI2_1),
+
+	/* IPSR13 */
+	PINMUX_IPSR_DATA(IP13_3_0, SD2_DATA3),
+	PINMUX_IPSR_MODSEL_DATA(IP13_3_0, TX2_A, SEL_SCIF2_0),
+	PINMUX_IPSR_DATA(IP13_3_0, DU1_DB1),
+	PINMUX_IPSR_MODSEL_DATA(IP13_3_0, SSI_WS9_B, SEL_SSI9_1),
+	PINMUX_IPSR_DATA(IP13_7_4, SD2_CD),
+	PINMUX_IPSR_DATA(IP13_7_4, SCIF2_SCK_A),
+	PINMUX_IPSR_DATA(IP13_7_4, DU1_DB2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_7_4, SSI_SCK9_B, SEL_SSI9_1),
+	PINMUX_IPSR_DATA(IP13_11_8, SD2_WP),
+	PINMUX_IPSR_DATA(IP13_11_8, SCIF3_SCK_A),
+	PINMUX_IPSR_DATA(IP13_11_8, DU1_DB3),
+	PINMUX_IPSR_MODSEL_DATA(IP13_11_8, SSI_SDATA9_B, SEL_SSI9_1),
+	PINMUX_IPSR_MODSEL_DATA(IP13_15_12, RX3_A, SEL_SCIF3_0),
+	PINMUX_IPSR_MODSEL_DATA(IP13_15_12, SCL1_C, SEL_I2C01_2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_15_12, MSIOF1_RXD_B, SEL_MSIOF1_1),
+	PINMUX_IPSR_DATA(IP13_15_12, DU1_DB4),
+	PINMUX_IPSR_MODSEL_DATA(IP13_15_12, AUDIO_CLKA_C, SEL_ADGA_2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_15_12, SSI_SDATA4_B, SEL_SSI4_1),
+	PINMUX_IPSR_MODSEL_DATA(IP13_19_16, TX3_A, SEL_SCIF3_0),
+	PINMUX_IPSR_MODSEL_DATA(IP13_19_16, SDA1_C, SEL_I2C01_2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_19_16, MSIOF1_TXD_B, SEL_MSIOF1_1),
+	PINMUX_IPSR_DATA(IP13_19_16, DU1_DB5),
+	PINMUX_IPSR_MODSEL_DATA(IP13_19_16, AUDIO_CLKB_C, SEL_ADGB_2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_19_16, SSI_WS4_B, SEL_SSI4_1),
+	PINMUX_IPSR_MODSEL_DATA(IP13_23_20, SCL2_A, SEL_I2C02_0),
+	PINMUX_IPSR_MODSEL_DATA(IP13_23_20, MSIOF1_SCK_B, SEL_MSIOF1_1),
+	PINMUX_IPSR_DATA(IP13_23_20, DU1_DB6),
+	PINMUX_IPSR_MODSEL_DATA(IP13_23_20, AUDIO_CLKC_C, SEL_ADGC_2),
+	PINMUX_IPSR_MODSEL_DATA(IP13_23_20, SSI_SCK4_B, SEL_SSI4_1),
+	PINMUX_IPSR_MODSEL_DATA(IP13_27_24, SDA2_A, SEL_I2C02_0),
+	PINMUX_IPSR_MODSEL_DATA(IP13_27_24, MSIOF1_SYNC_B, SEL_MSIOF1_1),
+	PINMUX_IPSR_DATA(IP13_27_24, DU1_DB7),
+	PINMUX_IPSR_DATA(IP13_27_24, AUDIO_CLKOUT_C),
+	PINMUX_IPSR_MODSEL_DATA(IP13_31_28, SSI_SCK5_A, SEL_SSI5_0),
+	PINMUX_IPSR_DATA(IP13_31_28, DU1_DOTCLKOUT1),
+
+	/* IPSR14 */
+	PINMUX_IPSR_MODSEL_DATA(IP14_3_0, SSI_WS5_A, SEL_SSI5_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_3_0, SCL3_C, SEL_I2C03_2),
+	PINMUX_IPSR_DATA(IP14_3_0, DU1_DOTCLKIN),
+	PINMUX_IPSR_MODSEL_DATA(IP14_7_4, SSI_SDATA5_A, SEL_SSI5_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_7_4, SDA3_C, SEL_I2C03_2),
+	PINMUX_IPSR_DATA(IP14_7_4, DU1_DOTCLKOUT0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_11_8, SSI_SCK6_A, SEL_SSI6_0),
+	PINMUX_IPSR_DATA(IP14_11_8, DU1_EXODDF_DU1_ODDF_DISP_CDE),
+	PINMUX_IPSR_MODSEL_DATA(IP14_15_12, SSI_WS6_A, SEL_SSI6_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_15_12, SCL4_C, SEL_I2C04_2),
+	PINMUX_IPSR_DATA(IP14_15_12, DU1_EXHSYNC_DU1_HSYNC),
+	PINMUX_IPSR_MODSEL_DATA(IP14_19_16, SSI_SDATA6_A, SEL_SSI6_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_19_16, SDA4_C, SEL_I2C04_2),
+	PINMUX_IPSR_DATA(IP14_19_16, DU1_EXVSYNC_DU1_VSYNC),
+	PINMUX_IPSR_MODSEL_DATA(IP14_23_20, SSI_SCK78_A, SEL_SSI7_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_23_20, SDA4_E, SEL_I2C04_4),
+	PINMUX_IPSR_DATA(IP14_23_20, DU1_DISP),
+	PINMUX_IPSR_MODSEL_DATA(IP14_27_24, SSI_WS78_A, SEL_SSI7_0),
+	PINMUX_IPSR_MODSEL_DATA(IP14_27_24, SCL4_E, SEL_I2C04_4),
+	PINMUX_IPSR_DATA(IP14_27_24, DU1_CDE),
+	PINMUX_IPSR_MODSEL_DATA(IP14_31_28, SSI_SDATA7_A, SEL_SSI7_0),
+	PINMUX_IPSR_DATA(IP14_31_28, IRQ8),
+	PINMUX_IPSR_MODSEL_DATA(IP14_31_28, AUDIO_CLKA_D, SEL_ADGA_3),
+	PINMUX_IPSR_MODSEL_DATA(IP14_31_28, CAN_CLK_D, SEL_CANCLK_3),
+	PINMUX_IPSR_DATA(IP14_31_28, VI0_G5),
+
+	/* IPSR15 */
+	PINMUX_IPSR_MODSEL_DATA(IP15_3_0, SSI_SCK0129_A, SEL_SSI0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP15_3_0, MSIOF1_RXD_A, SEL_MSIOF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP15_3_0, RX5_D, SEL_SCIF5_3),
+	PINMUX_IPSR_DATA(IP15_3_0, VI0_G6),
+	PINMUX_IPSR_MODSEL_DATA(IP15_7_4, SSI_WS0129_A, SEL_SSI0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP15_7_4, MSIOF1_TXD_A, SEL_MSIOF1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP15_7_4, TX5_D, SEL_SCIF5_3),
+	PINMUX_IPSR_DATA(IP15_7_4, VI0_G7),
+	PINMUX_IPSR_MODSEL_DATA(IP15_11_8, SSI_SDATA0_A, SEL_SSI0_0),
+	PINMUX_IPSR_MODSEL_DATA(IP15_11_8, MSIOF1_SYNC_A, SEL_MSIOF1_0),
+	PINMUX_IPSR_DATA(IP15_11_8, PWM0_C),
+	PINMUX_IPSR_DATA(IP15_11_8, VI0_R0),
+	PINMUX_IPSR_DATA(IP15_15_12, SSI_SCK34),
+	PINMUX_IPSR_MODSEL_DATA(IP15_15_12, MSIOF1_SCK_A, SEL_MSIOF1_0),
+	PINMUX_IPSR_DATA(IP15_15_12, AVB_MDC),
+	PINMUX_IPSR_DATA(IP15_15_12, DACK1),
+	PINMUX_IPSR_DATA(IP15_15_12, VI0_R1),
+	PINMUX_IPSR_DATA(IP15_19_16, SSI_WS34),
+	PINMUX_IPSR_DATA(IP15_19_16, MSIOF1_SS1_A),
+	PINMUX_IPSR_DATA(IP15_19_16, AVB_MDIO),
+	PINMUX_IPSR_MODSEL_DATA(IP15_19_16, CAN1_RX_A, SEL_CAN1_0),
+	PINMUX_IPSR_DATA(IP15_19_16, DREQ1_N),
+	PINMUX_IPSR_DATA(IP15_19_16, VI0_R2),
+	PINMUX_IPSR_DATA(IP15_23_20, SSI_SDATA3),
+	PINMUX_IPSR_DATA(IP15_23_20, MSIOF1_SS2_A),
+	PINMUX_IPSR_DATA(IP15_23_20, AVB_LINK),
+	PINMUX_IPSR_MODSEL_DATA(IP15_23_20, CAN1_TX_A, SEL_CAN1_0),
+	PINMUX_IPSR_DATA(IP15_23_20, DREQ2_N),
+	PINMUX_IPSR_DATA(IP15_23_20, VI0_R3),
+	PINMUX_IPSR_MODSEL_DATA(IP15_27_24, SSI_SCK4_A, SEL_SSI4_0),
+	PINMUX_IPSR_DATA(IP15_27_24, AVB_MAGIC),
+	PINMUX_IPSR_DATA(IP15_27_24, VI0_R4),
+	PINMUX_IPSR_MODSEL_DATA(IP15_31_28, SSI_WS4_A, SEL_SSI4_0),
+	PINMUX_IPSR_DATA(IP15_31_28, AVB_PHY_INT),
+	PINMUX_IPSR_DATA(IP15_31_28, VI0_R5),
+
+	/* IPSR16 */
+	PINMUX_IPSR_MODSEL_DATA(IP16_3_0, SSI_SDATA4_A, SEL_SSI4_0),
+	PINMUX_IPSR_DATA(IP16_3_0, AVB_CRS),
+	PINMUX_IPSR_DATA(IP16_3_0, VI0_R6),
+	PINMUX_IPSR_MODSEL_DATA(IP16_7_4, SSI_SCK1_A, SEL_SSI1_0),
+	PINMUX_IPSR_DATA(IP16_7_4, SCIF1_SCK_B),
+	PINMUX_IPSR_DATA(IP16_7_4, PWM1_D),
+	PINMUX_IPSR_DATA(IP16_7_4, IRQ9),
+	PINMUX_IPSR_MODSEL_DATA(IP16_7_4, REMOCON_A, SEL_RCN_0),
+	PINMUX_IPSR_DATA(IP16_7_4, DACK2),
+	PINMUX_IPSR_DATA(IP16_7_4, VI0_CLK),
+	PINMUX_IPSR_DATA(IP16_7_4, AVB_COL),
+	PINMUX_IPSR_MODSEL_DATA(IP16_11_8, SSI_SDATA8_A, SEL_SSI8_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_11_8, RX1_B, SEL_SCIF1_1),
+	PINMUX_IPSR_MODSEL_DATA(IP16_11_8, CAN0_RX_D, SEL_CAN0_3),
+	PINMUX_IPSR_MODSEL_DATA(IP16_11_8, AVB_AVTP_CAPTURE_B, SEL_AVB_1),
+	PINMUX_IPSR_DATA(IP16_11_8, VI0_R7),
+	PINMUX_IPSR_MODSEL_DATA(IP16_15_12, SSI_WS1_A, SEL_SSI1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_15_12, TX1_B, SEL_SCIF1_1),
+	PINMUX_IPSR_MODSEL_DATA(IP16_15_12, CAN0_TX_D, SEL_CAN0_3),
+	PINMUX_IPSR_MODSEL_DATA(IP16_15_12, AVB_AVTP_MATCH_B, SEL_AVB_1),
+	PINMUX_IPSR_DATA(IP16_15_12, VI0_DATA0_VI0_B0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_19_16, SSI_SDATA1_A, SEL_SSI1_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_19_16, HRX1_B, SEL_HSCIF1_1),
+	PINMUX_IPSR_DATA(IP16_19_16, VI0_DATA1_VI0_B1),
+	PINMUX_IPSR_MODSEL_DATA(IP16_23_20, SSI_SCK2_A, SEL_SSI2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_23_20, HTX1_B, SEL_HSCIF1_1),
+	PINMUX_IPSR_DATA(IP16_23_20, AVB_TXD7),
+	PINMUX_IPSR_DATA(IP16_23_20, VI0_DATA2_VI0_B2),
+	PINMUX_IPSR_MODSEL_DATA(IP16_27_24, SSI_WS2_A, SEL_SSI2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_27_24, HCTS1_N_B, SEL_HSCIF1_1),
+	PINMUX_IPSR_DATA(IP16_27_24, AVB_TX_ER),
+	PINMUX_IPSR_DATA(IP16_27_24, VI0_DATA3_VI0_B3),
+	PINMUX_IPSR_MODSEL_DATA(IP16_31_28, SSI_SDATA2_A, SEL_SSI2_0),
+	PINMUX_IPSR_MODSEL_DATA(IP16_31_28, HRTS1_N_B, SEL_HSCIF1_1),
+	PINMUX_IPSR_DATA(IP16_31_28, VI0_DATA4_VI0_B4),
+
+	/* IPSR17 */
+	PINMUX_IPSR_MODSEL_DATA(IP17_3_0, SSI_SCK9_A, SEL_SSI9_0),
+	PINMUX_IPSR_MODSEL_DATA(IP17_3_0, RX2_B, SEL_SCIF2_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_3_0, SCL3_E, SEL_I2C03_4),
+	PINMUX_IPSR_DATA(IP17_3_0, EX_WAIT1),
+	PINMUX_IPSR_DATA(IP17_3_0, VI0_DATA5_VI0_B5),
+	PINMUX_IPSR_MODSEL_DATA(IP17_7_4, SSI_WS9_A, SEL_SSI9_0),
+	PINMUX_IPSR_MODSEL_DATA(IP17_7_4, TX2_B, SEL_SCIF2_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_7_4, SDA3_E, SEL_I2C03_4),
+	PINMUX_IPSR_DATA(IP17_7_4, VI0_DATA6_VI0_B6),
+	PINMUX_IPSR_MODSEL_DATA(IP17_11_8, SSI_SDATA9_A, SEL_SSI9_0),
+	PINMUX_IPSR_DATA(IP17_11_8, SCIF2_SCK_B),
+	PINMUX_IPSR_DATA(IP17_11_8, PWM2_D),
+	PINMUX_IPSR_DATA(IP17_11_8, VI0_DATA7_VI0_B7),
+	PINMUX_IPSR_MODSEL_DATA(IP17_15_12, AUDIO_CLKA_A, SEL_ADGA_0),
+	PINMUX_IPSR_MODSEL_DATA(IP17_15_12, SCL0_B, SEL_I2C00_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_15_12, TS_SDAT0_C, SEL_TSIF_2),
+	PINMUX_IPSR_DATA(IP17_15_12, TANS1),
+	PINMUX_IPSR_DATA(IP17_15_12, VI0_CLKENB),
+	PINMUX_IPSR_MODSEL_DATA(IP17_19_16, AUDIO_CLKB_A, SEL_ADGB_0),
+	PINMUX_IPSR_MODSEL_DATA(IP17_19_16, SDA0_B, SEL_I2C00_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_19_16, TS_SCK0_C, SEL_TSIF_2),
+	PINMUX_IPSR_DATA(IP17_19_16, TANS2),
+	PINMUX_IPSR_DATA(IP17_19_16, VI0_FIELD),
+	PINMUX_IPSR_MODSEL_DATA(IP17_23_20, AUDIO_CLKC_A, SEL_ADGC_0),
+	PINMUX_IPSR_MODSEL_DATA(IP17_23_20, SCL4_B, SEL_I2C04_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_23_20, TS_SDEN0_C, SEL_TSIF_2),
+	PINMUX_IPSR_DATA(IP17_23_20, VI0_HSYNC_N),
+	PINMUX_IPSR_DATA(IP17_27_24, AUDIO_CLKOUT_A),
+	PINMUX_IPSR_MODSEL_DATA(IP17_27_24, SDA4_B, SEL_I2C04_1),
+	PINMUX_IPSR_MODSEL_DATA(IP17_27_24, TS_SPSYNC0_C, SEL_TSIF_2),
+	PINMUX_IPSR_DATA(IP17_27_24, VI0_VSYNC_N),
+};
+
+static struct pinmux_gpio pinmux_gpios[] = {
+	PINMUX_GPIO_GP_ALL(),
+
+	GPIO_FN(USB0_PWEN), GPIO_FN(USB0_OVC), GPIO_FN(USB1_PWEN),
+	GPIO_FN(USB1_OVC), GPIO_FN(CLKOUT), GPIO_FN(MMC0_CLK_SDHI1_CLK),
+	GPIO_FN(MMC0_CMD_SDHI1_CMD), GPIO_FN(MMC0_D0_SDHI1_D0),
+	GPIO_FN(MMC0_D1_SDHI1_D1), GPIO_FN(MMC0_D2_SDHI1_D2),
+	GPIO_FN(MMC0_D3_SDHI1_D3), GPIO_FN(MMC0_D6), GPIO_FN(MMC0_D7),
+
+	/* IPSR0 */
+	GPIO_FN(SD0_CLK), GPIO_FN(SSI_SCK1_C), GPIO_FN(RX3_C), GPIO_FN(SD0_CMD),
+	GPIO_FN(SSI_WS1_C), GPIO_FN(TX3_C), GPIO_FN(SD0_DATA0),
+	GPIO_FN(SSI_SDATA1_C), GPIO_FN(RX4_E), GPIO_FN(SD0_DATA1),
+	GPIO_FN(SSI_SCK0129_B), GPIO_FN(TX4_E), GPIO_FN(SD0_DATA2),
+	GPIO_FN(SSI_WS0129_B), GPIO_FN(RX5_E), GPIO_FN(SD0_DATA3),
+	GPIO_FN(SSI_SDATA0_B), GPIO_FN(TX5_E), GPIO_FN(SD0_CD),
+	GPIO_FN(CAN0_RX_A), GPIO_FN(SD0_WP), GPIO_FN(IRQ7), GPIO_FN(CAN0_TX_A),
+
+	/* IPSR1 */
+	GPIO_FN(MMC0_D4), GPIO_FN(SD1_CD), GPIO_FN(MMC0_D5), GPIO_FN(SD1_WP),
+	GPIO_FN(D0), GPIO_FN(RIF0_D0_A), GPIO_FN(SCL3_B), GPIO_FN(RX5_B),
+	GPIO_FN(IRQ4), GPIO_FN(MSIOF2_RXD_C), GPIO_FN(SSI_SDATA5_B),
+	GPIO_FN(D1), GPIO_FN(RIF0_D1_A), GPIO_FN(SDA3_B), GPIO_FN(TX5_B),
+	GPIO_FN(MSIOF2_TXD_C), GPIO_FN(SSI_WS5_B), GPIO_FN(D2),
+	GPIO_FN(RIF0_CLK_A), GPIO_FN(RX4_B), GPIO_FN(SCL0_D), GPIO_FN(PWM1_C),
+	GPIO_FN(MSIOF2_SCK_C), GPIO_FN(SSI_SCK5_B), GPIO_FN(D3),
+	GPIO_FN(RIF0_SYNC_A), GPIO_FN(TX4_B), GPIO_FN(SDA0_D), GPIO_FN(PWM0_A),
+	GPIO_FN(MSIOF2_SYNC_C), GPIO_FN(D4), GPIO_FN(IRQ3), GPIO_FN(TCLK1_A),
+	GPIO_FN(PWM6_C), GPIO_FN(TS_SDAT0_B), GPIO_FN(D5), GPIO_FN(HRX2),
+	GPIO_FN(SCL1_B), GPIO_FN(PWM2_C), GPIO_FN(TCLK2_B), GPIO_FN(TS_SCK0_B),
+
+	/* IPSR2 */
+	GPIO_FN(D6), GPIO_FN(HTX2), GPIO_FN(SDA1_B), GPIO_FN(PWM4_C),
+	GPIO_FN(TS_SDEN0_B), GPIO_FN(D7), GPIO_FN(HSCK2), GPIO_FN(SCIF1_SCK_C),
+	GPIO_FN(IRQ6), GPIO_FN(PWM5_C), GPIO_FN(TS_SPSYNC0_B), GPIO_FN(D8),
+	GPIO_FN(HCTS2_N), GPIO_FN(RX1_C), GPIO_FN(SCL1_D), GPIO_FN(PWM3_C),
+	GPIO_FN(ADIDATA), GPIO_FN(D9), GPIO_FN(HRTS2_N), GPIO_FN(TX1_C),
+	GPIO_FN(SDA1_D), GPIO_FN(ADICS_SAMP), GPIO_FN(D10),
+	GPIO_FN(MSIOF2_RXD_A), GPIO_FN(HRX0_B), GPIO_FN(ADICLK), GPIO_FN(D11),
+	GPIO_FN(MSIOF2_TXD_A), GPIO_FN(HTX0_B), GPIO_FN(ADICHS0), GPIO_FN(D12),
+	GPIO_FN(MSIOF2_SCK_A), GPIO_FN(HSCK0), GPIO_FN(SPEEDIN_A),
+	GPIO_FN(CAN_CLK_C), GPIO_FN(ADICHS1), GPIO_FN(D13),
+	GPIO_FN(MSIOF2_SYNC_A), GPIO_FN(RX4_C), GPIO_FN(ADICHS2),
+
+	/* IPSR3 */
+	GPIO_FN(D14), GPIO_FN(MSIOF2_SS1_A), GPIO_FN(TX4_C), GPIO_FN(CAN1_RX_B),
+	GPIO_FN(SPEEDIN_C), GPIO_FN(AVB_AVTP_CAPTURE_A), GPIO_FN(D15),
+	GPIO_FN(MSIOF2_SS2_A), GPIO_FN(PWM4_A), GPIO_FN(CAN1_TX_B),
+	GPIO_FN(IRQ2), GPIO_FN(AVB_AVTP_MATCH_A), GPIO_FN(QSPI0_SPCLK),
+	GPIO_FN(WE0_N), GPIO_FN(QSPI0_MOSI_IO0), GPIO_FN(BS_N),
+	GPIO_FN(QSPI0_MISO_IO1), GPIO_FN(RD_WR_N), GPIO_FN(QSPI0_IO2),
+	GPIO_FN(CS0_N), GPIO_FN(QSPI0_IO3), GPIO_FN(RD_N),
+	GPIO_FN(QSPI0_SSL), GPIO_FN(WE1_N),
+
+	/* IPSR4 */
+	GPIO_FN(EX_WAIT0), GPIO_FN(CAN_CLK_B), GPIO_FN(SCIF_CLK_A),
+	GPIO_FN(PWMFSW0), GPIO_FN(DU0_DR0), GPIO_FN(LCDOUT16), GPIO_FN(RX5_C),
+	GPIO_FN(SCL2_D), GPIO_FN(A0), GPIO_FN(DU0_DR1), GPIO_FN(LCDOUT17),
+	GPIO_FN(TX5_C), GPIO_FN(SDA2_D), GPIO_FN(A1), GPIO_FN(DU0_DR2),
+	GPIO_FN(LCDOUT18), GPIO_FN(RX0_D), GPIO_FN(SCL0_E), GPIO_FN(A2),
+	GPIO_FN(DU0_DR3), GPIO_FN(LCDOUT19), GPIO_FN(TX0_D), GPIO_FN(SDA0_E),
+	GPIO_FN(PWM0_B), GPIO_FN(A3), GPIO_FN(DU0_DR4), GPIO_FN(LCDOUT20),
+	GPIO_FN(RX1_D), GPIO_FN(A4), GPIO_FN(DU0_DR5), GPIO_FN(LCDOUT21),
+	GPIO_FN(TX1_D), GPIO_FN(PWM1_B), GPIO_FN(A5), GPIO_FN(DU0_DR6),
+	GPIO_FN(LCDOUT22), GPIO_FN(RX2_C), GPIO_FN(A6),
+
+	/* IPSR5 */
+	GPIO_FN(DU0_DR7), GPIO_FN(LCDOUT23), GPIO_FN(TX2_C), GPIO_FN(PWM2_B),
+	GPIO_FN(A7), GPIO_FN(DU0_DG0), GPIO_FN(LCDOUT8), GPIO_FN(RX3_B),
+	GPIO_FN(SCL3_D), GPIO_FN(A8), GPIO_FN(DU0_DG1), GPIO_FN(LCDOUT9),
+	GPIO_FN(TX3_B), GPIO_FN(SDA3_D), GPIO_FN(PWM3_B), GPIO_FN(A9),
+	GPIO_FN(DU0_DG2), GPIO_FN(LCDOUT10), GPIO_FN(RX4_D), GPIO_FN(A10),
+	GPIO_FN(DU0_DG3), GPIO_FN(LCDOUT11), GPIO_FN(TX4_D), GPIO_FN(PWM4_B),
+	GPIO_FN(A11), GPIO_FN(DU0_DG4), GPIO_FN(LCDOUT12), GPIO_FN(HRX0_A),
+	GPIO_FN(A12), GPIO_FN(DU0_DG5),	GPIO_FN(LCDOUT13), GPIO_FN(HTX0_A),
+	GPIO_FN(PWM5_B), GPIO_FN(A13), GPIO_FN(DU0_DG6), GPIO_FN(LCDOUT14),
+	GPIO_FN(HRX1_C), GPIO_FN(A14),
+
+	/* IPSR6 */
+	GPIO_FN(DU0_DG7), GPIO_FN(LCDOUT15), GPIO_FN(HTX1_C), GPIO_FN(PWM6_B),
+	GPIO_FN(A15), GPIO_FN(DU0_DB0), GPIO_FN(LCDOUT0), GPIO_FN(SCL4_D),
+	GPIO_FN(CAN0_RX_C), GPIO_FN(A16), GPIO_FN(DU0_DB1), GPIO_FN(LCDOUT1),
+	GPIO_FN(SDA4_D), GPIO_FN(CAN0_TX_C), GPIO_FN(A17), GPIO_FN(DU0_DB2),
+	GPIO_FN(LCDOUT2), GPIO_FN(HCTS0_N), GPIO_FN(A18), GPIO_FN(DU0_DB3),
+	GPIO_FN(LCDOUT3), GPIO_FN(HRTS0_N), GPIO_FN(A19), GPIO_FN(DU0_DB4),
+	GPIO_FN(LCDOUT4), GPIO_FN(HCTS1_N_C), GPIO_FN(RIF0_CLK_B), GPIO_FN(A20),
+	GPIO_FN(DU0_DB5), GPIO_FN(LCDOUT5), GPIO_FN(HRTS1_N_C),
+	GPIO_FN(RIF0_SYNC_B), GPIO_FN(A21), GPIO_FN(DU0_DB6), GPIO_FN(LCDOUT6),
+	GPIO_FN(RIF0_D0_B), GPIO_FN(A22),
+
+	/* IPSR7 */
+	GPIO_FN(DU0_DB7), GPIO_FN(LCDOUT7), GPIO_FN(RIF0_D1_B), GPIO_FN(A23),
+	GPIO_FN(DU0_DOTCLKIN), GPIO_FN(QSTVA_QVS), GPIO_FN(A24),
+	GPIO_FN(DU0_DOTCLKOUT0), GPIO_FN(QCLK), GPIO_FN(A25),
+	GPIO_FN(DU0_DOTCLKOUT1), GPIO_FN(QSTVB_QVE), GPIO_FN(MSIOF2_RXD_B),
+	GPIO_FN(CS1_N_A26), GPIO_FN(DU0_EXHSYNC_DU0_HSYNC), GPIO_FN(QSTH_QHS),
+	GPIO_FN(MSIOF2_TXD_B), GPIO_FN(DREQ0_N), GPIO_FN(DU0_EXVSYNC_DU0_VSYNC),
+	GPIO_FN(QSTB_QHE), GPIO_FN(MSIOF2_SYNC_B), GPIO_FN(DACK0),
+	GPIO_FN(DU0_EXODDF_DU0_ODDF_DISP_CDE), GPIO_FN(QCPV_QDE),
+	GPIO_FN(MSIOF2_SCK_B), GPIO_FN(DRACK0), GPIO_FN(DU0_DISP),
+	GPIO_FN(QPOLA), GPIO_FN(CAN1_RX_C),
+
+	/* IPSR8 */
+	GPIO_FN(DU0_CDE), GPIO_FN(QPOLB), GPIO_FN(CAN1_TX_C), GPIO_FN(VI1_CLK),
+	GPIO_FN(AVB_RX_CLK), GPIO_FN(ETH_REF_CLK), GPIO_FN(VI1_DATA0),
+	GPIO_FN(AVB_RX_DV), GPIO_FN(ETH_CRS_DV), GPIO_FN(VI1_DATA1),
+	GPIO_FN(AVB_RXD0), GPIO_FN(ETH_RXD0), GPIO_FN(VI1_DATA2),
+	GPIO_FN(AVB_RXD1), GPIO_FN(ETH_RXD1), GPIO_FN(VI1_DATA3),
+	GPIO_FN(AVB_RXD2), GPIO_FN(ETH_MDIO), GPIO_FN(VI1_DATA4),
+	GPIO_FN(AVB_RXD3), GPIO_FN(ETH_RX_ER), GPIO_FN(VI1_DATA5),
+	GPIO_FN(AVB_RXD4), GPIO_FN(ETH_LINK),
+
+	/* IPSR9 */
+	GPIO_FN(VI1_DATA6), GPIO_FN(AVB_RXD5), GPIO_FN(ETH_TXD1),
+	GPIO_FN(VI1_DATA7), GPIO_FN(AVB_RXD6), GPIO_FN(ETH_TX_EN),
+	GPIO_FN(VI1_CLKENB), GPIO_FN(SCL3_A), GPIO_FN(AVB_RXD7),
+	GPIO_FN(ETH_MAGIC), GPIO_FN(VI1_FIELD), GPIO_FN(SDA3_A),
+	GPIO_FN(AVB_RX_ER), GPIO_FN(ETH_TXD0), GPIO_FN(VI1_HSYNC_N),
+	GPIO_FN(RX0_B), GPIO_FN(SCL0_C), GPIO_FN(AVB_GTXREFCLK),
+	GPIO_FN(ETH_MDC), GPIO_FN(VI1_VSYNC_N), GPIO_FN(TX0_B), GPIO_FN(SDA0_C),
+	GPIO_FN(AUDIO_CLKOUT_B), GPIO_FN(AVB_TX_CLK), GPIO_FN(VI1_DATA8),
+	GPIO_FN(SCL2_B), GPIO_FN(AVB_TX_EN), GPIO_FN(VI1_DATA9),
+	GPIO_FN(SDA2_B), GPIO_FN(AVB_TXD0),
+
+	/* IPSR10 */
+	GPIO_FN(VI1_DATA10), GPIO_FN(CAN0_RX_B), GPIO_FN(AVB_TXD1),
+	GPIO_FN(VI1_DATA11), GPIO_FN(CAN0_TX_B), GPIO_FN(AVB_TXD2),
+	GPIO_FN(AVB_TXD3), GPIO_FN(AUDIO_CLKA_B), GPIO_FN(SSI_SCK1_D),
+	GPIO_FN(RX5_F), GPIO_FN(MSIOF0_RXD_B), GPIO_FN(AVB_TXD4),
+	GPIO_FN(AUDIO_CLKB_B), GPIO_FN(SSI_WS1_D), GPIO_FN(TX5_F),
+	GPIO_FN(MSIOF0_TXD_B), GPIO_FN(AVB_TXD5), GPIO_FN(SCIF_CLK_B),
+	GPIO_FN(AUDIO_CLKC_B), GPIO_FN(SSI_SDATA1_D), GPIO_FN(MSIOF0_SCK_B),
+	GPIO_FN(SCL0_A), GPIO_FN(RX0_C), GPIO_FN(PWM5_A), GPIO_FN(TCLK1_B),
+	GPIO_FN(AVB_TXD6), GPIO_FN(CAN1_RX_D), GPIO_FN(MSIOF0_SYNC_B),
+	GPIO_FN(SDA0_A), GPIO_FN(TX0_C), GPIO_FN(IRQ5), GPIO_FN(CAN_CLK_A),
+	GPIO_FN(AVB_GTX_CLK), GPIO_FN(CAN1_TX_D), GPIO_FN(DVC_MUTE),
+	GPIO_FN(SCL1_A), GPIO_FN(RX4_A), GPIO_FN(PWM5_D), GPIO_FN(DU1_DR0),
+	GPIO_FN(SSI_SCK6_B), GPIO_FN(VI0_G0),
+
+	/* IPSR11 */
+	GPIO_FN(SDA1_A), GPIO_FN(TX4_A), GPIO_FN(DU1_DR1),
+	GPIO_FN(SSI_WS6_B), GPIO_FN(VI0_G1), GPIO_FN(MSIOF0_RXD_A),
+	GPIO_FN(RX5_A), GPIO_FN(SCL2_C), GPIO_FN(DU1_DR2),
+	GPIO_FN(QSPI1_MOSI_IO0), GPIO_FN(SSI_SDATA6_B), GPIO_FN(VI0_G2),
+	GPIO_FN(MSIOF0_TXD_A), GPIO_FN(TX5_A), GPIO_FN(SDA2_C),
+	GPIO_FN(DU1_DR3), GPIO_FN(QSPI1_MISO_IO1), GPIO_FN(SSI_WS78_B),
+	GPIO_FN(VI0_G3), GPIO_FN(MSIOF0_SCK_A), GPIO_FN(IRQ0),
+	GPIO_FN(TS_SCK0_A), GPIO_FN(DU1_DR4), GPIO_FN(RIF1_CLK),
+	GPIO_FN(QSPI1_SPCLK), GPIO_FN(SSI_SCK78_B), GPIO_FN(VI0_G4),
+	GPIO_FN(MSIOF0_SYNC_A), GPIO_FN(PWM1_A), GPIO_FN(TS_SDAT0_A),
+	GPIO_FN(DU1_DR5), GPIO_FN(RIF1_SYNC), GPIO_FN(QSPI1_IO2),
+	GPIO_FN(SSI_SDATA7_B), GPIO_FN(MSIOF0_SS1_A), GPIO_FN(TS_SDEN0_A),
+	GPIO_FN(DU1_DR6), GPIO_FN(RIF1_D0), GPIO_FN(QSPI1_IO3),
+	GPIO_FN(SSI_SDATA8_B), GPIO_FN(MSIOF0_SS2_A), GPIO_FN(TS_SPSYNC0_A),
+	GPIO_FN(DU1_DR7), GPIO_FN(RIF1_D1), GPIO_FN(QSPI1_SSL),
+	GPIO_FN(HRX1_A), GPIO_FN(SCL4_A), GPIO_FN(PWM6_A), GPIO_FN(DU1_DG0),
+	GPIO_FN(RX0_A),
+
+	/* IPSR12 */
+	GPIO_FN(HTX1_A), GPIO_FN(SDA4_A), GPIO_FN(DU1_DG1), GPIO_FN(TX0_A),
+	GPIO_FN(HCTS1_N_A), GPIO_FN(PWM2_A), GPIO_FN(DU1_DG2),
+	GPIO_FN(REMOCON_B), GPIO_FN(SPEEDIN_B), GPIO_FN(HRTS1_N_A),
+	GPIO_FN(DU1_DG3), GPIO_FN(SSI_WS1_B), GPIO_FN(IRQ1), GPIO_FN(SD2_CLK),
+	GPIO_FN(HSCK1), GPIO_FN(DU1_DG4), GPIO_FN(SSI_SCK1_B), GPIO_FN(SD2_CMD),
+	GPIO_FN(SCIF1_SCK_A), GPIO_FN(TCLK2_A), GPIO_FN(DU1_DG5),
+	GPIO_FN(SSI_SCK2_B), GPIO_FN(PWM3_A), GPIO_FN(SD2_DATA0),
+	GPIO_FN(RX1_A), GPIO_FN(SCL1_E), GPIO_FN(DU1_DG6),
+	GPIO_FN(SSI_SDATA1_B), GPIO_FN(SD2_DATA1), GPIO_FN(TX1_A),
+	GPIO_FN(SDA1_E), GPIO_FN(DU1_DG7), GPIO_FN(SSI_WS2_B),
+	GPIO_FN(SD2_DATA2), GPIO_FN(RX2_A), GPIO_FN(DU1_DB0),
+	GPIO_FN(SSI_SDATA2_B),
+
+	/* IPSR13 */
+	GPIO_FN(SD2_DATA3), GPIO_FN(TX2_A), GPIO_FN(DU1_DB1),
+	GPIO_FN(SSI_WS9_B), GPIO_FN(SD2_CD), GPIO_FN(SCIF2_SCK_A),
+	GPIO_FN(DU1_DB2), GPIO_FN(SSI_SCK9_B), GPIO_FN(SD2_WP),
+	GPIO_FN(SCIF3_SCK_A), GPIO_FN(DU1_DB3), GPIO_FN(SSI_SDATA9_B),
+	GPIO_FN(RX3_A), GPIO_FN(SCL1_C), GPIO_FN(MSIOF1_RXD_B),
+	GPIO_FN(DU1_DB4), GPIO_FN(AUDIO_CLKA_C), GPIO_FN(SSI_SDATA4_B),
+	GPIO_FN(TX3_A), GPIO_FN(SDA1_C), GPIO_FN(MSIOF1_TXD_B),
+	GPIO_FN(DU1_DB5), GPIO_FN(AUDIO_CLKB_C), GPIO_FN(SSI_WS4_B),
+	GPIO_FN(SCL2_A), GPIO_FN(MSIOF1_SCK_B), GPIO_FN(DU1_DB6),
+	GPIO_FN(AUDIO_CLKC_C), GPIO_FN(SSI_SCK4_B), GPIO_FN(SDA2_A),
+	GPIO_FN(MSIOF1_SYNC_B), GPIO_FN(DU1_DB7), GPIO_FN(AUDIO_CLKOUT_C),
+	GPIO_FN(SSI_SCK5_A), GPIO_FN(DU1_DOTCLKOUT1),
+
+	/* IPSR14 */
+	GPIO_FN(SSI_WS5_A), GPIO_FN(SCL3_C), GPIO_FN(DU1_DOTCLKIN),
+	GPIO_FN(SSI_SDATA5_A), GPIO_FN(SDA3_C), GPIO_FN(DU1_DOTCLKOUT0),
+	GPIO_FN(SSI_SCK6_A), GPIO_FN(DU1_EXODDF_DU1_ODDF_DISP_CDE),
+	GPIO_FN(SSI_WS6_A), GPIO_FN(SCL4_C), GPIO_FN(DU1_EXHSYNC_DU1_HSYNC),
+	GPIO_FN(SSI_SDATA6_A), GPIO_FN(SDA4_C), GPIO_FN(DU1_EXVSYNC_DU1_VSYNC),
+	GPIO_FN(SSI_SCK78_A), GPIO_FN(SDA4_E), GPIO_FN(DU1_DISP),
+	GPIO_FN(SSI_WS78_A), GPIO_FN(SCL4_E), GPIO_FN(DU1_CDE),
+	GPIO_FN(SSI_SDATA7_A), GPIO_FN(IRQ8), GPIO_FN(AUDIO_CLKA_D),
+	GPIO_FN(CAN_CLK_D), GPIO_FN(VI0_G5),
+
+	/* IPSR15 */
+	GPIO_FN(SSI_SCK0129_A), GPIO_FN(MSIOF1_RXD_A), GPIO_FN(RX5_D),
+	GPIO_FN(VI0_G6), GPIO_FN(SSI_WS0129_A), GPIO_FN(MSIOF1_TXD_A),
+	GPIO_FN(TX5_D), GPIO_FN(VI0_G7), GPIO_FN(SSI_SDATA0_A),
+	GPIO_FN(MSIOF1_SYNC_A), GPIO_FN(PWM0_C), GPIO_FN(VI0_R0),
+	GPIO_FN(SSI_SCK34), GPIO_FN(MSIOF1_SCK_A), GPIO_FN(AVB_MDC),
+	GPIO_FN(DACK1), GPIO_FN(VI0_R1), GPIO_FN(SSI_WS34),
+	GPIO_FN(MSIOF1_SS1_A), GPIO_FN(AVB_MDIO), GPIO_FN(CAN1_RX_A),
+	GPIO_FN(DREQ1_N), GPIO_FN(VI0_R2), GPIO_FN(SSI_SDATA3),
+	GPIO_FN(MSIOF1_SS2_A), GPIO_FN(AVB_LINK), GPIO_FN(CAN1_TX_A),
+	GPIO_FN(DREQ2_N), GPIO_FN(VI0_R3), GPIO_FN(SSI_SCK4_A),
+	GPIO_FN(AVB_MAGIC), GPIO_FN(VI0_R4), GPIO_FN(SSI_WS4_A),
+	GPIO_FN(AVB_PHY_INT), GPIO_FN(VI0_R5),
+
+	/* IPSR16 */
+	GPIO_FN(SSI_SDATA4_A), GPIO_FN(AVB_CRS), GPIO_FN(VI0_R6),
+	GPIO_FN(SSI_SCK1_A), GPIO_FN(SCIF1_SCK_B), GPIO_FN(PWM1_D),
+	GPIO_FN(IRQ9), GPIO_FN(REMOCON_A), GPIO_FN(DACK2), GPIO_FN(VI0_CLK),
+	GPIO_FN(AVB_COL), GPIO_FN(SSI_SDATA8_A), GPIO_FN(RX1_B),
+	GPIO_FN(CAN0_RX_D), GPIO_FN(AVB_AVTP_CAPTURE_B), GPIO_FN(VI0_R7),
+	GPIO_FN(SSI_WS1_A), GPIO_FN(TX1_B), GPIO_FN(CAN0_TX_D),
+	GPIO_FN(AVB_AVTP_MATCH_B), GPIO_FN(VI0_DATA0_VI0_B0),
+	GPIO_FN(SSI_SDATA1_A), GPIO_FN(HRX1_B), GPIO_FN(VI0_DATA1_VI0_B1),
+	GPIO_FN(SSI_SCK2_A), GPIO_FN(HTX1_B), GPIO_FN(AVB_TXD7),
+	GPIO_FN(VI0_DATA2_VI0_B2), GPIO_FN(SSI_WS2_A), GPIO_FN(HCTS1_N_B),
+	GPIO_FN(AVB_TX_ER), GPIO_FN(VI0_DATA3_VI0_B3),
+	GPIO_FN(SSI_SDATA2_A), GPIO_FN(HRTS1_N_B), GPIO_FN(VI0_DATA4_VI0_B4),
+
+	/* IPSR17 */
+	GPIO_FN(SSI_SCK9_A), GPIO_FN(RX2_B), GPIO_FN(SCL3_E), GPIO_FN(EX_WAIT1),
+	GPIO_FN(VI0_DATA5_VI0_B5), GPIO_FN(SSI_WS9_A), GPIO_FN(TX2_B),
+	GPIO_FN(SDA3_E), GPIO_FN(VI0_DATA6_VI0_B6), GPIO_FN(SSI_SDATA9_A),
+	GPIO_FN(SCIF2_SCK_B), GPIO_FN(PWM2_D), GPIO_FN(VI0_DATA7_VI0_B7),
+	GPIO_FN(AUDIO_CLKA_A), GPIO_FN(SCL0_B), GPIO_FN(TS_SDAT0_C),
+	GPIO_FN(TANS1), GPIO_FN(VI0_CLKENB), GPIO_FN(AUDIO_CLKB_A),
+	GPIO_FN(SDA0_B), GPIO_FN(TS_SCK0_C), GPIO_FN(TANS2), GPIO_FN(VI0_FIELD),
+	GPIO_FN(AUDIO_CLKC_A), GPIO_FN(SCL4_B), GPIO_FN(TS_SDEN0_C),
+	GPIO_FN(VI0_HSYNC_N), GPIO_FN(AUDIO_CLKOUT_A), GPIO_FN(SDA4_B),
+	GPIO_FN(TS_SPSYNC0_C), GPIO_FN(VI0_VSYNC_N),
+};
+
+static struct pinmux_cfg_reg pinmux_config_regs[] = {
+	{ PINMUX_CFG_REG("GPSR0", 0xE6060004, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_0_22_FN, FN_MMC0_D7,
+		GP_0_21_FN, FN_MMC0_D6,
+		GP_0_20_FN, FN_IP1_7_4,
+		GP_0_19_FN, FN_IP1_3_0,
+		GP_0_18_FN, FN_MMC0_D3_SDHI1_D3,
+		GP_0_17_FN, FN_MMC0_D2_SDHI1_D2,
+		GP_0_16_FN, FN_MMC0_D1_SDHI1_D1,
+		GP_0_15_FN, FN_MMC0_D0_SDHI1_D0,
+		GP_0_14_FN, FN_MMC0_CMD_SDHI1_CMD,
+		GP_0_13_FN, FN_MMC0_CLK_SDHI1_CLK,
+		GP_0_12_FN, FN_IP0_31_28,
+		GP_0_11_FN, FN_IP0_27_24,
+		GP_0_10_FN, FN_IP0_23_20,
+		GP_0_9_FN, FN_IP0_19_16,
+		GP_0_8_FN, FN_IP0_15_12,
+		GP_0_7_FN, FN_IP0_11_8,
+		GP_0_6_FN, FN_IP0_7_4,
+		GP_0_5_FN, FN_IP0_3_0,
+		GP_0_4_FN, FN_CLKOUT,
+		GP_0_3_FN, FN_USB1_OVC,
+		GP_0_2_FN, FN_USB1_PWEN,
+		GP_0_1_FN, FN_USB0_OVC,
+		GP_0_0_FN, FN_USB0_PWEN, }
+	},
+	{ PINMUX_CFG_REG("GPSR1", 0xE6060008, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_1_22_FN, FN_IP4_3_0,
+		GP_1_21_FN, FN_IP3_31_28,
+		GP_1_20_FN, FN_IP3_27_24,
+		GP_1_19_FN, FN_IP3_23_20,
+		GP_1_18_FN, FN_IP3_19_16,
+		GP_1_17_FN, FN_IP3_15_12,
+		GP_1_16_FN, FN_IP3_11_8,
+		GP_1_15_FN, FN_IP3_7_4,
+		GP_1_14_FN, FN_IP3_3_0,
+		GP_1_13_FN, FN_IP2_31_28,
+		GP_1_12_FN, FN_IP2_27_24,
+		GP_1_11_FN, FN_IP2_23_20,
+		GP_1_10_FN, FN_IP2_19_16,
+		GP_1_9_FN, FN_IP2_15_12,
+		GP_1_8_FN, FN_IP2_11_8,
+		GP_1_7_FN, FN_IP2_7_4,
+		GP_1_6_FN, FN_IP2_3_0,
+		GP_1_5_FN, FN_IP1_31_28,
+		GP_1_4_FN, FN_IP1_27_24,
+		GP_1_3_FN, FN_IP1_23_20,
+		GP_1_2_FN, FN_IP1_19_16,
+		GP_1_1_FN, FN_IP1_15_12,
+		GP_1_0_FN, FN_IP1_11_8, }
+	},
+	{ PINMUX_CFG_REG("GPSR2", 0xE606000C, 32, 1) {
+		GP_2_31_FN, FN_IP8_3_0,
+		GP_2_30_FN, FN_IP7_31_28,
+		GP_2_29_FN, FN_IP7_27_24,
+		GP_2_28_FN, FN_IP7_23_20,
+		GP_2_27_FN, FN_IP7_19_16,
+		GP_2_26_FN, FN_IP7_15_12,
+		GP_2_25_FN, FN_IP7_11_8,
+		GP_2_24_FN, FN_IP7_7_4,
+		GP_2_23_FN, FN_IP7_3_0,
+		GP_2_22_FN, FN_IP6_31_28,
+		GP_2_21_FN, FN_IP6_27_24,
+		GP_2_20_FN, FN_IP6_23_20,
+		GP_2_19_FN, FN_IP6_19_16,
+		GP_2_18_FN, FN_IP6_15_12,
+		GP_2_17_FN, FN_IP6_11_8,
+		GP_2_16_FN, FN_IP6_7_4,
+		GP_2_15_FN, FN_IP6_3_0,
+		GP_2_14_FN, FN_IP5_31_28,
+		GP_2_13_FN, FN_IP5_27_24,
+		GP_2_12_FN, FN_IP5_23_20,
+		GP_2_11_FN, FN_IP5_19_16,
+		GP_2_10_FN, FN_IP5_15_12,
+		GP_2_9_FN, FN_IP5_11_8,
+		GP_2_8_FN, FN_IP5_7_4,
+		GP_2_7_FN, FN_IP5_3_0,
+		GP_2_6_FN, FN_IP4_31_28,
+		GP_2_5_FN, FN_IP4_27_24,
+		GP_2_4_FN, FN_IP4_23_20,
+		GP_2_3_FN, FN_IP4_19_16,
+		GP_2_2_FN, FN_IP4_15_12,
+		GP_2_1_FN, FN_IP4_11_8,
+		GP_2_0_FN, FN_IP4_7_4, }
+	},
+	{ PINMUX_CFG_REG("GPSR3", 0xE6060010, 32, 1) {
+		0, 0,
+		0, 0,
+		GP_3_29_FN, FN_IP10_19_16,
+		GP_3_28_FN, FN_IP10_15_12,
+		GP_3_27_FN, FN_IP10_11_8,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_3_16_FN, FN_IP10_7_4,
+		GP_3_15_FN, FN_IP10_3_0,
+		GP_3_14_FN, FN_IP9_31_28,
+		GP_3_13_FN, FN_IP9_27_24,
+		GP_3_12_FN, FN_IP9_23_20,
+		GP_3_11_FN, FN_IP9_19_16,
+		GP_3_10_FN, FN_IP9_15_12,
+		GP_3_9_FN, FN_IP9_11_8,
+		GP_3_8_FN, FN_IP9_7_4,
+		GP_3_7_FN, FN_IP9_3_0,
+		GP_3_6_FN, FN_IP8_31_28,
+		GP_3_5_FN, FN_IP8_27_24,
+		GP_3_4_FN, FN_IP8_23_20,
+		GP_3_3_FN, FN_IP8_19_16,
+		GP_3_2_FN, FN_IP8_15_12,
+		GP_3_1_FN, FN_IP8_11_8,
+		GP_3_0_FN, FN_IP8_7_4, }
+	},
+	{ PINMUX_CFG_REG("GPSR4", 0xE6060014, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_4_25_FN, FN_IP13_27_24,
+		GP_4_24_FN, FN_IP13_23_20,
+		GP_4_23_FN, FN_IP13_19_16,
+		GP_4_22_FN, FN_IP13_15_12,
+		GP_4_21_FN, FN_IP13_11_8,
+		GP_4_20_FN, FN_IP13_7_4,
+		GP_4_19_FN, FN_IP13_3_0,
+		GP_4_18_FN, FN_IP12_31_28,
+		GP_4_17_FN, FN_IP12_27_24,
+		GP_4_16_FN, FN_IP12_23_20,
+		GP_4_15_FN, FN_IP12_19_16,
+		GP_4_14_FN, FN_IP12_15_12,
+		GP_4_13_FN, FN_IP12_11_8,
+		GP_4_12_FN, FN_IP12_7_4,
+		GP_4_11_FN, FN_IP12_3_0,
+		GP_4_10_FN, FN_IP11_31_28,
+		GP_4_9_FN, FN_IP11_27_24,
+		GP_4_8_FN, FN_IP11_23_20,
+		GP_4_7_FN, FN_IP11_19_16,
+		GP_4_6_FN, FN_IP11_15_12,
+		GP_4_5_FN, FN_IP11_11_8,
+		GP_4_4_FN, FN_IP11_7_4,
+		GP_4_3_FN, FN_IP11_3_0,
+		GP_4_2_FN, FN_IP10_31_28,
+		GP_4_1_FN, FN_IP10_27_24,
+		GP_4_0_FN, FN_IP10_23_20, }
+	},
+	{ PINMUX_CFG_REG("GPSR5", 0xE6060018, 32, 1) {
+		GP_5_31_FN, FN_IP17_27_24,
+		GP_5_30_FN, FN_IP17_23_20,
+		GP_5_29_FN, FN_IP17_19_16,
+		GP_5_28_FN, FN_IP17_15_12,
+		GP_5_27_FN, FN_IP17_11_8,
+		GP_5_26_FN, FN_IP17_7_4,
+		GP_5_25_FN, FN_IP17_3_0,
+		GP_5_24_FN, FN_IP16_31_28,
+		GP_5_23_FN, FN_IP16_27_24,
+		GP_5_22_FN, FN_IP16_23_20,
+		GP_5_21_FN, FN_IP16_19_16,
+		GP_5_20_FN, FN_IP16_15_12,
+		GP_5_19_FN, FN_IP16_11_8,
+		GP_5_18_FN, FN_IP16_7_4,
+		GP_5_17_FN, FN_IP16_3_0,
+		GP_5_16_FN, FN_IP15_31_28,
+		GP_5_15_FN, FN_IP15_27_24,
+		GP_5_14_FN, FN_IP15_23_20,
+		GP_5_13_FN, FN_IP15_19_16,
+		GP_5_12_FN, FN_IP15_15_12,
+		GP_5_11_FN, FN_IP15_11_8,
+		GP_5_10_FN, FN_IP15_7_4,
+		GP_5_9_FN, FN_IP15_3_0,
+		GP_5_8_FN, FN_IP14_31_28,
+		GP_5_7_FN, FN_IP14_27_24,
+		GP_5_6_FN, FN_IP14_23_20,
+		GP_5_5_FN, FN_IP14_19_16,
+		GP_5_4_FN, FN_IP14_15_12,
+		GP_5_3_FN, FN_IP14_11_8,
+		GP_5_2_FN, FN_IP14_7_4,
+		GP_5_1_FN, FN_IP14_3_0,
+		GP_5_0_FN, FN_IP13_31_28, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR0", 0xE6060040, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP0_31_28 [4] */
+		FN_SD0_WP, FN_IRQ7, FN_CAN0_TX_A, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP0_27_24 [4] */
+		FN_SD0_CD, 0, FN_CAN0_RX_A, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP0_23_20 [4] */
+		FN_SD0_DATA3, 0, 0, FN_SSI_SDATA0_B, FN_TX5_E, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP0_19_16 [4] */
+		FN_SD0_DATA2, 0, 0, FN_SSI_WS0129_B, FN_RX5_E, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP0_15_12 [4] */
+		FN_SD0_DATA1, 0, 0, FN_SSI_SCK0129_B, FN_TX4_E, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP0_11_8 [4] */
+		FN_SD0_DATA0, 0, 0, FN_SSI_SDATA1_C, FN_RX4_E, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP0_7_4 [4] */
+		FN_SD0_CMD, 0, 0, FN_SSI_WS1_C, FN_TX3_C, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0,
+		/* IP0_3_0 [4] */
+		FN_SD0_CLK, 0, 0, FN_SSI_SCK1_C, FN_RX3_C, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR1", 0xE6060044, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP1_31_28 [4] */
+		FN_D5, FN_HRX2, FN_SCL1_B, FN_PWM2_C, FN_TCLK2_B, FN_TS_SCK0_B,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_27_24 [4] */
+		FN_D4, 0, FN_IRQ3, FN_TCLK1_A, FN_PWM6_C, FN_TS_SDAT0_B, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_23_20 [4] */
+		FN_D3, FN_RIF0_SYNC_A, FN_TX4_B, FN_SDA0_D, FN_PWM0_A,
+		FN_MSIOF2_SYNC_C,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_19_16 [4] */
+		FN_D2, FN_RIF0_CLK_A, FN_RX4_B, FN_SCL0_D, FN_PWM1_C,
+		FN_MSIOF2_SCK_C, FN_SSI_SCK5_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_15_12 [4] */
+		FN_D1, FN_RIF0_D1_A, FN_SDA3_B, FN_TX5_B, 0, FN_MSIOF2_TXD_C,
+		FN_SSI_WS5_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_11_8 [4] */
+		FN_D0, FN_RIF0_D0_A, FN_SCL3_B, FN_RX5_B, FN_IRQ4,
+		FN_MSIOF2_RXD_C, FN_SSI_SDATA5_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP1_7_4 [4] */
+		FN_MMC0_D5, FN_SD1_WP, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP1_3_0 [4] */
+		FN_MMC0_D4, FN_SD1_CD, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR2", 0xE6060048, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP2_31_28 [4] */
+		FN_D13, FN_MSIOF2_SYNC_A, 0, FN_RX4_C, 0, FN_ADICHS2, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP2_27_24 [4] */
+		FN_D12, FN_MSIOF2_SCK_A, FN_HSCK0, FN_SPEEDIN_A, FN_CAN_CLK_C,
+		FN_ADICHS1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP2_23_20 [4] */
+		FN_D11, FN_MSIOF2_TXD_A, FN_HTX0_B, 0, 0, FN_ADICHS0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP2_19_16 [4] */
+		FN_D10, FN_MSIOF2_RXD_A, FN_HRX0_B, 0, 0, FN_ADICLK, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP2_15_12 [4] */
+		FN_D9, FN_HRTS2_N, FN_TX1_C, FN_SDA1_D, 0, FN_ADICS_SAMP, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP2_11_8 [4] */
+		FN_D8, FN_HCTS2_N, FN_RX1_C, FN_SCL1_D, FN_PWM3_C, FN_ADIDATA,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP2_7_4 [4] */
+		FN_D7, FN_HSCK2, FN_SCIF1_SCK_C, FN_IRQ6, FN_PWM5_C,
+		FN_TS_SPSYNC0_B, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP2_3_0 [4] */
+		FN_D6, FN_HTX2, FN_SDA1_B, FN_PWM4_C, 0, FN_TS_SDEN0_B, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR3", 0xE606004C, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP3_31_28 [4] */
+		FN_QSPI0_SSL, FN_WE1_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP3_27_24 [4] */
+		FN_QSPI0_IO3, FN_RD_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP3_23_20 [4] */
+		FN_QSPI0_IO2, FN_CS0_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP3_19_16 [4] */
+		FN_QSPI0_MISO_IO1, FN_RD_WR_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0,
+		/* IP3_15_12 [4] */
+		FN_QSPI0_MOSI_IO0, FN_BS_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0,
+		/* IP3_11_8 [4] */
+		FN_QSPI0_SPCLK, FN_WE0_N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP3_7_4 [4] */
+		FN_D15, FN_MSIOF2_SS2_A, FN_PWM4_A, 0, FN_CAN1_TX_B, FN_IRQ2,
+		FN_AVB_AVTP_MATCH_A, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP3_3_0 [4] */
+		FN_D14, FN_MSIOF2_SS1_A, 0, FN_TX4_C, FN_CAN1_RX_B,
+		FN_SPEEDIN_C, FN_AVB_AVTP_CAPTURE_A,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR4", 0xE6060050, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP4_31_28 [4] */
+		FN_DU0_DR6, FN_LCDOUT22, FN_RX2_C, 0, 0, 0, FN_A6, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP4_27_24 [4] */
+		FN_DU0_DR5, FN_LCDOUT21, FN_TX1_D, 0, FN_PWM1_B, 0, FN_A5, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP4_23_20 [4] */
+		FN_DU0_DR4, FN_LCDOUT20, FN_RX1_D, 0, 0, 0, FN_A4, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP4_19_16 [4] */
+		FN_DU0_DR3, FN_LCDOUT19, FN_TX0_D, FN_SDA0_E, FN_PWM0_B, 0,
+		FN_A3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP4_15_12 [4] */
+		FN_DU0_DR2, FN_LCDOUT18, FN_RX0_D, FN_SCL0_E, 0, 0, FN_A2, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP4_11_8 [4] */
+		FN_DU0_DR1, FN_LCDOUT17, FN_TX5_C, FN_SDA2_D, 0, 0, FN_A1, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP4_7_4 [4] */
+		FN_DU0_DR0, FN_LCDOUT16, FN_RX5_C, FN_SCL2_D, 0, 0, FN_A0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP4_3_0 [4] */
+		FN_EX_WAIT0, FN_CAN_CLK_B, FN_SCIF_CLK_A, 0, FN_PWMFSW0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR5", 0xE6060054, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP5_31_28 [4] */
+		FN_DU0_DG6, FN_LCDOUT14, FN_HRX1_C, 0, 0, 0, FN_A14,  0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP5_27_24 [4] */
+		FN_DU0_DG5, FN_LCDOUT13, FN_HTX0_A, 0, FN_PWM5_B, 0, FN_A13,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP5_23_20 [4] */
+		FN_DU0_DG4, FN_LCDOUT12, FN_HRX0_A, 0, 0, 0, FN_A12, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP5_19_16 [4] */
+		FN_DU0_DG3, FN_LCDOUT11, FN_TX4_D, 0, FN_PWM4_B, 0, FN_A11, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP5_15_12 [4] */
+		FN_DU0_DG2, FN_LCDOUT10, FN_RX4_D, 0, 0, 0, FN_A10, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP5_11_8 [4] */
+		FN_DU0_DG1, FN_LCDOUT9, FN_TX3_B, FN_SDA3_D, FN_PWM3_B, 0,
+		FN_A9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP5_7_4 [4] */
+		FN_DU0_DG0, FN_LCDOUT8, FN_RX3_B, FN_SCL3_D, 0, 0, FN_A8, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP5_3_0 [4] */
+		FN_DU0_DR7, FN_LCDOUT23, FN_TX2_C, 0, FN_PWM2_B, 0, FN_A7, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR6", 0xE6060058, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP6_31_28 [4] */
+		FN_DU0_DB6, FN_LCDOUT6, 0, FN_RIF0_D0_B, 0, 0, FN_A22, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP6_27_24 [4] */
+		FN_DU0_DB5, FN_LCDOUT5, FN_HRTS1_N_C, FN_RIF0_SYNC_B, 0, 0,
+		FN_A21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP6_23_20 [4] */
+		FN_DU0_DB4, FN_LCDOUT4, FN_HCTS1_N_C, FN_RIF0_CLK_B, 0, 0,
+		FN_A20, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP6_19_16 [4] */
+		FN_DU0_DB3, FN_LCDOUT3, FN_HRTS0_N, 0, 0, 0, FN_A19, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP6_15_12 [4] */
+		FN_DU0_DB2, FN_LCDOUT2, FN_HCTS0_N, 0, 0, 0, FN_A18, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP6_11_8 [4] */
+		FN_DU0_DB1, FN_LCDOUT1, 0, FN_SDA4_D, FN_CAN0_TX_C, 0, FN_A17,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP6_7_4 [4] */
+		FN_DU0_DB0, FN_LCDOUT0, 0, FN_SCL4_D, FN_CAN0_RX_C, 0, FN_A16,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP6_3_0 [4] */
+		FN_DU0_DG7, FN_LCDOUT15, FN_HTX1_C, 0,  FN_PWM6_B, 0, FN_A15,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR7", 0xE606005C, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP7_31_28 [4] */
+		FN_DU0_DISP, FN_QPOLA, 0, 0, FN_CAN1_RX_C, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP7_27_24 [4] */
+		FN_DU0_EXODDF_DU0_ODDF_DISP_CDE, FN_QCPV_QDE, FN_MSIOF2_SCK_B,
+		0, 0, 0, FN_DRACK0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP7_23_20 [4] */
+		FN_DU0_EXVSYNC_DU0_VSYNC, FN_QSTB_QHE, FN_MSIOF2_SYNC_B, 0,
+		0, 0, FN_DACK0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP7_19_16 [4] */
+		FN_DU0_EXHSYNC_DU0_HSYNC, FN_QSTH_QHS, FN_MSIOF2_TXD_B, 0,
+		0, 0, FN_DREQ0_N, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP7_15_12 [4] */
+		FN_DU0_DOTCLKOUT1, FN_QSTVB_QVE, FN_MSIOF2_RXD_B, 0, 0, 0,
+		FN_CS1_N_A26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP7_11_8 [4] */
+		FN_DU0_DOTCLKOUT0, FN_QCLK, 0, 0, 0, 0, FN_A25, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP7_7_4 [4] */
+		FN_DU0_DOTCLKIN, FN_QSTVA_QVS, 0, 0, 0, 0, FN_A24, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP7_3_0 [4] */
+		FN_DU0_DB7, FN_LCDOUT7, 0, FN_RIF0_D1_B, 0, 0, FN_A23, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR8", 0xE6060060, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP8_31_28 [4] */
+		FN_VI1_DATA5, 0, 0, 0, FN_AVB_RXD4, FN_ETH_LINK, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP8_27_24 [4] */
+		FN_VI1_DATA4, 0, 0, 0, FN_AVB_RXD3, FN_ETH_RX_ER, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP8_23_20 [4] */
+		FN_VI1_DATA3, 0, 0, 0, FN_AVB_RXD2, FN_ETH_MDIO, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP8_19_16 [4] */
+		FN_VI1_DATA2, 0, 0, 0, FN_AVB_RXD1, FN_ETH_RXD1, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP8_15_12 [4] */
+		FN_VI1_DATA1, 0, 0, 0, FN_AVB_RXD0, FN_ETH_RXD0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP8_11_8 [4] */
+		FN_VI1_DATA0, 0, 0, 0, FN_AVB_RX_DV, FN_ETH_CRS_DV, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP8_7_4 [4] */
+		FN_VI1_CLK, 0, 0, 0, FN_AVB_RX_CLK, FN_ETH_REF_CLK, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP8_3_0 [4] */
+		FN_DU0_CDE, FN_QPOLB, 0, 0, FN_CAN1_TX_C, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR9", 0xE6060064, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP9_31_28 [4] */
+		FN_VI1_DATA9, 0, 0, FN_SDA2_B, FN_AVB_TXD0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP9_27_24 [4] */
+		FN_VI1_DATA8, 0, 0, FN_SCL2_B, FN_AVB_TX_EN, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP9_23_20 [4] */
+		FN_VI1_VSYNC_N, FN_TX0_B, FN_SDA0_C, FN_AUDIO_CLKOUT_B,
+		FN_AVB_TX_CLK, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP9_19_16 [4] */
+		FN_VI1_HSYNC_N, FN_RX0_B, FN_SCL0_C, 0, FN_AVB_GTXREFCLK,
+		FN_ETH_MDC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP9_15_12 [4] */
+		FN_VI1_FIELD, FN_SDA3_A, 0, 0, FN_AVB_RX_ER, FN_ETH_TXD0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP9_11_8 [4] */
+		FN_VI1_CLKENB, FN_SCL3_A, 0, 0, FN_AVB_RXD7, FN_ETH_MAGIC, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP9_7_4 [4] */
+		FN_VI1_DATA7, 0, 0, 0, FN_AVB_RXD6, FN_ETH_TX_EN, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP9_3_0 [4] */
+		FN_VI1_DATA6, 0, 0, 0, FN_AVB_RXD5, FN_ETH_TXD1, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR10", 0xE6060068, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP10_31_28 [4] */
+		FN_SCL1_A, FN_RX4_A, FN_PWM5_D, FN_DU1_DR0, 0, 0,
+		FN_SSI_SCK6_B, FN_VI0_G0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP10_27_24 [4] */
+		FN_SDA0_A, FN_TX0_C, FN_IRQ5, FN_CAN_CLK_A, FN_AVB_GTX_CLK,
+		FN_CAN1_TX_D, FN_DVC_MUTE, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP10_23_20 [4] */
+		FN_SCL0_A, FN_RX0_C, FN_PWM5_A, FN_TCLK1_B, FN_AVB_TXD6,
+		FN_CAN1_RX_D, FN_MSIOF0_SYNC_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP10_19_16 [4] */
+		FN_AVB_TXD5, FN_SCIF_CLK_B, FN_AUDIO_CLKC_B, 0,
+		FN_SSI_SDATA1_D, 0, FN_MSIOF0_SCK_B, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP10_15_12 [4] */
+		FN_AVB_TXD4,  0, FN_AUDIO_CLKB_B, 0, FN_SSI_WS1_D, FN_TX5_F,
+		FN_MSIOF0_TXD_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP10_11_8 [4] */
+		FN_AVB_TXD3, 0, FN_AUDIO_CLKA_B, 0, FN_SSI_SCK1_D, FN_RX5_F,
+		FN_MSIOF0_RXD_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP10_7_4 [4] */
+		FN_VI1_DATA11, 0, 0, FN_CAN0_TX_B, FN_AVB_TXD2, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0,
+		/* IP10_3_0 [4] */
+		FN_VI1_DATA10, 0, 0, FN_CAN0_RX_B, FN_AVB_TXD1, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR11", 0xE606006C, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP11_31_28 [4] */
+		FN_HRX1_A, FN_SCL4_A, FN_PWM6_A, FN_DU1_DG0, FN_RX0_A, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_27_24 [4] */
+		FN_MSIOF0_SS2_A, 0, FN_TS_SPSYNC0_A, FN_DU1_DR7, FN_RIF1_D1,
+		FN_QSPI1_SSL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_23_20 [4] */
+		FN_MSIOF0_SS1_A, 0, FN_TS_SDEN0_A, FN_DU1_DR6, FN_RIF1_D0,
+		FN_QSPI1_IO3, FN_SSI_SDATA8_B, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_19_16 [4] */
+		FN_MSIOF0_SYNC_A, FN_PWM1_A, FN_TS_SDAT0_A, FN_DU1_DR5,
+		FN_RIF1_SYNC, FN_QSPI1_IO2, FN_SSI_SDATA7_B, 0, 0, 0, 0, 0,
+		0, 0, 0, 0,
+		/* IP11_15_12 [4] */
+		FN_MSIOF0_SCK_A, FN_IRQ0, FN_TS_SCK0_A, FN_DU1_DR4,
+		FN_RIF1_CLK, FN_QSPI1_SPCLK, FN_SSI_SCK78_B, FN_VI0_G4,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_11_8 [4] */
+		FN_MSIOF0_TXD_A, FN_TX5_A, FN_SDA2_C, FN_DU1_DR3, 0,
+		FN_QSPI1_MISO_IO1, FN_SSI_WS78_B, FN_VI0_G3,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_7_4 [4] */
+		FN_MSIOF0_RXD_A, FN_RX5_A, FN_SCL2_C, FN_DU1_DR2, 0,
+		FN_QSPI1_MOSI_IO0, FN_SSI_SDATA6_B, FN_VI0_G2,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP11_3_0 [4] */
+		FN_SDA1_A, FN_TX4_A, 0, FN_DU1_DR1, 0, 0, FN_SSI_WS6_B,
+		FN_VI0_G1, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR12", 0xE6060070, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP12_31_28 [4] */
+		FN_SD2_DATA2, FN_RX2_A, 0, FN_DU1_DB0, FN_SSI_SDATA2_B, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_27_24 [4] */
+		FN_SD2_DATA1, FN_TX1_A, FN_SDA1_E, FN_DU1_DG7, FN_SSI_WS2_B,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_23_20 [4] */
+		FN_SD2_DATA0, FN_RX1_A, FN_SCL1_E, FN_DU1_DG6,
+		FN_SSI_SDATA1_B, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_19_16 [4] */
+		FN_SD2_CMD, FN_SCIF1_SCK_A, FN_TCLK2_A, FN_DU1_DG5,
+		FN_SSI_SCK2_B, FN_PWM3_A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_15_12 [4] */
+		FN_SD2_CLK, FN_HSCK1, 0, FN_DU1_DG4, FN_SSI_SCK1_B, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_11_8 [4] */
+		FN_HRTS1_N_A, 0, 0, FN_DU1_DG3, FN_SSI_WS1_B, FN_IRQ1, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_7_4 [4] */
+		FN_HCTS1_N_A, FN_PWM2_A, 0, FN_DU1_DG2, FN_REMOCON_B,
+		FN_SPEEDIN_B, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP12_3_0 [4] */
+		FN_HTX1_A, FN_SDA4_A, 0, FN_DU1_DG1, FN_TX0_A, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR13", 0xE6060074, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP13_31_28 [4] */
+		FN_SSI_SCK5_A, 0, 0, FN_DU1_DOTCLKOUT1, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP13_27_24 [4] */
+		FN_SDA2_A, 0, FN_MSIOF1_SYNC_B, FN_DU1_DB7, FN_AUDIO_CLKOUT_C,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP13_23_20 [4] */
+		FN_SCL2_A, 0, FN_MSIOF1_SCK_B, FN_DU1_DB6, FN_AUDIO_CLKC_C,
+		FN_SSI_SCK4_B, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP13_19_16 [4] */
+		FN_TX3_A, FN_SDA1_C, FN_MSIOF1_TXD_B, FN_DU1_DB5,
+		FN_AUDIO_CLKB_C, FN_SSI_WS4_B, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP13_15_12 [4] */
+		FN_RX3_A, FN_SCL1_C, FN_MSIOF1_RXD_B, FN_DU1_DB4,
+		FN_AUDIO_CLKA_C, FN_SSI_SDATA4_B, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0,
+		/* IP13_11_8 [4] */
+		FN_SD2_WP, FN_SCIF3_SCK_A, 0, FN_DU1_DB3, FN_SSI_SDATA9_B, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP13_7_4 [4] */
+		FN_SD2_CD, FN_SCIF2_SCK_A, 0, FN_DU1_DB2, FN_SSI_SCK9_B, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP13_3_0 [4] */
+		FN_SD2_DATA3, FN_TX2_A, 0, FN_DU1_DB1, FN_SSI_WS9_B, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR14", 0xE6060078, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP14_31_28 [4] */
+		FN_SSI_SDATA7_A, 0, 0, FN_IRQ8, FN_AUDIO_CLKA_D, FN_CAN_CLK_D,
+		FN_VI0_G5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP14_27_24 [4] */
+		FN_SSI_WS78_A, 0, FN_SCL4_E, FN_DU1_CDE, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0,
+		/* IP14_23_20 [4] */
+		FN_SSI_SCK78_A, 0, FN_SDA4_E, FN_DU1_DISP, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP14_19_16 [4] */
+		FN_SSI_SDATA6_A, 0, FN_SDA4_C, FN_DU1_EXVSYNC_DU1_VSYNC, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP14_15_12 [4] */
+		FN_SSI_WS6_A, 0, FN_SCL4_C, FN_DU1_EXHSYNC_DU1_HSYNC, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP14_11_8 [4] */
+		FN_SSI_SCK6_A, 0, 0, FN_DU1_EXODDF_DU1_ODDF_DISP_CDE, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP14_7_4 [4] */
+		FN_SSI_SDATA5_A, 0, FN_SDA3_C, FN_DU1_DOTCLKOUT0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP14_3_0 [4] */
+		FN_SSI_WS5_A, 0, FN_SCL3_C, FN_DU1_DOTCLKIN, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR15", 0xE606007C, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP15_31_28 [4] */
+		FN_SSI_WS4_A, 0, FN_AVB_PHY_INT, 0, 0, 0, FN_VI0_R5, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP15_27_24 [4] */
+		 FN_SSI_SCK4_A, 0, FN_AVB_MAGIC, 0, 0, 0, FN_VI0_R4, 0, 0, 0,
+		0, 0, 0, 0, 0, 0,
+		/* IP15_23_20 [4] */
+		FN_SSI_SDATA3, FN_MSIOF1_SS2_A, FN_AVB_LINK, 0, FN_CAN1_TX_A,
+		FN_DREQ2_N, FN_VI0_R3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP15_19_16 [4] */
+		FN_SSI_WS34, FN_MSIOF1_SS1_A, FN_AVB_MDIO, 0, FN_CAN1_RX_A,
+		FN_DREQ1_N, FN_VI0_R2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP15_15_12 [4] */
+		FN_SSI_SCK34, FN_MSIOF1_SCK_A, FN_AVB_MDC, 0, 0, FN_DACK1,
+		FN_VI0_R1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP15_11_8 [4] */
+		FN_SSI_SDATA0_A, FN_MSIOF1_SYNC_A, FN_PWM0_C, 0, 0, 0,
+		FN_VI0_R0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP15_7_4 [4] */
+		FN_SSI_WS0129_A, FN_MSIOF1_TXD_A, FN_TX5_D, 0, 0, 0,
+		FN_VI0_G7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP15_3_0 [4] */
+		FN_SSI_SCK0129_A, FN_MSIOF1_RXD_A, FN_RX5_D, 0, 0, 0,
+		FN_VI0_G6, 0, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR16", 0xE6060080, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP16_31_28 [4] */
+		FN_SSI_SDATA2_A, FN_HRTS1_N_B, 0, 0, 0, 0,
+		FN_VI0_DATA4_VI0_B4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_27_24 [4] */
+		FN_SSI_WS2_A, FN_HCTS1_N_B, 0, 0, 0, FN_AVB_TX_ER,
+		FN_VI0_DATA3_VI0_B3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_23_20 [4] */
+		FN_SSI_SCK2_A, FN_HTX1_B, 0, 0, 0, FN_AVB_TXD7,
+		FN_VI0_DATA2_VI0_B2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_19_16 [4] */
+		FN_SSI_SDATA1_A, FN_HRX1_B, 0, 0, 0, 0, FN_VI0_DATA1_VI0_B1,
+		0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_15_12 [4] */
+		FN_SSI_WS1_A, FN_TX1_B, 0, 0, FN_CAN0_TX_D,
+		FN_AVB_AVTP_MATCH_B, FN_VI0_DATA0_VI0_B0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0,
+		/* IP16_11_8 [4] */
+		FN_SSI_SDATA8_A, FN_RX1_B, 0, 0, FN_CAN0_RX_D,
+		FN_AVB_AVTP_CAPTURE_B, FN_VI0_R7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_7_4 [4] */
+		FN_SSI_SCK1_A, FN_SCIF1_SCK_B, FN_PWM1_D, FN_IRQ9, FN_REMOCON_A,
+		FN_DACK2, FN_VI0_CLK, FN_AVB_COL, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP16_3_0 [4] */
+		FN_SSI_SDATA4_A, 0, FN_AVB_CRS, 0, 0, 0, FN_VI0_R6, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("IPSR17", 0xE6060084, 32,
+			     4, 4, 4, 4, 4, 4, 4, 4) {
+		/* IP17_31_28 [4] */
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_27_24 [4] */
+		FN_AUDIO_CLKOUT_A, FN_SDA4_B, FN_TS_SPSYNC0_C, 0, 0, 0,
+		FN_VI0_VSYNC_N, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_23_20 [4] */
+		FN_AUDIO_CLKC_A, FN_SCL4_B, FN_TS_SDEN0_C, 0, 0, 0,
+		FN_VI0_HSYNC_N, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_19_16 [4] */
+		FN_AUDIO_CLKB_A, FN_SDA0_B, FN_TS_SCK0_C, FN_TANS2, 0, 0,
+		FN_VI0_FIELD, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_15_12 [4] */
+		FN_AUDIO_CLKA_A, FN_SCL0_B, FN_TS_SDAT0_C, FN_TANS1, 0, 0,
+		FN_VI0_CLKENB, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_11_8 [4] */
+		FN_SSI_SDATA9_A, FN_SCIF2_SCK_B, FN_PWM2_D, 0, 0, 0,
+		FN_VI0_DATA7_VI0_B7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_7_4 [4] */
+		FN_SSI_WS9_A, FN_TX2_B, FN_SDA3_E, 0, 0, 0,
+		FN_VI0_DATA6_VI0_B6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		/* IP17_3_0 [4] */
+		FN_SSI_SCK9_A, FN_RX2_B, FN_SCL3_E, 0, 0, FN_EX_WAIT1,
+		FN_VI0_DATA5_VI0_B5, 0, 0, 0, 0, 0, 0, 0, 0, 0, }
+	},
+	{ PINMUX_CFG_REG_VAR("MOD_SEL", 0xE60600C0, 32,
+			     1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 3, 3,
+				 1, 2, 3, 3, 1) {
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_ADGA [2] */
+		FN_SEL_ADGA_0, FN_SEL_ADGA_1, FN_SEL_ADGA_2, FN_SEL_ADGA_3,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_DR0 [1] */
+		FN_SEL_DR0_0, FN_SEL_DR0_1,
+		/* SEL_CANCLK [2] */
+		FN_SEL_CANCLK_0, FN_SEL_CANCLK_1, FN_SEL_CANCLK_2,
+		FN_SEL_CANCLK_3,
+		/* SEL_CAN1 [2] */
+		FN_SEL_CAN1_0, FN_SEL_CAN1_1, FN_SEL_CAN1_2, FN_SEL_CAN1_3,
+		/* SEL_CAN0 [2] */
+		FN_SEL_CAN0_0, FN_SEL_CAN0_1, FN_SEL_CAN0_2, FN_SEL_CAN0_3,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_I2C04 [3] */
+		FN_SEL_I2C04_0, FN_SEL_I2C04_1, FN_SEL_I2C04_2, FN_SEL_I2C04_3,
+		FN_SEL_I2C04_4, 0, 0, 0,
+		/* SEL_I2C03 [3] */
+		FN_SEL_I2C03_0, FN_SEL_I2C03_1, FN_SEL_I2C03_2, FN_SEL_I2C03_3,
+		FN_SEL_I2C03_4, 0, 0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_I2C02 [2] */
+		FN_SEL_I2C02_0, FN_SEL_I2C02_1, FN_SEL_I2C02_2, FN_SEL_I2C02_3,
+		/* SEL_I2C01 [3] */
+		FN_SEL_I2C01_0, FN_SEL_I2C01_1, FN_SEL_I2C01_2, FN_SEL_I2C01_3,
+		FN_SEL_I2C01_4, 0, 0, 0,
+		/* SEL_I2C00 [3] */
+		FN_SEL_I2C00_0, FN_SEL_I2C00_1, FN_SEL_I2C00_2, FN_SEL_I2C00_3,
+		FN_SEL_I2C00_4, 0, 0, 0,
+		/* SEL_AVB [1] */
+		FN_SEL_AVB_0, FN_SEL_AVB_1, }
+	},
+	{ PINMUX_CFG_REG_VAR("MOD_SEL1", 0xE60600C4, 32,
+			     1, 3, 3, 2, 2, 1, 2, 2,
+			     2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1) {
+		/* SEL_SCIFCLK [1] */
+		FN_SEL_SCIFCLK_0, FN_SEL_SCIFCLK_1,
+		/* SEL_SCIF5 [3] */
+		FN_SEL_SCIF5_0, FN_SEL_SCIF5_1, FN_SEL_SCIF5_2, FN_SEL_SCIF5_3,
+		FN_SEL_SCIF5_4, FN_SEL_SCIF5_5, 0, 0,
+		/* SEL_SCIF4 [3] */
+		FN_SEL_SCIF4_0, FN_SEL_SCIF4_1, FN_SEL_SCIF4_2, FN_SEL_SCIF4_3,
+		FN_SEL_SCIF4_4, 0, 0, 0,
+		/* SEL_SCIF3 [2] */
+		FN_SEL_SCIF3_0, FN_SEL_SCIF3_1, FN_SEL_SCIF3_2, 0,
+		0, 0, 0, 0,
+		/* SEL_SCIF2 [2] */
+		FN_SEL_SCIF2_0, FN_SEL_SCIF2_1, FN_SEL_SCIF2_2, 0,
+		/* SEL_SCIF2_CLK [1] */
+		FN_SEL_SCIF2_CLK_0, FN_SEL_SCIF2_CLK_1,
+		/* SEL_SCIF1 [2] */
+		FN_SEL_SCIF1_0, FN_SEL_SCIF1_1, FN_SEL_SCIF1_2, FN_SEL_SCIF1_3,
+		/* SEL_SCIF0 [2] */
+		FN_SEL_SCIF0_0, FN_SEL_SCIF0_1, FN_SEL_SCIF0_2, FN_SEL_SCIF0_3,
+		/* SEL_MSIOF2 [2] */
+		FN_SEL_MSIOF2_0, FN_SEL_MSIOF2_1, FN_SEL_MSIOF2_2, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_MSIOF1 [1] */
+		FN_SEL_MSIOF1_0, FN_SEL_MSIOF1_1,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_MSIOF0 [1] */
+		FN_SEL_MSIOF0_0, FN_SEL_MSIOF0_1,
+		/* SEL_RCN [1] */
+		FN_SEL_RCN_0, FN_SEL_RCN_1,
+		/* SEL_RSP [2] */
+		FN_SEL_RSP_0, FN_SEL_RSP_1, FN_SEL_RSP_2, 0,
+		/* SEL_TMU2 [1] */
+		FN_SEL_TMU2_0, FN_SEL_TMU2_1,
+		/* SEL_TMU1 [1] */
+		FN_SEL_TMU1_0, FN_SEL_TMU1_1,
+		/* SEL_TSIF [2] */
+		FN_SEL_TSIF_0, FN_SEL_TSIF_1, FN_SEL_TSIF_2, 0,
+		/* SEL_HSCIF1 [2] */
+		FN_SEL_HSCIF1_0, FN_SEL_HSCIF1_1, FN_SEL_HSCIF1_2, 0,
+		/* SEL_HSCIF0 [1] */
+		FN_SEL_HSCIF0_0, FN_SEL_HSCIF0_1,}
+	},
+	{ PINMUX_CFG_REG_VAR("MOD_SEL2", 0xE60600C8, 32,
+			     1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+				 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2) {
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* RESERVED [1] */
+		0, 0,
+		/* SEL_ADGB [2] */
+		FN_SEL_ADGB_0, FN_SEL_ADGB_1, FN_SEL_ADGB_2, 0,
+		/* SEL_ADGC [2] */
+		FN_SEL_ADGC_0, FN_SEL_ADGC_1, FN_SEL_ADGC_2, 0,
+		/* SEL_SSI9 [2] */
+		FN_SEL_SSI9_0, FN_SEL_SSI9_1, 0, 0,
+		/* SEL_SSI8 [2] */
+		FN_SEL_SSI8_0, FN_SEL_SSI8_1, 0, 0,
+		/* SEL_SSI7 [2] */
+		FN_SEL_SSI7_0, FN_SEL_SSI7_1, 0, 0,
+		/* SEL_SSI6 [2] */
+		FN_SEL_SSI6_0, FN_SEL_SSI6_1, 0, 0,
+		/* SEL_SSI5 [2] */
+		FN_SEL_SSI5_0, FN_SEL_SSI5_1, 0, 0,
+		/* SEL_SSI4 [2] */
+		FN_SEL_SSI4_0, FN_SEL_SSI4_1, 0, 0,
+		/* SEL_SSI2 [2] */
+		FN_SEL_SSI2_0, FN_SEL_SSI2_1, 0, 0,
+		/* SEL_SSI1 [2] */
+		FN_SEL_SSI1_0, FN_SEL_SSI1_1, FN_SEL_SSI1_2, FN_SEL_SSI1_3,
+		/* SEL_SSI0 [2] */
+		FN_SEL_SSI0_0, FN_SEL_SSI0_1, 0, 0, }
+	},
+	{ PINMUX_CFG_REG("INOUTSEL0", 0xE6050004, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_0_22_IN, GP_0_22_OUT,
+		GP_0_21_IN, GP_0_21_OUT,
+		GP_0_20_IN, GP_0_20_OUT,
+		GP_0_19_IN, GP_0_19_OUT,
+		GP_0_18_IN, GP_0_18_OUT,
+		GP_0_17_IN, GP_0_17_OUT,
+		GP_0_16_IN, GP_0_16_OUT,
+		GP_0_15_IN, GP_0_15_OUT,
+		GP_0_14_IN, GP_0_14_OUT,
+		GP_0_13_IN, GP_0_13_OUT,
+		GP_0_12_IN, GP_0_12_OUT,
+		GP_0_11_IN, GP_0_11_OUT,
+		GP_0_10_IN, GP_0_10_OUT,
+		GP_0_9_IN, GP_0_9_OUT,
+		GP_0_8_IN, GP_0_8_OUT,
+		GP_0_7_IN, GP_0_7_OUT,
+		GP_0_6_IN, GP_0_6_OUT,
+		GP_0_5_IN, GP_0_5_OUT,
+		GP_0_4_IN, GP_0_4_OUT,
+		GP_0_3_IN, GP_0_3_OUT,
+		GP_0_2_IN, GP_0_2_OUT,
+		GP_0_1_IN, GP_0_1_OUT,
+		GP_0_0_IN, GP_0_0_OUT, }
+	},
+	{ PINMUX_CFG_REG("INOUTSEL1", 0xE6051004, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_1_22_IN, GP_1_22_OUT,
+		GP_1_21_IN, GP_1_21_OUT,
+		GP_1_20_IN, GP_1_20_OUT,
+		GP_1_19_IN, GP_1_19_OUT,
+		GP_1_18_IN, GP_1_18_OUT,
+		GP_1_17_IN, GP_1_17_OUT,
+		GP_1_16_IN, GP_1_16_OUT,
+		GP_1_15_IN, GP_1_15_OUT,
+		GP_1_14_IN, GP_1_14_OUT,
+		GP_1_13_IN, GP_1_13_OUT,
+		GP_1_12_IN, GP_1_12_OUT,
+		GP_1_11_IN, GP_1_11_OUT,
+		GP_1_10_IN, GP_1_10_OUT,
+		GP_1_9_IN, GP_1_9_OUT,
+		GP_1_8_IN, GP_1_8_OUT,
+		GP_1_7_IN, GP_1_7_OUT,
+		GP_1_6_IN, GP_1_6_OUT,
+		GP_1_5_IN, GP_1_5_OUT,
+		GP_1_4_IN, GP_1_4_OUT,
+		GP_1_3_IN, GP_1_3_OUT,
+		GP_1_2_IN, GP_1_2_OUT,
+		GP_1_1_IN, GP_1_1_OUT,
+		GP_1_0_IN, GP_1_0_OUT, }
+	},
+	{ PINMUX_CFG_REG("INOUTSEL2", 0xE6052004, 32, 1) { GP_INOUTSEL(2) } },
+	{ PINMUX_CFG_REG("INOUTSEL3", 0xE6053004, 32, 1) {
+		0, 0,
+		0, 0,
+		GP_3_29_IN, GP_3_29_OUT,
+		GP_3_28_IN, GP_3_28_OUT,
+		GP_3_27_IN, GP_3_27_OUT,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_3_16_IN, GP_3_16_OUT,
+		GP_3_15_IN, GP_3_15_OUT,
+		GP_3_14_IN, GP_3_14_OUT,
+		GP_3_13_IN, GP_3_13_OUT,
+		GP_3_12_IN, GP_3_12_OUT,
+		GP_3_11_IN, GP_3_11_OUT,
+		GP_3_10_IN, GP_3_10_OUT,
+		GP_3_9_IN, GP_3_9_OUT,
+		GP_3_8_IN, GP_3_8_OUT,
+		GP_3_7_IN, GP_3_7_OUT,
+		GP_3_6_IN, GP_3_6_OUT,
+		GP_3_5_IN, GP_3_5_OUT,
+		GP_3_4_IN, GP_3_4_OUT,
+		GP_3_3_IN, GP_3_3_OUT,
+		GP_3_2_IN, GP_3_2_OUT,
+		GP_3_1_IN, GP_3_1_OUT,
+		GP_3_0_IN, GP_3_0_OUT, }
+	},
+	{ PINMUX_CFG_REG("INOUTSEL4", 0xE6054004, 32, 1) {
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0,
+		GP_4_25_IN, GP_4_25_OUT,
+		GP_4_24_IN, GP_4_24_OUT,
+		GP_4_23_IN, GP_4_23_OUT,
+		GP_4_22_IN, GP_4_22_OUT,
+		GP_4_21_IN, GP_4_21_OUT,
+		GP_4_20_IN, GP_4_20_OUT,
+		GP_4_19_IN, GP_4_19_OUT,
+		GP_4_18_IN, GP_4_18_OUT,
+		GP_4_17_IN, GP_4_17_OUT,
+		GP_4_16_IN, GP_4_16_OUT,
+		GP_4_15_IN, GP_4_15_OUT,
+		GP_4_14_IN, GP_4_14_OUT,
+		GP_4_13_IN, GP_4_13_OUT,
+		GP_4_12_IN, GP_4_12_OUT,
+		GP_4_11_IN, GP_4_11_OUT,
+		GP_4_10_IN, GP_4_10_OUT,
+		GP_4_9_IN, GP_4_9_OUT,
+		GP_4_8_IN, GP_4_8_OUT,
+		GP_4_7_IN, GP_4_7_OUT,
+		GP_4_6_IN, GP_4_6_OUT,
+		GP_4_5_IN, GP_4_5_OUT,
+		GP_4_4_IN, GP_4_4_OUT,
+		GP_4_3_IN, GP_4_3_OUT,
+		GP_4_2_IN, GP_4_2_OUT,
+		GP_4_1_IN, GP_4_1_OUT,
+		GP_4_0_IN, GP_4_0_OUT, }
+	},
+	{ PINMUX_CFG_REG("INOUTSEL5", 0xE6055004, 32, 1) { GP_INOUTSEL(5) } },
+	{ },
+};
+
+static struct pinmux_data_reg pinmux_data_regs[] = {
+	{ PINMUX_DATA_REG("INDT0", 0xE6050008, 32) {
+		0, 0, 0, 0,
+		0, 0, 0, 0,
+		0, GP_0_22_DATA, GP_0_21_DATA, GP_0_20_DATA,
+		GP_0_19_DATA, GP_0_18_DATA, GP_0_17_DATA, GP_0_16_DATA,
+		GP_0_15_DATA, GP_0_14_DATA, GP_0_13_DATA, GP_0_12_DATA,
+		GP_0_11_DATA, GP_0_10_DATA, GP_0_9_DATA, GP_0_8_DATA,
+		GP_0_7_DATA, GP_0_6_DATA, GP_0_5_DATA, GP_0_4_DATA,
+		GP_0_3_DATA, GP_0_2_DATA, GP_0_1_DATA, GP_0_0_DATA }
+	},
+	{ PINMUX_DATA_REG("INDT1", 0xE6051008, 32) {
+		0, 0, 0, 0,
+		0, 0, 0, 0,
+		0, GP_1_22_DATA, GP_1_21_DATA, GP_1_20_DATA,
+		GP_1_19_DATA, GP_1_18_DATA, GP_1_17_DATA, GP_1_16_DATA,
+		GP_1_15_DATA, GP_1_14_DATA, GP_1_13_DATA, GP_1_12_DATA,
+		GP_1_11_DATA, GP_1_10_DATA, GP_1_9_DATA, GP_1_8_DATA,
+		GP_1_7_DATA, GP_1_6_DATA, GP_1_5_DATA, GP_1_4_DATA,
+		GP_1_3_DATA, GP_1_2_DATA, GP_1_1_DATA, GP_1_0_DATA }
+	},
+	{ PINMUX_DATA_REG("INDT2", 0xE6052008, 32) { GP_INDT(2) } },
+	{ PINMUX_DATA_REG("INDT3", 0xE6053008, 32) {
+		0, 0, GP_3_29_DATA, GP_3_28_DATA,
+		GP_3_27_DATA, 0, 0, 0,
+		0, 0, 0, 0,
+		0, 0, 0, GP_3_16_DATA,
+		GP_3_15_DATA, GP_3_14_DATA, GP_3_13_DATA, GP_3_12_DATA,
+		GP_3_11_DATA, GP_3_10_DATA, GP_3_9_DATA, GP_3_8_DATA,
+		GP_3_7_DATA, GP_3_6_DATA, GP_3_5_DATA, GP_3_4_DATA,
+		GP_3_3_DATA, GP_3_2_DATA, GP_3_1_DATA, GP_3_0_DATA }
+
+	},
+	{ PINMUX_DATA_REG("INDT4", 0xE6054008, 32) {
+		0, 0, 0, 0,
+		0, 0, GP_4_25_DATA, GP_4_24_DATA,
+		GP_4_23_DATA, GP_4_22_DATA, GP_4_21_DATA, GP_4_20_DATA,
+		GP_4_19_DATA, GP_4_18_DATA, GP_4_17_DATA, GP_4_16_DATA,
+		GP_4_15_DATA, GP_4_14_DATA, GP_4_13_DATA, GP_4_12_DATA,
+		GP_4_11_DATA, GP_4_10_DATA, GP_4_9_DATA, GP_4_8_DATA,
+		GP_4_7_DATA, GP_4_6_DATA, GP_4_5_DATA, GP_4_4_DATA,
+		GP_4_3_DATA, GP_4_2_DATA, GP_4_1_DATA, GP_4_0_DATA }
+	},
+	{ PINMUX_DATA_REG("INDT5", 0xE6055008, 32) { GP_INDT(5) } },
+	{ },
+};
+
+static struct pinmux_info r8a7747x_pinmux_info = {
+	.name = "r8a7747x_pfc",
+
+	.unlock_reg = 0xe6060000, /* PMMR */
+
+	.reserved_id = PINMUX_RESERVED,
+	.data = { PINMUX_DATA_BEGIN, PINMUX_DATA_END },
+	.input = { PINMUX_INPUT_BEGIN, PINMUX_INPUT_END },
+	.output = { PINMUX_OUTPUT_BEGIN, PINMUX_OUTPUT_END },
+	.mark = { PINMUX_MARK_BEGIN, PINMUX_MARK_END },
+	.function = { PINMUX_FUNCTION_BEGIN, PINMUX_FUNCTION_END },
+
+	.first_gpio = GPIO_GP_0_0,
+	.last_gpio = GPIO_FN_VI0_VSYNC_N,
+
+	.gpios = pinmux_gpios,
+	.cfg_regs = pinmux_config_regs,
+	.data_regs = pinmux_data_regs,
+
+	.gpio_data = pinmux_data,
+	.gpio_data_size = ARRAY_SIZE(pinmux_data),
+};
+
+void r8a7747x_pinmux_init(void)
+{
+	register_pinmux(&r8a7747x_pinmux_info);
+}
diff --git a/arch/arm/include/asm/arch-rmobile/gpio.h b/arch/arm/include/asm/arch-rmobile/gpio.h
index 5e73e05..6fc03ca 100644
--- a/arch/arm/include/asm/arch-rmobile/gpio.h
+++ b/arch/arm/include/asm/arch-rmobile/gpio.h
@@ -25,6 +25,9 @@ void r8a7743_pinmux_init(void);
 #elif defined(CONFIG_R8A7745)
 #include "r8a7745-gpio.h"
 void r8a7745_pinmux_init(void);
+#elif defined(CONFIG_R8A7747X)
+#include "r8a7747x-gpio.h"
+void r8a7747x_pinmux_init(void);
 #endif
 
 #endif /* __ASM_ARCH_GPIO_H */
diff --git a/arch/arm/include/asm/arch-rmobile/r8a7747x-gpio.h b/arch/arm/include/asm/arch-rmobile/r8a7747x-gpio.h
new file mode 100644
index 0000000..c04bef9
--- /dev/null
+++ b/arch/arm/include/asm/arch-rmobile/r8a7747x-gpio.h
@@ -0,0 +1,287 @@
+#ifndef __ASM_R8A7747X_H__
+#define __ASM_R8A7747X_H__
+
+/* Pin Function Controller:
+ * GPIO_FN_xx - GPIO used to select pin function
+ * GPIO_GP_x_x - GPIO mapped to real I/O pin on CPU
+ */
+enum {
+	GPIO_GP_0_0, GPIO_GP_0_1, GPIO_GP_0_2, GPIO_GP_0_3,
+	GPIO_GP_0_4, GPIO_GP_0_5, GPIO_GP_0_6, GPIO_GP_0_7,
+	GPIO_GP_0_8, GPIO_GP_0_9, GPIO_GP_0_10, GPIO_GP_0_11,
+	GPIO_GP_0_12, GPIO_GP_0_13, GPIO_GP_0_14, GPIO_GP_0_15,
+	GPIO_GP_0_16, GPIO_GP_0_17, GPIO_GP_0_18, GPIO_GP_0_19,
+	GPIO_GP_0_20, GPIO_GP_0_21, GPIO_GP_0_22,
+
+	GPIO_GP_1_0, GPIO_GP_1_1, GPIO_GP_1_2, GPIO_GP_1_3,
+	GPIO_GP_1_4, GPIO_GP_1_5, GPIO_GP_1_6, GPIO_GP_1_7,
+	GPIO_GP_1_8, GPIO_GP_1_9, GPIO_GP_1_10, GPIO_GP_1_11,
+	GPIO_GP_1_12, GPIO_GP_1_13, GPIO_GP_1_14, GPIO_GP_1_15,
+	GPIO_GP_1_16, GPIO_GP_1_17, GPIO_GP_1_18, GPIO_GP_1_19,
+	GPIO_GP_1_20, GPIO_GP_1_21, GPIO_GP_1_22,
+
+	GPIO_GP_2_0, GPIO_GP_2_1, GPIO_GP_2_2, GPIO_GP_2_3,
+	GPIO_GP_2_4, GPIO_GP_2_5, GPIO_GP_2_6, GPIO_GP_2_7,
+	GPIO_GP_2_8, GPIO_GP_2_9, GPIO_GP_2_10, GPIO_GP_2_11,
+	GPIO_GP_2_12, GPIO_GP_2_13, GPIO_GP_2_14, GPIO_GP_2_15,
+	GPIO_GP_2_16, GPIO_GP_2_17, GPIO_GP_2_18, GPIO_GP_2_19,
+	GPIO_GP_2_20, GPIO_GP_2_21, GPIO_GP_2_22, GPIO_GP_2_23,
+	GPIO_GP_2_24, GPIO_GP_2_25, GPIO_GP_2_26, GPIO_GP_2_27,
+	GPIO_GP_2_28, GPIO_GP_2_29, GPIO_GP_2_30, GPIO_GP_2_31,
+
+	GPIO_GP_3_0, GPIO_GP_3_1, GPIO_GP_3_2, GPIO_GP_3_3,
+	GPIO_GP_3_4, GPIO_GP_3_5, GPIO_GP_3_6, GPIO_GP_3_7,
+	GPIO_GP_3_8, GPIO_GP_3_9, GPIO_GP_3_10, GPIO_GP_3_11,
+	GPIO_GP_3_12, GPIO_GP_3_13, GPIO_GP_3_14, GPIO_GP_3_15,
+	GPIO_GP_3_16, GPIO_GP_3_27, GPIO_GP_3_28, GPIO_GP_3_29,
+
+	GPIO_GP_4_0, GPIO_GP_4_1, GPIO_GP_4_2, GPIO_GP_4_3,
+	GPIO_GP_4_4, GPIO_GP_4_5, GPIO_GP_4_6, GPIO_GP_4_7,
+	GPIO_GP_4_8, GPIO_GP_4_9, GPIO_GP_4_10, GPIO_GP_4_11,
+	GPIO_GP_4_12, GPIO_GP_4_13, GPIO_GP_4_14, GPIO_GP_4_15,
+	GPIO_GP_4_16, GPIO_GP_4_17, GPIO_GP_4_18, GPIO_GP_4_19,
+	GPIO_GP_4_20, GPIO_GP_4_21, GPIO_GP_4_22, GPIO_GP_4_23,
+	GPIO_GP_4_24, GPIO_GP_4_25,
+
+	GPIO_GP_5_0, GPIO_GP_5_1, GPIO_GP_5_2, GPIO_GP_5_3,
+	GPIO_GP_5_4, GPIO_GP_5_5, GPIO_GP_5_6, GPIO_GP_5_7,
+	GPIO_GP_5_8, GPIO_GP_5_9, GPIO_GP_5_10, GPIO_GP_5_11,
+	GPIO_GP_5_12, GPIO_GP_5_13, GPIO_GP_5_14, GPIO_GP_5_15,
+	GPIO_GP_5_16, GPIO_GP_5_17, GPIO_GP_5_18, GPIO_GP_5_19,
+	GPIO_GP_5_20, GPIO_GP_5_21, GPIO_GP_5_22, GPIO_GP_5_23,
+	GPIO_GP_5_24, GPIO_GP_5_25, GPIO_GP_5_26, GPIO_GP_5_27,
+	GPIO_GP_5_28, GPIO_GP_5_29, GPIO_GP_5_30, GPIO_GP_5_31,
+
+	GPIO_FN_USB0_PWEN, GPIO_FN_USB0_OVC, GPIO_FN_USB1_PWEN,
+	GPIO_FN_USB1_OVC, GPIO_FN_CLKOUT, GPIO_FN_MMC0_CLK_SDHI1_CLK,
+	GPIO_FN_MMC0_CMD_SDHI1_CMD, GPIO_FN_MMC0_D0_SDHI1_D0,
+	GPIO_FN_MMC0_D1_SDHI1_D1, GPIO_FN_MMC0_D2_SDHI1_D2,
+	GPIO_FN_MMC0_D3_SDHI1_D3, GPIO_FN_MMC0_D6, GPIO_FN_MMC0_D7,
+
+	/* IPSR0 */
+	GPIO_FN_SD0_CLK, GPIO_FN_SSI_SCK1_C, GPIO_FN_RX3_C, GPIO_FN_SD0_CMD,
+	GPIO_FN_SSI_WS1_C, GPIO_FN_TX3_C, GPIO_FN_SD0_DATA0,
+	GPIO_FN_SSI_SDATA1_C, GPIO_FN_RX4_E, GPIO_FN_SD0_DATA1,
+	GPIO_FN_SSI_SCK0129_B, GPIO_FN_TX4_E, GPIO_FN_SD0_DATA2,
+	GPIO_FN_SSI_WS0129_B, GPIO_FN_RX5_E, GPIO_FN_SD0_DATA3,
+	GPIO_FN_SSI_SDATA0_B, GPIO_FN_TX5_E, GPIO_FN_SD0_CD,
+	GPIO_FN_CAN0_RX_A, GPIO_FN_SD0_WP, GPIO_FN_IRQ7, GPIO_FN_CAN0_TX_A,
+
+	/* IPSR1 */
+	GPIO_FN_MMC0_D4, GPIO_FN_SD1_CD, GPIO_FN_MMC0_D5, GPIO_FN_SD1_WP,
+	GPIO_FN_D0, GPIO_FN_RIF0_D0_A, GPIO_FN_SCL3_B, GPIO_FN_RX5_B,
+	GPIO_FN_IRQ4, GPIO_FN_MSIOF2_RXD_C, GPIO_FN_SSI_SDATA5_B,
+	GPIO_FN_D1, GPIO_FN_RIF0_D1_A, GPIO_FN_SDA3_B, GPIO_FN_TX5_B,
+	GPIO_FN_MSIOF2_TXD_C, GPIO_FN_SSI_WS5_B, GPIO_FN_D2,
+	GPIO_FN_RIF0_CLK_A, GPIO_FN_RX4_B, GPIO_FN_SCL0_D, GPIO_FN_PWM1_C,
+	GPIO_FN_MSIOF2_SCK_C, GPIO_FN_SSI_SCK5_B, GPIO_FN_D3,
+	GPIO_FN_RIF0_SYNC_A, GPIO_FN_TX4_B, GPIO_FN_SDA0_D,
+	GPIO_FN_PWM0_A, GPIO_FN_MSIOF2_SYNC_C, GPIO_FN_D4, GPIO_FN_IRQ3,
+	GPIO_FN_TCLK1_A, GPIO_FN_PWM6_C, GPIO_FN_TS_SDAT0_B, GPIO_FN_D5,
+	GPIO_FN_HRX2, GPIO_FN_SCL1_B, GPIO_FN_PWM2_C, GPIO_FN_TCLK2_B,
+	GPIO_FN_TS_SCK0_B,
+
+	/* IPSR2 */
+	GPIO_FN_D6, GPIO_FN_HTX2, GPIO_FN_SDA1_B, GPIO_FN_PWM4_C,
+	GPIO_FN_TS_SDEN0_B, GPIO_FN_D7, GPIO_FN_HSCK2, GPIO_FN_SCIF1_SCK_C,
+	GPIO_FN_IRQ6, GPIO_FN_PWM5_C, GPIO_FN_TS_SPSYNC0_B, GPIO_FN_D8,
+	GPIO_FN_HCTS2_N, GPIO_FN_RX1_C, GPIO_FN_SCL1_D, GPIO_FN_PWM3_C,
+	GPIO_FN_ADIDATA, GPIO_FN_D9, GPIO_FN_HRTS2_N, GPIO_FN_TX1_C,
+	GPIO_FN_SDA1_D, GPIO_FN_ADICS_SAMP, GPIO_FN_D10, GPIO_FN_MSIOF2_RXD_A,
+	GPIO_FN_HRX0_B, GPIO_FN_ADICLK, GPIO_FN_D11, GPIO_FN_MSIOF2_TXD_A,
+	GPIO_FN_HTX0_B, GPIO_FN_ADICHS0, GPIO_FN_D12, GPIO_FN_MSIOF2_SCK_A,
+	GPIO_FN_HSCK0, GPIO_FN_SPEEDIN_A, GPIO_FN_CAN_CLK_C, GPIO_FN_ADICHS1,
+	GPIO_FN_D13, GPIO_FN_MSIOF2_SYNC_A, GPIO_FN_RX4_C, GPIO_FN_ADICHS2,
+
+	/* IPSR3 */
+	GPIO_FN_D14, GPIO_FN_MSIOF2_SS1_A, GPIO_FN_TX4_C, GPIO_FN_CAN1_RX_B,
+	GPIO_FN_SPEEDIN_C, GPIO_FN_AVB_AVTP_CAPTURE_A, GPIO_FN_D15,
+	GPIO_FN_MSIOF2_SS2_A, GPIO_FN_PWM4_A, GPIO_FN_CAN1_TX_B,
+	GPIO_FN_IRQ2, GPIO_FN_AVB_AVTP_MATCH_A, GPIO_FN_QSPI0_SPCLK,
+	GPIO_FN_WE0_N, GPIO_FN_QSPI0_MOSI_IO0, GPIO_FN_BS_N,
+	GPIO_FN_QSPI0_MISO_IO1, GPIO_FN_RD_WR_N, GPIO_FN_QSPI0_IO2,
+	GPIO_FN_CS0_N, GPIO_FN_QSPI0_IO3, GPIO_FN_RD_N, GPIO_FN_QSPI0_SSL,
+	GPIO_FN_WE1_N,
+
+	/* IPSR4 */
+	GPIO_FN_EX_WAIT0, GPIO_FN_CAN_CLK_B, GPIO_FN_SCIF_CLK_A,
+	GPIO_FN_PWMFSW0, GPIO_FN_DU0_DR0, GPIO_FN_LCDOUT16, GPIO_FN_RX5_C,
+	GPIO_FN_SCL2_D, GPIO_FN_A0, GPIO_FN_DU0_DR1, GPIO_FN_LCDOUT17,
+	GPIO_FN_TX5_C, GPIO_FN_SDA2_D, GPIO_FN_A1, GPIO_FN_DU0_DR2,
+	GPIO_FN_LCDOUT18, GPIO_FN_RX0_D, GPIO_FN_SCL0_E, GPIO_FN_A2,
+	GPIO_FN_DU0_DR3, GPIO_FN_LCDOUT19, GPIO_FN_TX0_D, GPIO_FN_SDA0_E,
+	GPIO_FN_PWM0_B, GPIO_FN_A3, GPIO_FN_DU0_DR4, GPIO_FN_LCDOUT20,
+	GPIO_FN_RX1_D, GPIO_FN_A4, GPIO_FN_DU0_DR5, GPIO_FN_LCDOUT21,
+	GPIO_FN_TX1_D, GPIO_FN_PWM1_B, GPIO_FN_A5, GPIO_FN_DU0_DR6,
+	GPIO_FN_LCDOUT22, GPIO_FN_RX2_C, GPIO_FN_A6,
+
+	/* IPSR5 */
+	GPIO_FN_DU0_DR7, GPIO_FN_LCDOUT23, GPIO_FN_TX2_C, GPIO_FN_PWM2_B,
+	GPIO_FN_A7, GPIO_FN_DU0_DG0, GPIO_FN_LCDOUT8, GPIO_FN_RX3_B,
+	GPIO_FN_SCL3_D, GPIO_FN_A8, GPIO_FN_DU0_DG1, GPIO_FN_LCDOUT9,
+	GPIO_FN_TX3_B, GPIO_FN_SDA3_D, GPIO_FN_PWM3_B, GPIO_FN_A9,
+	GPIO_FN_DU0_DG2, GPIO_FN_LCDOUT10, GPIO_FN_RX4_D, GPIO_FN_A10,
+	GPIO_FN_DU0_DG3, GPIO_FN_LCDOUT11, GPIO_FN_TX4_D, GPIO_FN_PWM4_B,
+	GPIO_FN_A11, GPIO_FN_DU0_DG4, GPIO_FN_LCDOUT12, GPIO_FN_HRX0_A,
+	GPIO_FN_A12, GPIO_FN_DU0_DG5, GPIO_FN_LCDOUT13, GPIO_FN_HTX0_A,
+	GPIO_FN_PWM5_B, GPIO_FN_A13, GPIO_FN_DU0_DG6, GPIO_FN_LCDOUT14,
+	GPIO_FN_HRX1_C, GPIO_FN_A14,
+
+	/* IPSR6 */
+	GPIO_FN_DU0_DG7, GPIO_FN_LCDOUT15, GPIO_FN_HTX1_C, GPIO_FN_PWM6_B,
+	GPIO_FN_A15, GPIO_FN_DU0_DB0, GPIO_FN_LCDOUT0, GPIO_FN_SCL4_D,
+	GPIO_FN_CAN0_RX_C, GPIO_FN_A16, GPIO_FN_DU0_DB1, GPIO_FN_LCDOUT1,
+	GPIO_FN_SDA4_D, GPIO_FN_CAN0_TX_C, GPIO_FN_A17, GPIO_FN_DU0_DB2,
+	GPIO_FN_LCDOUT2, GPIO_FN_HCTS0_N, GPIO_FN_A18, GPIO_FN_DU0_DB3,
+	GPIO_FN_LCDOUT3, GPIO_FN_HRTS0_N, GPIO_FN_A19, GPIO_FN_DU0_DB4,
+	GPIO_FN_LCDOUT4, GPIO_FN_HCTS1_N_C, GPIO_FN_RIF0_CLK_B,
+	GPIO_FN_A20, GPIO_FN_DU0_DB5, GPIO_FN_LCDOUT5, GPIO_FN_HRTS1_N_C,
+	GPIO_FN_RIF0_SYNC_B, GPIO_FN_A21, GPIO_FN_DU0_DB6, GPIO_FN_LCDOUT6,
+	GPIO_FN_RIF0_D0_B, GPIO_FN_A22,
+
+	/* IPSR7 */
+	GPIO_FN_DU0_DB7, GPIO_FN_LCDOUT7, GPIO_FN_RIF0_D1_B, GPIO_FN_A23,
+	GPIO_FN_DU0_DOTCLKIN, GPIO_FN_QSTVA_QVS, GPIO_FN_A24,
+	GPIO_FN_DU0_DOTCLKOUT0, GPIO_FN_QCLK, GPIO_FN_A25,
+	GPIO_FN_DU0_DOTCLKOUT1, GPIO_FN_QSTVB_QVE, GPIO_FN_MSIOF2_RXD_B,
+	GPIO_FN_CS1_N_A26, GPIO_FN_DU0_EXHSYNC_DU0_HSYNC, GPIO_FN_QSTH_QHS,
+	GPIO_FN_MSIOF2_TXD_B, GPIO_FN_DREQ0_N,
+	GPIO_FN_DU0_EXVSYNC_DU0_VSYNC, GPIO_FN_QSTB_QHE,
+	GPIO_FN_MSIOF2_SYNC_B, GPIO_FN_DACK0,
+	GPIO_FN_DU0_EXODDF_DU0_ODDF_DISP_CDE, GPIO_FN_QCPV_QDE,
+	GPIO_FN_MSIOF2_SCK_B, GPIO_FN_DRACK0, GPIO_FN_DU0_DISP, GPIO_FN_QPOLA,
+	GPIO_FN_CAN1_RX_C,
+
+	/* IPSR8 */
+	GPIO_FN_DU0_CDE, GPIO_FN_QPOLB, GPIO_FN_CAN1_TX_C, GPIO_FN_VI1_CLK,
+	GPIO_FN_AVB_RX_CLK, GPIO_FN_ETH_REF_CLK, GPIO_FN_VI1_DATA0,
+	GPIO_FN_AVB_RX_DV, GPIO_FN_ETH_CRS_DV, GPIO_FN_VI1_DATA1,
+	GPIO_FN_AVB_RXD0, GPIO_FN_ETH_RXD0, GPIO_FN_VI1_DATA2,
+	GPIO_FN_AVB_RXD1, GPIO_FN_ETH_RXD1, GPIO_FN_VI1_DATA3,
+	GPIO_FN_AVB_RXD2, GPIO_FN_ETH_MDIO, GPIO_FN_VI1_DATA4,
+	GPIO_FN_AVB_RXD3, GPIO_FN_ETH_RX_ER, GPIO_FN_VI1_DATA5,
+	GPIO_FN_AVB_RXD4, GPIO_FN_ETH_LINK,
+
+	/* IPSR9 */
+	GPIO_FN_VI1_DATA6, GPIO_FN_AVB_RXD5, GPIO_FN_ETH_TXD1,
+	GPIO_FN_VI1_DATA7, GPIO_FN_AVB_RXD6, GPIO_FN_ETH_TX_EN,
+	GPIO_FN_VI1_CLKENB, GPIO_FN_SCL3_A, GPIO_FN_AVB_RXD7,
+	GPIO_FN_ETH_MAGIC, GPIO_FN_VI1_FIELD, GPIO_FN_SDA3_A,
+	GPIO_FN_AVB_RX_ER, GPIO_FN_ETH_TXD0, GPIO_FN_VI1_HSYNC_N,
+	GPIO_FN_RX0_B, GPIO_FN_SCL0_C, GPIO_FN_AVB_GTXREFCLK,
+	GPIO_FN_ETH_MDC, GPIO_FN_VI1_VSYNC_N, GPIO_FN_TX0_B,
+	GPIO_FN_SDA0_C, GPIO_FN_AUDIO_CLKOUT_B, GPIO_FN_AVB_TX_CLK,
+	GPIO_FN_VI1_DATA8, GPIO_FN_SCL2_B, GPIO_FN_AVB_TX_EN,
+	GPIO_FN_VI1_DATA9, GPIO_FN_SDA2_B, GPIO_FN_AVB_TXD0,
+
+	/* IPSR10 */
+	GPIO_FN_VI1_DATA10, GPIO_FN_CAN0_RX_B, GPIO_FN_AVB_TXD1,
+	GPIO_FN_VI1_DATA11, GPIO_FN_CAN0_TX_B, GPIO_FN_AVB_TXD2,
+	GPIO_FN_AVB_TXD3, GPIO_FN_AUDIO_CLKA_B, GPIO_FN_SSI_SCK1_D,
+	GPIO_FN_RX5_F, GPIO_FN_MSIOF0_RXD_B, GPIO_FN_AVB_TXD4,
+	GPIO_FN_AUDIO_CLKB_B, GPIO_FN_SSI_WS1_D, GPIO_FN_TX5_F,
+	GPIO_FN_MSIOF0_TXD_B, GPIO_FN_AVB_TXD5, GPIO_FN_SCIF_CLK_B,
+	GPIO_FN_AUDIO_CLKC_B, GPIO_FN_SSI_SDATA1_D, GPIO_FN_MSIOF0_SCK_B,
+	GPIO_FN_SCL0_A, GPIO_FN_RX0_C, GPIO_FN_PWM5_A, GPIO_FN_TCLK1_B,
+	GPIO_FN_AVB_TXD6, GPIO_FN_CAN1_RX_D, GPIO_FN_MSIOF0_SYNC_B,
+	GPIO_FN_SDA0_A, GPIO_FN_TX0_C, GPIO_FN_IRQ5, GPIO_FN_CAN_CLK_A,
+	GPIO_FN_AVB_GTX_CLK, GPIO_FN_CAN1_TX_D, GPIO_FN_DVC_MUTE,
+	GPIO_FN_SCL1_A, GPIO_FN_RX4_A, GPIO_FN_PWM5_D, GPIO_FN_DU1_DR0,
+	GPIO_FN_SSI_SCK6_B, GPIO_FN_VI0_G0,
+
+	/* IPSR11 */
+	GPIO_FN_SDA1_A, GPIO_FN_TX4_A, GPIO_FN_DU1_DR1, GPIO_FN_SSI_WS6_B,
+	GPIO_FN_VI0_G1, GPIO_FN_MSIOF0_RXD_A, GPIO_FN_RX5_A, GPIO_FN_SCL2_C,
+	GPIO_FN_DU1_DR2, GPIO_FN_QSPI1_MOSI_IO0, GPIO_FN_SSI_SDATA6_B,
+	GPIO_FN_VI0_G2, GPIO_FN_MSIOF0_TXD_A, GPIO_FN_TX5_A, GPIO_FN_SDA2_C,
+	GPIO_FN_DU1_DR3, GPIO_FN_QSPI1_MISO_IO1, GPIO_FN_SSI_WS78_B,
+	GPIO_FN_VI0_G3, GPIO_FN_MSIOF0_SCK_A, GPIO_FN_IRQ0,
+	GPIO_FN_TS_SCK0_A, GPIO_FN_DU1_DR4, GPIO_FN_RIF1_CLK,
+	GPIO_FN_QSPI1_SPCLK, GPIO_FN_SSI_SCK78_B, GPIO_FN_VI0_G4,
+	GPIO_FN_MSIOF0_SYNC_A, GPIO_FN_PWM1_A, GPIO_FN_TS_SDAT0_A,
+	GPIO_FN_DU1_DR5, GPIO_FN_RIF1_SYNC, GPIO_FN_QSPI1_IO2,
+	GPIO_FN_SSI_SDATA7_B, GPIO_FN_MSIOF0_SS1_A, GPIO_FN_TS_SDEN0_A,
+	GPIO_FN_DU1_DR6, GPIO_FN_RIF1_D0, GPIO_FN_QSPI1_IO3,
+	GPIO_FN_SSI_SDATA8_B, GPIO_FN_MSIOF0_SS2_A, GPIO_FN_TS_SPSYNC0_A,
+	GPIO_FN_DU1_DR7, GPIO_FN_RIF1_D1, GPIO_FN_QSPI1_SSL, GPIO_FN_HRX1_A,
+	GPIO_FN_SCL4_A, GPIO_FN_PWM6_A, GPIO_FN_DU1_DG0, GPIO_FN_RX0_A,
+
+	/* IPSR12 */
+	GPIO_FN_HTX1_A, GPIO_FN_SDA4_A, GPIO_FN_DU1_DG1, GPIO_FN_TX0_A,
+	GPIO_FN_HCTS1_N_A, GPIO_FN_PWM2_A, GPIO_FN_DU1_DG2, GPIO_FN_REMOCON_B,
+	GPIO_FN_SPEEDIN_B, GPIO_FN_HRTS1_N_A, GPIO_FN_DU1_DG3,
+	GPIO_FN_SSI_WS1_B, GPIO_FN_IRQ1, GPIO_FN_SD2_CLK, GPIO_FN_HSCK1,
+	GPIO_FN_DU1_DG4, GPIO_FN_SSI_SCK1_B, GPIO_FN_SD2_CMD,
+	GPIO_FN_SCIF1_SCK_A, GPIO_FN_TCLK2_A, GPIO_FN_DU1_DG5,
+	GPIO_FN_SSI_SCK2_B, GPIO_FN_PWM3_A, GPIO_FN_SD2_DATA0, GPIO_FN_RX1_A,
+	GPIO_FN_SCL1_E, GPIO_FN_DU1_DG6, GPIO_FN_SSI_SDATA1_B,
+	GPIO_FN_SD2_DATA1, GPIO_FN_TX1_A, GPIO_FN_SDA1_E, GPIO_FN_DU1_DG7,
+	GPIO_FN_SSI_WS2_B, GPIO_FN_SD2_DATA2, GPIO_FN_RX2_A, GPIO_FN_DU1_DB0,
+	GPIO_FN_SSI_SDATA2_B,
+
+	/* IPSR13 */
+	GPIO_FN_SD2_DATA3, GPIO_FN_TX2_A, GPIO_FN_DU1_DB1, GPIO_FN_SSI_WS9_B,
+	GPIO_FN_SD2_CD, GPIO_FN_SCIF2_SCK_A, GPIO_FN_DU1_DB2,
+	GPIO_FN_SSI_SCK9_B, GPIO_FN_SD2_WP, GPIO_FN_SCIF3_SCK_A,
+	GPIO_FN_DU1_DB3, GPIO_FN_SSI_SDATA9_B, GPIO_FN_RX3_A, GPIO_FN_SCL1_C,
+	GPIO_FN_MSIOF1_RXD_B, GPIO_FN_DU1_DB4, GPIO_FN_AUDIO_CLKA_C,
+	GPIO_FN_SSI_SDATA4_B, GPIO_FN_TX3_A, GPIO_FN_SDA1_C,
+	GPIO_FN_MSIOF1_TXD_B, GPIO_FN_DU1_DB5, GPIO_FN_AUDIO_CLKB_C,
+	GPIO_FN_SSI_WS4_B, GPIO_FN_SCL2_A, GPIO_FN_MSIOF1_SCK_B,
+	GPIO_FN_DU1_DB6, GPIO_FN_AUDIO_CLKC_C, GPIO_FN_SSI_SCK4_B,
+	GPIO_FN_SDA2_A, GPIO_FN_MSIOF1_SYNC_B, GPIO_FN_DU1_DB7,
+	GPIO_FN_AUDIO_CLKOUT_C, GPIO_FN_SSI_SCK5_A, GPIO_FN_DU1_DOTCLKOUT1,
+
+	/* IPSR14 */
+	GPIO_FN_SSI_WS5_A, GPIO_FN_SCL3_C, GPIO_FN_DU1_DOTCLKIN,
+	GPIO_FN_SSI_SDATA5_A, GPIO_FN_SDA3_C, GPIO_FN_DU1_DOTCLKOUT0,
+	GPIO_FN_SSI_SCK6_A, GPIO_FN_DU1_EXODDF_DU1_ODDF_DISP_CDE,
+	GPIO_FN_SSI_WS6_A, GPIO_FN_SCL4_C, GPIO_FN_DU1_EXHSYNC_DU1_HSYNC,
+	GPIO_FN_SSI_SDATA6_A, GPIO_FN_SDA4_C, GPIO_FN_DU1_EXVSYNC_DU1_VSYNC,
+	GPIO_FN_SSI_SCK78_A, GPIO_FN_SDA4_E, GPIO_FN_DU1_DISP,
+	GPIO_FN_SSI_WS78_A, GPIO_FN_SCL4_E, GPIO_FN_DU1_CDE,
+	GPIO_FN_SSI_SDATA7_A, GPIO_FN_IRQ8, GPIO_FN_AUDIO_CLKA_D,
+	GPIO_FN_CAN_CLK_D, GPIO_FN_VI0_G5,
+
+	/* IPSR15 */
+	GPIO_FN_SSI_SCK0129_A, GPIO_FN_MSIOF1_RXD_A, GPIO_FN_RX5_D,
+	GPIO_FN_VI0_G6, GPIO_FN_SSI_WS0129_A, GPIO_FN_MSIOF1_TXD_A,
+	GPIO_FN_TX5_D, GPIO_FN_VI0_G7, GPIO_FN_SSI_SDATA0_A,
+	GPIO_FN_MSIOF1_SYNC_A, GPIO_FN_PWM0_C, GPIO_FN_VI0_R0,
+	GPIO_FN_SSI_SCK34, GPIO_FN_MSIOF1_SCK_A, GPIO_FN_AVB_MDC,
+	GPIO_FN_DACK1, GPIO_FN_VI0_R1, GPIO_FN_SSI_WS34,
+	GPIO_FN_MSIOF1_SS1_A, GPIO_FN_AVB_MDIO, GPIO_FN_CAN1_RX_A,
+	GPIO_FN_DREQ1_N, GPIO_FN_VI0_R2, GPIO_FN_SSI_SDATA3,
+	GPIO_FN_MSIOF1_SS2_A, GPIO_FN_AVB_LINK, GPIO_FN_CAN1_TX_A,
+	GPIO_FN_DREQ2_N, GPIO_FN_VI0_R3, GPIO_FN_SSI_SCK4_A,
+	GPIO_FN_AVB_MAGIC, GPIO_FN_VI0_R4, GPIO_FN_SSI_WS4_A,
+	GPIO_FN_AVB_PHY_INT, GPIO_FN_VI0_R5,
+
+	/* IPSR16 */
+	GPIO_FN_SSI_SDATA4_A, GPIO_FN_AVB_CRS, GPIO_FN_VI0_R6,
+	GPIO_FN_SSI_SCK1_A, GPIO_FN_SCIF1_SCK_B, GPIO_FN_PWM1_D,
+	GPIO_FN_IRQ9, GPIO_FN_REMOCON_A, GPIO_FN_DACK2, GPIO_FN_VI0_CLK,
+	GPIO_FN_AVB_COL, GPIO_FN_SSI_SDATA8_A, GPIO_FN_RX1_B,
+	GPIO_FN_CAN0_RX_D, GPIO_FN_AVB_AVTP_CAPTURE_B, GPIO_FN_VI0_R7,
+	GPIO_FN_SSI_WS1_A, GPIO_FN_TX1_B, GPIO_FN_CAN0_TX_D,
+	GPIO_FN_AVB_AVTP_MATCH_B, GPIO_FN_VI0_DATA0_VI0_B0,
+	GPIO_FN_SSI_SDATA1_A, GPIO_FN_HRX1_B, GPIO_FN_VI0_DATA1_VI0_B1,
+	GPIO_FN_SSI_SCK2_A, GPIO_FN_HTX1_B, GPIO_FN_AVB_TXD7,
+	GPIO_FN_VI0_DATA2_VI0_B2, GPIO_FN_SSI_WS2_A, GPIO_FN_HCTS1_N_B,
+	GPIO_FN_AVB_TX_ER, GPIO_FN_VI0_DATA3_VI0_B3, GPIO_FN_SSI_SDATA2_A,
+	GPIO_FN_HRTS1_N_B, GPIO_FN_VI0_DATA4_VI0_B4,
+
+	/* IPSR17 */
+	GPIO_FN_SSI_SCK9_A, GPIO_FN_RX2_B, GPIO_FN_SCL3_E, GPIO_FN_EX_WAIT1,
+	GPIO_FN_VI0_DATA5_VI0_B5, GPIO_FN_SSI_WS9_A, GPIO_FN_TX2_B,
+	GPIO_FN_SDA3_E, GPIO_FN_VI0_DATA6_VI0_B6, GPIO_FN_SSI_SDATA9_A,
+	GPIO_FN_SCIF2_SCK_B, GPIO_FN_PWM2_D, GPIO_FN_VI0_DATA7_VI0_B7,
+	GPIO_FN_AUDIO_CLKA_A, GPIO_FN_SCL0_B, GPIO_FN_TS_SDAT0_C,
+	GPIO_FN_TANS1, GPIO_FN_VI0_CLKENB, GPIO_FN_AUDIO_CLKB_A,
+	GPIO_FN_SDA0_B, GPIO_FN_TS_SCK0_C, GPIO_FN_TANS2, GPIO_FN_VI0_FIELD,
+	GPIO_FN_AUDIO_CLKC_A, GPIO_FN_SCL4_B, GPIO_FN_TS_SDEN0_C,
+	GPIO_FN_VI0_HSYNC_N, GPIO_FN_AUDIO_CLKOUT_A, GPIO_FN_SDA4_B,
+	GPIO_FN_TS_SPSYNC0_C, GPIO_FN_VI0_VSYNC_N,
+};
+
+#endif /* __ASM_R8A7747X_H__ */
diff --git a/arch/arm/include/asm/arch-rmobile/r8a7747x.h b/arch/arm/include/asm/arch-rmobile/r8a7747x.h
new file mode 100644
index 0000000..c0dd8a7
--- /dev/null
+++ b/arch/arm/include/asm/arch-rmobile/r8a7747x.h
@@ -0,0 +1,619 @@
+/*
+ * arch/arm/include/asm/arch-rmobile/r8a7747x.h
+ *     This file is r8a77470 processor definition.
+ *
+ * Copyright (C) 2016 Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#ifndef __ASM_ARCH_R8A7747X_H
+#define __ASM_ARCH_R8A7747X_H
+
+/*
+ * R8A7747X I/O Addresses
+ */
+#define	RWDT_BASE		0xE6020000
+#define	SWDT_BASE		0xE6030000
+#define	LBSC_BASE		0xFEC00200
+#define DBSC3_0_BASE		0xE6790000
+#define DBSC3_1_BASE		0xE67A0000
+#define TMU_BASE		0xFFF60000
+#define	GPIO5_BASE		0xE6055000
+#define SDHI0_BASE		0xEE100000
+#define SDHI1_BASE		0xEE300000
+#define SDHI2_BASE		0xEE160000
+
+#define MSTPSR0			0xe6150030
+#define MSTPSR1			0xe6150038
+#define MSTPSR2			0xe6150040
+#define MSTPSR3			0xe6150048
+#define MSTPSR4			0xe615004C
+#define MSTPSR5			0xe615003C
+#define MSTPSR7			0xe61501C4
+#define MSTPSR8			0xe61509A0
+#define MSTPSR9			0xe61509A4
+#define MSTPSR10		0xe61509A8
+#define MSTPSR11		0xe61509AC
+#define RMSTPCR0		0xe6150110
+#define RMSTPCR1		0xe6150114
+#define RMSTPCR2		0xe6150118
+#define RMSTPCR3		0xe615011C
+#define RMSTPCR4		0xe6150120
+#define RMSTPCR5		0xe6150124
+#define RMSTPCR7		0xe615012C
+#define RMSTPCR8		0xe6150980
+#define RMSTPCR9		0xe6150984
+#define RMSTPCR10		0xe6150988
+#define RMSTPCR11		0xe615098C
+#define SMSTPCR0		0xe6150130
+#define SMSTPCR1		0xe6150134
+#define SMSTPCR2		0xe6150138
+#define SMSTPCR3		0xe615013C
+#define SMSTPCR4		0xe6150140
+#define SMSTPCR5		0xe6150144
+#define SMSTPCR7		0xe615014C
+#define SMSTPCR8		0xe6150990
+#define SMSTPCR9		0xe6150994
+#define SMSTPCR10		0xe6150998
+#define SMSTPCR11		0xe615099C
+
+#define S3C_BASE		0xE6784000
+#define S3C_INT_BASE		0xE6784A00
+#define S3C_MEDIA_BASE		0xE6784B00
+
+#define S3C_QOS_DCACHE_BASE	0xE6784BDC
+#define S3C_QOS_CCI0_BASE	0xE6784C00
+#define S3C_QOS_CCI1_BASE	0xE6784C24
+#define S3C_QOS_MXI_BASE	0xE6784C48
+#define S3C_QOS_AXI_BASE	0xE6784C6C
+
+#define DBSC3_0_QOS_R0_BASE	0xE6791000
+#define DBSC3_0_QOS_R1_BASE	0xE6791100
+#define DBSC3_0_QOS_R2_BASE	0xE6791200
+#define DBSC3_0_QOS_R3_BASE	0xE6791300
+#define DBSC3_0_QOS_R4_BASE	0xE6791400
+#define DBSC3_0_QOS_R5_BASE	0xE6791500
+#define DBSC3_0_QOS_R6_BASE	0xE6791600
+#define DBSC3_0_QOS_R7_BASE	0xE6791700
+#define DBSC3_0_QOS_R8_BASE	0xE6791800
+#define DBSC3_0_QOS_R9_BASE	0xE6791900
+#define DBSC3_0_QOS_R10_BASE	0xE6791A00
+#define DBSC3_0_QOS_R11_BASE	0xE6791B00
+#define DBSC3_0_QOS_R12_BASE	0xE6791C00
+#define DBSC3_0_QOS_R13_BASE	0xE6791D00
+#define DBSC3_0_QOS_R14_BASE	0xE6791E00
+#define DBSC3_0_QOS_R15_BASE	0xE6791F00
+#define DBSC3_0_QOS_W0_BASE	0xE6792000
+#define DBSC3_0_QOS_W1_BASE	0xE6792100
+#define DBSC3_0_QOS_W2_BASE	0xE6792200
+#define DBSC3_0_QOS_W3_BASE	0xE6792300
+#define DBSC3_0_QOS_W4_BASE	0xE6792400
+#define DBSC3_0_QOS_W5_BASE	0xE6792500
+#define DBSC3_0_QOS_W6_BASE	0xE6792600
+#define DBSC3_0_QOS_W7_BASE	0xE6792700
+#define DBSC3_0_QOS_W8_BASE	0xE6792800
+#define DBSC3_0_QOS_W9_BASE	0xE6792900
+#define DBSC3_0_QOS_W10_BASE	0xE6792A00
+#define DBSC3_0_QOS_W11_BASE	0xE6792B00
+#define DBSC3_0_QOS_W12_BASE	0xE6792C00
+#define DBSC3_0_QOS_W13_BASE	0xE6792D00
+#define DBSC3_0_QOS_W14_BASE	0xE6792E00
+#define DBSC3_0_QOS_W15_BASE	0xE6792F00
+
+#define DBSC3_0_DBADJ2		0xE67900C8
+#define DBSC3_0_DBCALTR		0xE67900F8
+
+#define CCI_400_MAXOT_1		0xF0091110
+#define CCI_400_MAXOT_2		0xF0092110
+#define CCI_400_QOSCNTL_1	0xF009110C
+#define CCI_400_QOSCNTL_2	0xF009210C
+
+#define	MXI_BASE		0xFE960000
+#define	MXI_VIN_QOS		0xFE96020C
+#define	MXI_QOS_BASE		0xFE960300
+
+#define SYS_AXI_SYX64TO128_BASE	0xFF800300
+#define SYS_AXI_AVB_BASE	0xFF800340
+#define SYS_AXI_G2D_BASE	0xFF800540
+#define SYS_AXI_IMP0_BASE	0xFF800580
+#define SYS_AXI_IMP1_BASE	0xFF8005C0
+#define SYS_AXI_IMUX0_BASE	0xFF800600
+#define SYS_AXI_IMUX1_BASE	0xFF800640
+#define SYS_AXI_IMUX2_BASE	0xFF800680
+#define SYS_AXI_LBS_BASE	0xFF8006C0
+#define SYS_AXI_MMUDS_BASE	0xFF800700
+#define SYS_AXI_MMUM_BASE	0xFF800740
+#define SYS_AXI_MMUR_BASE	0xFF800780
+#define SYS_AXI_MMUS0_BASE	0xFF8007C0
+#define SYS_AXI_MMUS1_BASE	0xFF800800
+#define SYS_AXI_MTSB0_BASE	0xFF800880
+#define SYS_AXI_MTSB1_BASE	0xFF8008C0
+#define SYS_AXI_PCI_BASE	0xFF800900
+#define SYS_AXI_RTX_BASE	0xFF800940
+#define SYS_AXI_SDS0_BASE	0xFF800A80
+#define SYS_AXI_SDS1_BASE	0xFF800AC0
+#define SYS_AXI_USB20_BASE	0xFF800C00
+#define SYS_AXI_USB21_BASE	0xFF800C40
+#define SYS_AXI_USB22_BASE	0xFF800C80
+#define SYS_AXI_USB30_BASE	0xFF800CC0
+#define SYS_AXI_AX2M_BASE	0xFF800380
+#define SYS_AXI_CC50_BASE	0xFF8003C0
+#define SYS_AXI_CCI_BASE	0xFF800440
+#define SYS_AXI_CS_BASE		0xFF800480
+#define SYS_AXI_DDM_BASE	0xFF8004C0
+#define SYS_AXI_ETH_BASE	0xFF800500
+#define SYS_AXI_MPXM_BASE	0xFF800840
+#define SYS_AXI_SAT0_BASE	0xFF800980
+#define SYS_AXI_SAT1_BASE	0xFF8009C0
+#define SYS_AXI_SDM0_BASE	0xFF800A00
+#define SYS_AXI_SDM1_BASE	0xFF800A40
+#define SYS_AXI_TRKF_BASE	0xFF800B00
+#define SYS_AXI_UDM0_BASE	0xFF800B80
+#define SYS_AXI_UDM1_BASE	0xFF800BC0
+
+#define RT_AXI_SHX_BASE		0xFF810100
+#define RT_AXI_DBG_BASE		0xFF810140
+#define RT_AXI_RDM_BASE		0xFF810180
+#define RT_AXI_RDS_BASE		0xFF8101C0
+#define RT_AXI_RTX64TO128_BASE	0xFF810200
+#define RT_AXI_STPRO_BASE	0xFF810240
+#define RT_AXI_SY2RT_BASE	0xFF810280
+
+#define MP_AXI_ADSP_BASE	0xFF820100
+#define MP_AXI_ASDS0_BASE	0xFF8201C0
+#define MP_AXI_ASDS1_BASE	0xFF820200
+#define MP_AXI_MLP_BASE		0xFF820240
+#define MP_AXI_MMUMP_BASE	0xFF820280
+#define MP_AXI_SPU_BASE		0xFF8202C0
+#define MP_AXI_SPUC_BASE	0xFF820300
+
+#define SYS_AXI256_AXI128TO256_BASE	0xFF860100
+#define SYS_AXI256_SYX_BASE	0xFF860140
+#define SYS_AXI256_MPX_BASE	0xFF860180
+#define SYS_AXI256_MXI_BASE	0xFF8601C0
+
+#define CCI_AXI_MMUS0_BASE	0xFF880100
+#define CCI_AXI_SYX2_BASE	0xFF880140
+#define CCI_AXI_MMUR_BASE	0xFF880180
+#define CCI_AXI_MMUDS_BASE	0xFF8801C0
+#define CCI_AXI_MMUM_BASE	0xFF880200
+#define CCI_AXI_MXI_BASE	0xFF880240
+#define CCI_AXI_MMUS1_BASE	0xFF880280
+#define CCI_AXI_MMUMP_BASE	0xFF8802C0
+
+#define MEDIA_AXI_MXR_BASE	0xFE960080
+#define MEDIA_AXI_MXW_BASE	0xFE9600C0
+#define MEDIA_AXI_JPR_BASE	0xFE964100
+#define MEDIA_AXI_JPW_BASE	0xFE966100
+#define MEDIA_AXI_GCU0R_BASE	0xFE964140
+#define MEDIA_AXI_GCU0W_BASE	0xFE966140
+#define MEDIA_AXI_GCU1R_BASE	0xFE964180
+#define MEDIA_AXI_GCU1W_BASE	0xFE966180
+#define MEDIA_AXI_TDMR_BASE	0xFE964500
+#define MEDIA_AXI_TDMW_BASE	0xFE966500
+#define MEDIA_AXI_VSP0CR_BASE	0xFE964540
+#define MEDIA_AXI_VSP0CW_BASE	0xFE966540
+#define MEDIA_AXI_VSP1CR_BASE	0xFE964580
+#define MEDIA_AXI_VSP1CW_BASE	0xFE966580
+#define MEDIA_AXI_VSPDU0CR_BASE	0xFE9645C0
+#define MEDIA_AXI_VSPDU0CW_BASE	0xFE9665C0
+#define MEDIA_AXI_VSPDU1CR_BASE	0xFE964600
+#define MEDIA_AXI_VSPDU1CW_BASE	0xFE966600
+#define MEDIA_AXI_VIN0W_BASE	0xFE966900
+#define MEDIA_AXI_VSP0R_BASE	0xFE964D00
+#define MEDIA_AXI_VSP0W_BASE	0xFE966D00
+#define MEDIA_AXI_FDP0R_BASE	0xFE964D40
+#define MEDIA_AXI_FDP0W_BASE	0xFE966D40
+#define MEDIA_AXI_IMSR_BASE	0xFE964D80
+#define MEDIA_AXI_IMSW_BASE	0xFE966D80
+#define MEDIA_AXI_VSP1R_BASE	0xFE965100
+#define MEDIA_AXI_VSP1W_BASE	0xFE967100
+#define MEDIA_AXI_FDP1R_BASE	0xFE965140
+#define MEDIA_AXI_FDP1W_BASE	0xFE967140
+#define MEDIA_AXI_IMRR_BASE	0xFE965180
+#define MEDIA_AXI_IMRW_BASE	0xFE967180
+#define MEDIA_AXI_FDP2R_BASE	0xFE9651C0
+#define MEDIA_AXI_FDP2W_BASE	0xFE966DC0
+#define MEDIA_AXI_VSPD0R_BASE	0xFE965500
+#define MEDIA_AXI_VSPD0W_BASE	0xFE967500
+#define MEDIA_AXI_VSPD1R_BASE	0xFE965540
+#define MEDIA_AXI_VSPD1W_BASE	0xFE967540
+#define MEDIA_AXI_DU0R_BASE	0xFE965580
+#define MEDIA_AXI_DU0W_BASE	0xFE967580
+#define MEDIA_AXI_DU1R_BASE	0xFE9655C0
+#define MEDIA_AXI_DU1W_BASE	0xFE9675C0
+#define MEDIA_AXI_VCP0CR_BASE	0xFE965900
+#define MEDIA_AXI_VCP0CW_BASE	0xFE967900
+#define MEDIA_AXI_VCP0VR_BASE	0xFE965940
+#define MEDIA_AXI_VCP0VW_BASE	0xFE967940
+#define MEDIA_AXI_VPC0R_BASE	0xFE965980
+#define MEDIA_AXI_VCP1CR_BASE	0xFE965D00
+#define MEDIA_AXI_VCP1CW_BASE	0xFE967D00
+#define MEDIA_AXI_VCP1VR_BASE	0xFE965D40
+#define MEDIA_AXI_VCP1VW_BASE	0xFE967D40
+#define MEDIA_AXI_VPC1R_BASE	0xFE965D80
+
+#define SYS_AXI_AVBDMSCR	0xFF802000
+#define SYS_AXI_SYX2DMSCR	0xFF802004
+#define SYS_AXI_CC50DMSCR	0xFF802008
+#define SYS_AXI_CC51DMSCR	0xFF80200C
+#define SYS_AXI_CCIDMSCR	0xFF802010
+#define SYS_AXI_CSDMSCR		0xFF802014
+#define SYS_AXI_DDMDMSCR	0xFF802018
+#define SYS_AXI_ETHDMSCR	0xFF80201C
+#define SYS_AXI_G2DDMSCR	0xFF802020
+#define SYS_AXI_IMP0DMSCR	0xFF802024
+#define SYS_AXI_IMP1DMSCR	0xFF802028
+#define SYS_AXI_LBSDMSCR	0xFF80202C
+#define SYS_AXI_MMUDSDMSCR	0xFF802030
+#define SYS_AXI_MMUMXDMSCR	0xFF802034
+#define SYS_AXI_MMURDDMSCR	0xFF802038
+#define SYS_AXI_MMUS0DMSCR	0xFF80203C
+#define SYS_AXI_MMUS1DMSCR	0xFF802040
+#define SYS_AXI_MPXDMSCR	0xFF802044
+#define SYS_AXI_MTSB0DMSCR	0xFF802048
+#define SYS_AXI_MTSB1DMSCR	0xFF80204C
+#define SYS_AXI_PCIDMSCR	0xFF802050
+#define SYS_AXI_RTXDMSCR	0xFF802054
+#define SYS_AXI_SAT0DMSCR	0xFF802058
+#define SYS_AXI_SAT1DMSCR	0xFF80205C
+#define SYS_AXI_SDM0DMSCR	0xFF802060
+#define SYS_AXI_SDM1DMSCR	0xFF802064
+#define SYS_AXI_SDS0DMSCR	0xFF802068
+#define SYS_AXI_SDS1DMSCR	0xFF80206C
+#define SYS_AXI_ETRABDMSCR	0xFF802070
+#define SYS_AXI_ETRKFDMSCR	0xFF802074
+#define SYS_AXI_UDM0DMSCR	0xFF802078
+#define SYS_AXI_UDM1DMSCR	0xFF80207C
+#define SYS_AXI_USB20DMSCR	0xFF802080
+#define SYS_AXI_USB21DMSCR	0xFF802084
+#define SYS_AXI_USB22DMSCR	0xFF802088
+#define SYS_AXI_USB30DMSCR	0xFF80208C
+#define SYS_AXI_X128TO64SLVDMSCR	0xFF802100
+#define SYS_AXI_X64TO128SLVDMSCR	0xFF802104
+#define SYS_AXI_AVBSLVDMSCR	0xFF802108
+#define SYS_AXI_SYX2SLVDMSCR	0xFF80210C
+#define SYS_AXI_ETHSLVDMSCR	0xFF802110
+#define SYS_AXI_GICSLVDMSCR	0xFF802114
+#define SYS_AXI_IMPSLVDMSCR	0xFF802118
+#define SYS_AXI_IMX0SLVDMSCR	0xFF80211C
+#define SYS_AXI_IMX1SLVDMSCR	0xFF802120
+#define SYS_AXI_IMX2SLVDMSCR	0xFF802124
+#define SYS_AXI_LBSSLVDMSCR	0xFF802128
+#define SYS_AXI_MMC0SLVDMSCR	0xFF80212C
+#define SYS_AXI_MMC1SLVDMSCR	0xFF802130
+#define SYS_AXI_MPXSLVDMSCR	0xFF802134
+#define SYS_AXI_MTSB0SLVDMSCR	0xFF802138
+#define SYS_AXI_MTSB1SLVDMSCR	0xFF80213C
+#define SYS_AXI_MXTSLVDMSCR	0xFF802140
+#define SYS_AXI_PCISLVDMSCR	0xFF802144
+#define SYS_AXI_SYAPBSLVDMSCR	0xFF802148
+#define SYS_AXI_QSAPBSLVDMSCR	0xFF80214C
+#define SYS_AXI_RTXSLVDMSCR	0xFF802150
+#define SYS_AXI_SAT0SLVDMSCR	0xFF802168
+#define SYS_AXI_SAT1SLVDMSCR	0xFF80216C
+#define SYS_AXI_SDAP0SLVDMSCR	0xFF802170
+#define SYS_AXI_SDAP1SLVDMSCR	0xFF802174
+#define SYS_AXI_SDAP2SLVDMSCR	0xFF802178
+#define SYS_AXI_SDAP3SLVDMSCR	0xFF80217C
+#define SYS_AXI_SGXSLVDMSCR	0xFF802180
+#define SYS_AXI_STBSLVDMSCR	0xFF802188
+#define SYS_AXI_STMSLVDMSCR	0xFF80218C
+#define SYS_AXI_TSPL0SLVDMSCR	0xFF802194
+#define SYS_AXI_TSPL1SLVDMSCR	0xFF802198
+#define SYS_AXI_TSPL2SLVDMSCR	0xFF80219C
+#define SYS_AXI_USB20SLVDMSCR	0xFF8021A0
+#define SYS_AXI_USB21SLVDMSCR	0xFF8021A4
+#define SYS_AXI_USB22SLVDMSCR	0xFF8021A8
+#define SYS_AXI_USB30SLVDMSCR	0xFF8021AC
+
+#define RT_AXI_CBMDMSCR		0xFF812000
+#define RT_AXI_DBDMSCR		0xFF812004
+#define RT_AXI_RDMDMSCR		0xFF812008
+#define RT_AXI_RDSDMSCR		0xFF81200C
+#define RT_AXI_STRDMSCR		0xFF812010
+#define RT_AXI_SY2RTDMSCR	0xFF812014
+#define RT_AXI_CBSSLVDMSCR	0xFF812100
+#define RT_AXI_DBSSLVDMSCR	0xFF812104
+#define RT_AXI_RTAP1SLVDMSCR	0xFF812108
+#define RT_AXI_RTAP2SLVDMSCR	0xFF81210C
+#define RT_AXI_RTAP3SLVDMSCR	0xFF812110
+#define RT_AXI_RT2SYSLVDMSCR	0xFF812114
+#define RT_AXI_A128TO64SLVDMSCR	0xFF812118
+#define RT_AXI_A64TO128SLVDMSCR	0xFF81211C
+#define RT_AXI_A64TO128CSLVDMSCR	0xFF812120
+#define RT_AXI_UTLBRSLVDMSCR	0xFF812128
+
+#define MP_AXI_ADSPDMSCR	0xFF822000
+#define MP_AXI_ASDM0DMSCR	0xFF822004
+#define MP_AXI_ASDM1DMSCR	0xFF822008
+#define MP_AXI_ASDS0DMSCR	0xFF82200C
+#define MP_AXI_ASDS1DMSCR	0xFF822010
+#define MP_AXI_MLPDMSCR		0xFF822014
+#define MP_AXI_MMUMPDMSCR	0xFF822018
+#define MP_AXI_SPUDMSCR		0xFF82201C
+#define MP_AXI_SPUCDMSCR	0xFF822020
+#define MP_AXI_SY2MPDMSCR	0xFF822024
+#define MP_AXI_ADSPSLVDMSCR	0xFF822100
+#define MP_AXI_MLMSLVDMSCR	0xFF822104
+#define MP_AXI_MPAP4SLVDMSCR	0xFF822108
+#define MP_AXI_MPAP5SLVDMSCR	0xFF82210C
+#define MP_AXI_MPAP6SLVDMSCR	0xFF822110
+#define MP_AXI_MPAP7SLVDMSCR	0xFF822114
+#define MP_AXI_MP2SYSLVDMSCR	0xFF822118
+#define MP_AXI_MP2SY2SLVDMSCR	0xFF82211C
+#define MP_AXI_MPXAPSLVDMSCR	0xFF822124
+#define MP_AXI_SPUSLVDMSCR	0xFF822128
+#define MP_AXI_UTLBMPSLVDMSCR	0xFF82212C
+
+#define ADM_AXI_ASDM0DMSCR	0xFF842000
+#define ADM_AXI_ASDM1DMSCR	0xFF842004
+#define ADM_AXI_MPAP1SLVDMSCR	0xFF842104
+#define ADM_AXI_MPAP2SLVDMSCR	0xFF842108
+#define ADM_AXI_MPAP3SLVDMSCR	0xFF84210C
+
+#define DM_AXI_RDMDMSCR		0xFF852000
+#define DM_AXI_SDM0DMSCR	0xFF852004
+#define DM_AXI_SDM1DMSCR	0xFF852008
+#define DM_AXI_MMAP0SLVDMSCR	0xFF852100
+#define DM_AXI_MMAP1SLVDMSCR	0xFF852104
+#define DM_AXI_QSPAPSLVDMSCR	0xFF852108
+#define DM_AXI_RAP4SLVDMSCR	0xFF85210C
+#define DM_AXI_RAP5SLVDMSCR	0xFF852110
+#define DM_AXI_SAP4SLVDMSCR	0xFF852114
+#define DM_AXI_SAP5SLVDMSCR	0xFF852118
+#define DM_AXI_SAP6SLVDMSCR	0xFF85211C
+#define DM_AXI_SAP65SLVDMSCR	0xFF852120
+#define DM_AXI_SDAP0SLVDMSCR	0xFF852124
+#define DM_AXI_SDAP1SLVDMSCR	0xFF852128
+#define DM_AXI_SDAP2SLVDMSCR	0xFF85212C
+#define DM_AXI_SDAP3SLVDMSCR	0xFF852130
+
+#define SYS_AXI256_SYXDMSCR	0xFF862000
+#define SYS_AXI256_MPXDMSCR	0xFF862004
+#define SYS_AXI256_MXIDMSCR	0xFF862008
+#define SYS_AXI256_X128TO256SLVDMSCR	0xFF862100
+#define SYS_AXI256_X256TO128SLVDMSCR	0xFF862104
+#define SYS_AXI256_SYXSLVDMSCR	0xFF862108
+#define SYS_AXI256_CCXSLVDMSCR	0xFF86210C
+#define SYS_AXI256_S3CSLVDMSCR	0xFF862110
+
+#define MXT_SYXDMSCR		0xFF872000
+#define MXT_CMM0SLVDMSCR	0xFF872100
+#define MXT_CMM1SLVDMSCR	0xFF872104
+#define MXT_CMM2SLVDMSCR	0xFF872108
+#define MXT_FDPSLVDMSCR		0xFF87210C
+#define MXT_IMRSLVDMSCR		0xFF872110
+#define MXT_VINSLVDMSCR		0xFF872114
+#define MXT_VPC0SLVDMSCR	0xFF872118
+#define MXT_VPC1SLVDMSCR	0xFF87211C
+#define MXT_VSP0SLVDMSCR	0xFF872120
+#define MXT_VSP1SLVDMSCR	0xFF872124
+#define MXT_VSPD0SLVDMSCR	0xFF872128
+#define MXT_VSPD1SLVDMSCR	0xFF87212C
+#define MXT_MAP1SLVDMSCR	0xFF872130
+#define MXT_MAP2SLVDMSCR	0xFF872134
+
+#define CCI_AXI_MMUS0DMSCR	0xFF882000
+#define CCI_AXI_SYX2DMSCR	0xFF882004
+#define CCI_AXI_MMURDMSCR	0xFF882008
+#define CCI_AXI_MMUDSDMSCR	0xFF88200C
+#define CCI_AXI_MMUMDMSCR	0xFF882010
+#define CCI_AXI_MXIDMSCR	0xFF882014
+#define CCI_AXI_MMUS1DMSCR	0xFF882018
+#define CCI_AXI_MMUMPDMSCR	0xFF88201C
+#define CCI_AXI_DVMDMSCR	0xFF882020
+#define CCI_AXI_CCISLVDMSCR	0xFF882100
+
+#define CCI_AXI_IPMMUIDVMCR	0xFF880400
+#define CCI_AXI_IPMMURDVMCR	0xFF880404
+#define CCI_AXI_IPMMUS0DVMCR	0xFF880408
+#define CCI_AXI_IPMMUS1DVMCR	0xFF88040C
+#define CCI_AXI_IPMMUMPDVMCR	0xFF880410
+#define CCI_AXI_IPMMUDSDVMCR	0xFF880414
+#define CCI_AXI_AX2ADDRMASK	0xFF88041C
+
+#ifndef __ASSEMBLY__
+#include <asm/types.h>
+
+/* RWDT */
+struct r8a7747x_rwdt {
+	u32 rwtcnt;	/* 0x00 */
+	u32 rwtcsra;	/* 0x04 */
+	u16 rwtcsrb;	/* 0x08 */
+};
+
+/* SWDT */
+struct r8a7747x_swdt {
+	u32 swtcnt;	/* 0x00 */
+	u32 swtcsra;	/* 0x04 */
+	u16 swtcsrb;	/* 0x08 */
+};
+
+/* LBSC */
+struct r8a7747x_lbsc {
+	u32 cs0ctrl;
+	u32 cs1ctrl;
+	u32 ecs0ctrl;
+	u32 ecs1ctrl;
+	u32 ecs2ctrl;
+	u32 ecs3ctrl;
+	u32 ecs4ctrl;
+	u32 ecs5ctrl;
+	u32 dummy0[4];	/* 0x20 .. 0x2C */
+	u32 cswcr0;
+	u32 cswcr1;
+	u32 ecswcr0;
+	u32 ecswcr1;
+	u32 ecswcr2;
+	u32 ecswcr3;
+	u32 ecswcr4;
+	u32 ecswcr5;
+	u32 exdmawcr0;
+	u32 exdmawcr1;
+	u32 exdmawcr2;
+	u32 dummy1[9];	/* 0x5C .. 0x7C */
+	u32 cspwcr0;
+	u32 cspwcr1;
+	u32 ecspwcr0;
+	u32 ecspwcr1;
+	u32 ecspwcr2;
+	u32 ecspwcr3;
+	u32 ecspwcr4;
+	u32 ecspwcr5;
+	u32 exwtsync;
+	u32 dummy2[3];	/* 0xA4 .. 0xAC */
+	u32 cs0bstctl;
+	u32 cs0btph;
+	u32 dummy3[2];	/* 0xB8 .. 0xBC */
+	u32 cs1gdst;
+	u32 ecs0gdst;
+	u32 ecs1gdst;
+	u32 ecs2gdst;
+	u32 ecs3gdst;
+	u32 ecs4gdst;
+	u32 ecs5gdst;
+	u32 dummy4[5];	/* 0xDC .. 0xEC */
+	u32 exdmaset0;
+	u32 exdmaset1;
+	u32 exdmaset2;
+	u32 dummy5[5];	/* 0xFC .. 0x10C */
+	u32 exdmcr0;
+	u32 exdmcr1;
+	u32 exdmcr2;
+	u32 dummy6[5];	/* 0x11C .. 0x12C */
+	u32 bcintsr;
+	u32 bcintcr;
+	u32 bcintmr;
+	u32 dummy7;	/* 0x13C */
+	u32 exbatlv;
+	u32 exwtsts;
+	u32 dummy8[14];	/* 0x148 .. 0x17C */
+	u32 atacsctrl;
+	u32 dummy9[15]; /* 0x184 .. 0x1BC */
+	u32 exbct;
+	u32 extct;
+};
+
+/* GPIO */
+struct r8a7747x_gpio {
+	u32 iointsel;
+	u32 inoutsel;
+	u32 outdt;
+	u32 indt;
+	u32 intdt;
+	u32 intclr;
+	u32 intmsk;
+	u32 posneg;
+	u32 edglevel;
+	u32 filonoff;
+	u32 intmsks;
+	u32 mskclrs;
+	u32 outdtsel;
+	u32 outdth;
+	u32 outdtl;
+	u32 bothedge;
+};
+
+/* S3C(QoS) */
+struct r8a7747x_s3c {
+	u32 s3cexcladdmsk;
+	u32 s3cexclidmsk;
+	u32 s3cadsplcr;
+	u32 s3cmaar;
+	u32 s3carcr11;
+	u32 s3crorr;
+	u32 s3cworr;
+	u32 s3carcr22;
+	u32 dummy1[2];	/* 0x20 .. 0x24 */
+	u32 s3cmctr;
+	u32 dummy2;	/* 0x2C */
+	u32 cconf0;
+	u32 cconf1;
+	u32 cconf2;
+	u32 cconf3;
+};
+
+struct r8a7747x_s3c_qos {
+	u32 s3cqos0;
+	u32 s3cqos1;
+	u32 s3cqos2;
+	u32 s3cqos3;
+	u32 s3cqos4;
+	u32 s3cqos5;
+	u32 s3cqos6;
+	u32 s3cqos7;
+	u32 s3cqos8;
+};
+
+/* DBSC(QoS) */
+struct r8a7747x_dbsc3_qos {
+	u32 dblgcnt;
+	u32 dbtmval0;
+	u32 dbtmval1;
+	u32 dbtmval2;
+	u32 dbtmval3;
+	u32 dbrqctr;
+	u32 dbthres0;
+	u32 dbthres1;
+	u32 dbthres2;
+	u32 dummy0;	/* 0x24 */
+	u32 dblgqon;
+};
+
+/* MXI(QoS) */
+struct r8a7747x_mxi {
+	u32 mxsaar0;
+	u32 mxsaar1;
+	u32 dummy0[7];	/* 0x08 .. 0x20 */
+	u32 mxaxiracr;
+	u32 mxs3cracr;
+	u32 dummy1[2];	/* 0x2C .. 0x30 */
+	u32 mxaxiwacr;
+	u32 mxs3cwacr;
+	u32 dummy2;	/* 0x3C */
+	u32 mxrtcr;
+	u32 mxwtcr;
+};
+
+struct r8a7747x_mxi_qos {
+	u32 vspdu0;
+	u32 vspdu1;
+	u32 du0;
+	u32 du1;
+};
+
+/* AXI(QoS) */
+struct r8a7747x_axi_qos {
+	u32 qosconf;
+	u32 qosctset0;
+	u32 qosctset1;
+	u32 qosctset2;
+	u32 qosctset3;
+	u32 qosreqctr;
+	u32 qosthres0;
+	u32 qosthres1;
+	u32 qosthres2;
+	u32 qosqon;
+};
+
+#endif
+
+/*
+ * R8A7747X I/O Product Information
+ */
+#define R8A7747X_CUT_ES2X		2
+
+#endif /* __ASM_ARCH_R8A7747X_H */
diff --git a/arch/arm/include/asm/arch-rmobile/rmobile.h b/arch/arm/include/asm/arch-rmobile/rmobile.h
index a00f47d..fd57aed 100644
--- a/arch/arm/include/asm/arch-rmobile/rmobile.h
+++ b/arch/arm/include/asm/arch-rmobile/rmobile.h
@@ -18,6 +18,8 @@
 #include <asm/arch/r8a7743.h>
 #elif defined(CONFIG_R8A7745)
 #include <asm/arch/r8a7745.h>
+#elif defined(CONFIG_R8A7747X)
+#include <asm/arch/r8a7747x.h>
 #else
 #error "SOC Name not defined"
 #endif
diff --git a/arch/arm/lib/bootm.c b/arch/arm/lib/bootm.c
index 234a2df..7dbb123 100644
--- a/arch/arm/lib/bootm.c
+++ b/arch/arm/lib/bootm.c
@@ -78,7 +78,8 @@ void arch_lmb_reserve(struct lmb *lmb)
 
 #ifdef CONFIG_OF_LIBFDT
 #if !(defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794))
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+ 	  defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X))
 static int fixup_memory_node(void *blob)
 {
 	bd_t	*bd = gd->bd;
@@ -263,7 +264,8 @@ static int create_fdt(bootm_headers_t *images)
 
 	fdt_chosen(*of_flat_tree, 1);
 #if !(defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794))
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	 defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X))
 	fixup_memory_node(*of_flat_tree);
 #endif
 	fdt_fixup_ethernet(*of_flat_tree);
diff --git a/arch/sh/lib/time.c b/arch/sh/lib/time.c
index 26f78b7..7f13e1b 100644
--- a/arch/sh/lib/time.c
+++ b/arch/sh/lib/time.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2013-2015  Renesas Electronics Corporation
  *
  * (C) Copyright 2009
  * Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
@@ -37,7 +37,8 @@
 
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) 
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -51,7 +52,8 @@ static unsigned long long overflow_ticks;
 
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) 
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 
 unsigned long get_tbclk(void)
 {
@@ -106,7 +108,8 @@ static void tmu_timer_stop(unsigned int timer)
 
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) 
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 
 int sh_timer_init(void)
 {
@@ -150,7 +153,8 @@ int timer_init(void)
 
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) 
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 
 unsigned long long get_ticks(void)
 {
diff --git a/drivers/mmc/sh_sdhi.c b/drivers/mmc/sh_sdhi.c
index 1f31aac..64c8a67 100644
--- a/drivers/mmc/sh_sdhi.c
+++ b/drivers/mmc/sh_sdhi.c
@@ -3,7 +3,7 @@
  *
  * SD/MMC driver.
  *
- * Copyright (C) 2011,2013-2015 Renesas Electronics Corporation
+ * Copyright (C) 2011,2013-2016 Renesas Electronics Corporation
  * Copyright (C) 2008-2009 Renesas Solutions Corp.
  *
  * This program is free software; you can redistribute it and/or modify
@@ -200,6 +200,9 @@ static void sdhi_sync_reset(struct sdhi_host *host)
 	defined(ALT_SDRAM_BASE) || defined(SKRZG1M_SDRAM_BASE) || defined(SKRZG1E_SDRAM_BASE)
 	if (host->ch == 0)
 		sdhi_writew(host, SDHI_HOST_MODE, 1);	/* 16bit access */
+#elif defined(ALEX_SDRAM_BASE) || defined(SKRZG1C_SDRAM_BASE)
+	if ((host->ch == 0) || (host->ch == 2))
+		sdhi_writew(host, SDHI_HOST_MODE, 1);	/* 16bit access */
 #else
 #error
 #endif
@@ -254,6 +257,7 @@ static int sdhi_single_read(struct sdhi_host *host, struct mmc_data *data)
 	long time;
 	unsigned short blocksize, i;
 	unsigned short *p = (unsigned short *)data->dest;
+	u64 *q = (u64 *)data->dest;
 
 	if ((unsigned long)p & 0x00000001) {
 		printf("%s: The data pointer is unaligned.", __func__);
@@ -272,8 +276,13 @@ static int sdhi_single_read(struct sdhi_host *host, struct mmc_data *data)
 
 	g_wait_int[ch] = 0;
 	blocksize = sdhi_readw(host, SDHI_SIZE);
-	for (i = 0; i < blocksize / 2; i++)
-		*p++ = sdhi_readw(host, SDHI_BUF0);
+
+	if (host->quirks & SH_SDHI_QUIRK_64BIT_BUF)
+		for (i = 0; i < blocksize / 8; i++)
+			*q++ = sdhi_readq(host, SDHI_BUF0);
+	else
+		for (i = 0; i < blocksize / 2; i++)
+			*p++ = sdhi_readw(host, SDHI_BUF0);
 
 	time = sdhi_wait_interrupt_flag(host);
 	if (time == 0 || g_sd_error[ch] != 0)
@@ -289,6 +298,7 @@ static int sdhi_multi_read(struct sdhi_host *host, struct mmc_data *data)
 	long time;
 	unsigned short blocksize, i, sec;
 	unsigned short *p = (unsigned short *)data->dest;
+	u64 *q = (u64 *)data->dest;
 
 	if ((unsigned long)p & 0x00000001) {
 		printf("%s: The data pointer is unaligned.", __func__);
@@ -310,8 +320,12 @@ static int sdhi_multi_read(struct sdhi_host *host, struct mmc_data *data)
 
 		g_wait_int[ch] = 0;
 		blocksize = sdhi_readw(host, SDHI_SIZE);
-		for (i = 0; i < blocksize / 2; i++)
-			*p++ = sdhi_readw(host, SDHI_BUF0);
+		if (host->quirks & SH_SDHI_QUIRK_64BIT_BUF)
+			for (i = 0; i < blocksize / 8; i++)
+				*q++ = sdhi_readq(host, SDHI_BUF0);
+		else
+			for (i = 0; i < blocksize / 2; i++)
+				*p++ = sdhi_readw(host, SDHI_BUF0);
 	}
 
 	return 0;
@@ -323,6 +337,7 @@ static int sdhi_single_write(struct sdhi_host *host, struct mmc_data *data)
 	long time;
 	unsigned short blocksize, i;
 	const unsigned short *p = (const unsigned short *)data->src;
+	const u64 *q = (const u64 *)data->src;
 
 	if ((unsigned long)p & 0x00000001) {
 		printf("%s: The data pointer is unaligned.", __func__);
@@ -345,8 +360,12 @@ static int sdhi_single_write(struct sdhi_host *host, struct mmc_data *data)
 
 	g_wait_int[ch] = 0;
 	blocksize = sdhi_readw(host, SDHI_SIZE);
-	for (i = 0; i < blocksize / 2; i++)
-		sdhi_writew(host, SDHI_BUF0, *p++);
+	if (host->quirks & SH_SDHI_QUIRK_64BIT_BUF)
+		for (i = 0; i < blocksize / 8; i++)
+			sdhi_writeq(host, SDHI_BUF0, *q++);
+	else
+		for (i = 0; i < blocksize / 2; i++)
+			sdhi_writew(host, SDHI_BUF0, *p++);
 
 	time = sdhi_wait_interrupt_flag(host);
 	if (time == 0 || g_sd_error[ch] != 0)
@@ -362,6 +381,7 @@ static int sdhi_multi_write(struct sdhi_host *host, struct mmc_data *data)
 	long time;
 	unsigned short i, sec, blocksize;
 	const unsigned short *p = (const unsigned short *)data->src;
+	const u64 *q = (const u64 *)data->src;
 
 	pr_debug("%s: blocks = %d, blocksize = %d\n",
 			__func__, data->blocks, data->blocksize);
@@ -378,8 +398,12 @@ static int sdhi_multi_write(struct sdhi_host *host, struct mmc_data *data)
 
 		g_wait_int[ch] = 0;
 		blocksize = sdhi_readw(host, SDHI_SIZE);
-		for (i = 0; i < blocksize / 2; i++)
-			sdhi_writew(host, SDHI_BUF0, *p++);
+		if (host->quirks & SH_SDHI_QUIRK_64BIT_BUF)
+			for (i = 0; i < blocksize / 8; i++)
+				sdhi_writeq(host, SDHI_BUF0, *q++);
+		else
+			for (i = 0; i < blocksize / 2; i++)
+				sdhi_writew(host, SDHI_BUF0, *p++);
 	}
 
 	return 0;
@@ -387,11 +411,11 @@ static int sdhi_multi_write(struct sdhi_host *host, struct mmc_data *data)
 
 static void sdhi_get_response(struct sdhi_host *host, struct mmc_cmd *cmd)
 {
-	unsigned short i, j;
-	volatile unsigned short resp[8];
-	volatile unsigned long *p1, *p2;
+	unsigned short i, j, cnt = 1;
+	unsigned short resp[8];
 
 	if (cmd->resp_type & MMC_RSP_136) {
+		cnt = 4;
 		resp[0] = sdhi_readw(host, SDHI_RSP00);
 		resp[1] = sdhi_readw(host, SDHI_RSP01);
 		resp[2] = sdhi_readw(host, SDHI_RSP02);
@@ -407,33 +431,30 @@ static void sdhi_get_response(struct sdhi_host *host, struct mmc_cmd *cmd)
 			resp[i] |= (resp[j--] >> 8) & 0x00ff;
 		}
 		resp[0] = (resp[0] << 8) & 0xff00;
-		/* SDHI REGISTER SPECIFICATION */
-
-		p1 = ((unsigned long *)resp) + 3;
-		p2 = (unsigned long *)cmd->response;
-#if defined(__BIG_ENDIAN_BITFIELD)
-		for (i = 0; i < 4; i++) {
-			*p2++ = ((*p1 >> 16) & 0x0000ffff) |
-					((*p1 << 16) & 0xffff0000);
-			p1--;
-		}
-#else
-		for (i = 0; i < 4; i++)
-			*p2++ = *p1--;
-#endif /* __BIG_ENDIAN_BITFIELD */
-
 	} else {
 		resp[0] = sdhi_readw(host, SDHI_RSP00);
 		resp[1] = sdhi_readw(host, SDHI_RSP01);
+	}
 
-		p1 = ((unsigned long *)resp);
-		p2 = (unsigned long *)cmd->response;
 #if defined(__BIG_ENDIAN_BITFIELD)
-		*p2 = ((*p1 >> 16) & 0x0000ffff) | ((*p1 << 16) & 0xffff0000);
+	if (cnt == 4) {
+		cmd->response[0] = (resp[6] << 16) | resp[7];
+		cmd->response[1] = (resp[4] << 16) | resp[5];
+		cmd->response[2] = (resp[2] << 16) | resp[3];
+		cmd->response[3] = (resp[0] << 16) | resp[1];
+	} else {
+		cmd->response[0] = (resp[0] << 16) | resp[1];
+	}
 #else
-		*p2 = *p1;
-#endif /* __BIG_ENDIAN_BITFIELD */
+	if (cnt == 4) {
+		cmd->response[0] = (resp[7] << 16) | resp[6];
+		cmd->response[1] = (resp[5] << 16) | resp[4];
+		cmd->response[2] = (resp[3] << 16) | resp[2];
+		cmd->response[3] = (resp[1] << 16) | resp[0];
+	} else {
+		cmd->response[0] = (resp[1] << 16) | resp[0];
 	}
+#endif /* __BIG_ENDIAN_BITFIELD */
 }
 
 static unsigned short sdhi_set_cmd(struct sdhi_host *host,
@@ -451,6 +472,15 @@ static unsigned short sdhi_set_cmd(struct sdhi_host *host,
 		else /* SD_SWITCH */
 			opc = SDHI_SD_SWITCH;
 		break;
+#ifdef CONFIG_SH_SDHI_MMC
+	case MMC_CMD_SEND_OP_COND:
+		opc = SDHI_MMC_SEND_OP_COND;
+		break;
+	case MMC_CMD_SEND_EXT_CSD:
+		if (data)
+			opc = SDHI_MMC_SEND_EXT_CSD;
+		break;
+#endif
 	default:
 		break;
 	}
@@ -475,6 +505,9 @@ static unsigned short sdhi_data_trans(struct sdhi_host *host,
 	case MMC_CMD_READ_SINGLE_BLOCK:
 	case SDHI_SD_APP_SEND_SCR:
 	case SDHI_SD_SWITCH: /* SD_SWITCH */
+#ifdef CONFIG_SH_SDHI_MMC
+	case SDHI_MMC_SEND_EXT_CSD:
+#endif
 		ret = sdhi_single_read(host, data);
 		break;
 	default:
@@ -624,12 +657,27 @@ static void sdhi_set_ios(struct mmc *mmc)
 		break;
 	}
 
+#ifdef CONFIG_SH_SDHI_MMC
+	if (mmc->bus_width == 8)
+		sdhi_writew(host, SDHI_OPTION,
+			OPT_BUS_WIDTH_8 | (~OPT_BUS_WIDTH_M &
+			sdhi_readw(host, SDHI_OPTION)));
+	else if (mmc->bus_width == 4)
+		sdhi_writew(host, SDHI_OPTION,
+			OPT_BUS_WIDTH_4 | (~OPT_BUS_WIDTH_M &
+			sdhi_readw(host, SDHI_OPTION)));
+	else
+		sdhi_writew(host, SDHI_OPTION,
+			OPT_BUS_WIDTH_1 | (~OPT_BUS_WIDTH_M &
+			sdhi_readw(host, SDHI_OPTION)));
+#else
 	if (mmc->bus_width == 4)
 		sdhi_writew(host, SDHI_OPTION, ~OPT_BUS_WIDTH_1 &
 					sdhi_readw(host, SDHI_OPTION));
 	else
 		sdhi_writew(host, SDHI_OPTION, OPT_BUS_WIDTH_1 |
 					sdhi_readw(host, SDHI_OPTION));
+#endif
 
 	pr_debug("clock = %d, buswidth = %d\n", mmc->clock, mmc->bus_width);
 }
@@ -656,8 +704,6 @@ int sdhi_mmc_init(unsigned long addr, int ch)
 
 	mmc->f_min = CLKDEV_INIT;
 	mmc->f_max = CLKDEV_HS_DATA;
-	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
-	mmc->host_caps = MMC_MODE_4BIT | MMC_MODE_HS;
 	memcpy(mmc->name, DRIVER_NAME, sizeof(DRIVER_NAME));
 	mmc->send_cmd = sdhi_request;
 	mmc->set_ios = sdhi_set_ios;
@@ -670,11 +716,25 @@ int sdhi_mmc_init(unsigned long addr, int ch)
 	else
 		host->bus_shift = 0;
 #elif defined(KOELSCH_SDRAM_BASE) || defined(GOSE_SDRAM_BASE) || \
-	defined(ALT_SDRAM_BASE) || defined(SKRZG1E_SDRAM_BASE) || defined(SKRZG1M_SDRAM_BASE)
+	      defined(ALT_SDRAM_BASE) || defined(SKRZG1E_SDRAM_BASE) || \
+		  defined(SKRZG1M_SDRAM_BASE)
 	if (ch == 0)
 		host->bus_shift = 1;
 	else
 		host->bus_shift = 0;
+#elif defined(ALEX_SDRAM_BASE) || defined(SKRZG1C_SDRAM_BASE)
+	if ((ch == 0) || (ch == 2)) {
+		host->quirks = SH_SDHI_QUIRK_16BIT_BUF;
+		host->bus_shift = 1;
+		mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
+		mmc->host_caps = MMC_MODE_4BIT | MMC_MODE_HS;
+	} else if (ch == 1) {
+		host->quirks = SH_SDHI_QUIRK_64BIT_BUF;
+		host->bus_shift = 2;
+		mmc->voltages = MMC_VDD_165_195 | MMC_VDD_32_33 | MMC_VDD_33_34;
+		mmc->host_caps = MMC_MODE_4BIT | MMC_MODE_8BIT | MMC_MODE_HS |
+				 MMC_MODE_HS_52MHz | MMC_MODE_HC;
+	}
 #else
 #error
 #endif
diff --git a/drivers/mmc/sh_sdhi.h b/drivers/mmc/sh_sdhi.h
index 4deded2..b2787d5 100644
--- a/drivers/mmc/sh_sdhi.h
+++ b/drivers/mmc/sh_sdhi.h
@@ -3,7 +3,7 @@
  *
  * SD/MMC driver.
  *
- * Copyright (C) 2013-2014 Renesas Electronics Corporation
+ * Copyright (C) 2013-2016 Renesas Electronics Corporation
  * Copyright (C) 2008-2009 Renesas Solutions Corp.
  *
  * This program is free software; you can redistribute it and/or modify
@@ -62,8 +62,10 @@
 /* SDHI CMD VALUE */
 #define CMD_MASK			0x0000ffff
 #define SDHI_APP			0x0040
+#define SDHI_MMC_SEND_OP_COND           0x0701
 #define SDHI_SD_APP_SEND_SCR		0x0073
 #define SDHI_SD_SWITCH			0x1C06
+#define SDHI_MMC_SEND_EXT_CSD           0x1C08
 
 /* SDHI_PORTSEL */
 #define USE_1PORT			(1 << 8)	/* 1 port */
@@ -132,7 +134,10 @@
 #define CLK_ENABLE			(1 << 8)
 
 /* SDHI_OPTION */
-#define OPT_BUS_WIDTH_1			(1 << 15)	/* bus width = 1 bit */
+#define OPT_BUS_WIDTH_M			(5 << 13)	/* 101b (15-13bit) */
+#define OPT_BUS_WIDTH_1			(4 << 13)	/* bus width = 1 bit */
+#define OPT_BUS_WIDTH_4			(0 << 13)	/* bus width = 4 bit */
+#define OPT_BUS_WIDTH_8			(1 << 13)	/* bus width = 8 bit */
 
 /* SDHI_ERR_STS1 */
 #define ERR_STS1_CRC_ERROR		((1 << 11) | (1 << 10) | (1 << 9) | \
@@ -173,6 +178,10 @@
 #define CLKDEV_MMC_DATA			20000000	/* 20MHz */
 #define	CLKDEV_INIT			400000		/* 100 - 400 KHz */
 
+/* For quirk */
+#define SH_SDHI_QUIRK_16BIT_BUF		(1 << 0)
+#define SH_SDHI_QUIRK_64BIT_BUF		(1 << 1)
+
 struct sdhi_host {
 	struct mmc	*mmc;
 	struct mmc_data	*data;
@@ -181,6 +190,7 @@ struct sdhi_host {
 	unsigned int	power_mode;
 	int		ch;
 	int		bus_shift;
+	unsigned long	quirks;
 };
 
 static unsigned short g_wait_int[CONFIG_MMC_SH_SDHI_NR_CHANNEL];
@@ -196,4 +206,13 @@ static inline u16 sdhi_readw(struct sdhi_host *host, int reg)
 	return readw(host->addr + (reg << host->bus_shift));
 }
 
+static inline void sdhi_writeq(struct sdhi_host *host, int reg, u64 val)
+{
+	*(volatile u64 *)(host->addr + (reg << host->bus_shift)) = val;
+}
+
+static inline u64 sdhi_readq(struct sdhi_host *host, int reg)
+{
+	return *(volatile u64 *)(host->addr + (reg << host->bus_shift));
+}
 #endif /* _SH_SDHI_H_ */
diff --git a/drivers/net/sh_eth.c b/drivers/net/sh_eth.c
index 4dda673..10dfacd 100644
--- a/drivers/net/sh_eth.c
+++ b/drivers/net/sh_eth.c
@@ -1,7 +1,7 @@
 /*
  * sh_eth.c - Driver for Renesas ethernet controler.
  *
- * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2013-2016  Renesas Electronics Corporation
  * Copyright (C) 2008, 2011 Renesas Solutions Corp.
  * Copyright (c) 2008, 2011 Nobuhiro Iwamatsu
  * Copyright (c) 2007 Carlos Munoz <carlos@kenati.com>
@@ -450,7 +450,8 @@ static int sh_eth_config(struct sh_eth_dev *eth, bd_t *bd)
 	phy = port_info->phydev;
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 	ret = phy_read(phy, MDIO_DEVAD_NONE, 0x1e);
 	ret &= ~0xc000;
 	ret |= 0x4000;
@@ -472,8 +473,10 @@ static int sh_eth_config(struct sh_eth_dev *eth, bd_t *bd)
 #elif defined(CONFIG_CPU_SH7757) || defined(CONFIG_CPU_SH7752)
 		sh_eth_write(eth, 1, RTRATE);
 #elif defined(CONFIG_CPU_SH7724) || defined(CONFIG_R8A7790) || \
-		defined(CONFIG_R8A7791) || defined(CONFIG_R8A7793) || \
-		defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+		 defined(CONFIG_R8A7791) || defined(CONFIG_R8A7793) || \
+		 defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+		 defined(CONFIG_R8A7794) || defined(CONFIG_R8A7794X)|| \
+		 defined(CONFIG_R8A7747X)
 		val = ECMR_RTM;
 #endif
 	} else if (phy->speed == 10) {
diff --git a/drivers/net/sh_eth.h b/drivers/net/sh_eth.h
index cd4b7b7..9f5427b 100644
--- a/drivers/net/sh_eth.h
+++ b/drivers/net/sh_eth.h
@@ -1,7 +1,7 @@
 /*
  * sh_eth.h - Driver for Renesas SuperH ethernet controler.
  *
- * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2013-2015  Renesas Electronics Corporation
  * Copyright (C) 2008 - 2012 Renesas Solutions Corp.
  * Copyright (c) 2008 - 2012 Nobuhiro Iwamatsu
  * Copyright (c) 2007 Carlos Munoz <carlos@kenati.com>
@@ -320,8 +320,9 @@ static const u16 sh_eth_offset_fast_sh4[SH_ETH_MAX_REGISTER_OFFSET] = {
 #define SH_ETH_TYPE_GETHER
 #define BASE_IO_ADDR	0xE9A00000
 #elif defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) ||\
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	  defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	  defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 #define SH_ETH_TYPE_ETHER
 #define BASE_IO_ADDR	0xEE700200
 #endif
@@ -521,8 +522,9 @@ enum FELIC_MODE_BIT {
 #ifdef CONFIG_CPU_SH7724
 	ECMR_RTM = 0x00000010,
 #elif defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	  defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	  defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 	ECMR_RTM = 0x00000004,
 #endif
 
diff --git a/drivers/serial/serial_sh.c b/drivers/serial/serial_sh.c
index 0842ec2..edfaae2 100644
--- a/drivers/serial/serial_sh.c
+++ b/drivers/serial/serial_sh.c
@@ -1,6 +1,6 @@
 /*
  * SuperH SCIF device driver.
- * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2013-2015  Renesas Electronics Corporation
  * Copyright (C) 2007,2008,2010 Nobuhiro Iwamatsu
  * Copyright (C) 2002 - 2008  Paul Mundt
  *
@@ -63,7 +63,8 @@ static void sh_serial_setbrg(void)
 	DECLARE_GLOBAL_DATA_PTR;
 #if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
 	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 #ifdef CONFIG_SCIF_USE_EXT_CLK
 	sci_out(&sh_sci, DL, DL_VALUE(gd->baudrate, CONFIG_SCIF_CLK_FREQ));
 	udelay((1000000 * 2 * 16 / CONFIG_SYS_CLK_FREQ) * 1000 + 1);
diff --git a/drivers/serial/serial_sh.h b/drivers/serial/serial_sh.h
index fe9bf8d..84b4de5 100644
--- a/drivers/serial/serial_sh.h
+++ b/drivers/serial/serial_sh.h
@@ -225,8 +225,9 @@ struct uart_port {
 # define SCIF_ORER 0x0001		/* Overrun error bit */
 # define SCSCR_INIT(port)	0x38	/* TIE=0,RIE=0,TE=1,RE=1,REIE=1 */
 #elif defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	  defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	  defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 # define SCIF_ORER	0x0001
 #ifdef CONFIG_SCIF_USE_EXT_CLK
 	# define SCSCR_INIT(port)	0x32	/* TIE=0,RIE=0,TE=1,RE=1,REIE=0, */
@@ -607,6 +608,12 @@ SCIF_FNS(SCSPTR,                        0,  0, 0, 0)
 #else
 SCIF_FNS(SCSPTR,                        0,  0, 0x20, 16)
 #endif
+#if defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
+	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
+SCIF_FNS(DL,				0,  0, 0x30, 16)
+SCIF_FNS(CKS,				0,  0, 0x34, 16)
+#endif
 SCIF_FNS(SCLSR,                         0,  0, 0x24, 16)
 #endif
 #endif
@@ -749,8 +756,9 @@ static inline int scbrr_calc(struct uart_port port, int bps, int clk)
 #elif defined(__H8300H__) || defined(__H8300S__)
 #define SCBRR_VALUE(bps, clk) (((clk*1000/32)/bps)-1)
 #elif defined(CONFIG_R8A7790) || defined(CONFIG_R8A7791) || \
-	defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
-	defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745)
+	  defined(CONFIG_R8A7793) || defined(CONFIG_R8A7794) || \
+	  defined(CONFIG_R8A7743) || defined(CONFIG_R8A7745) || \
+	  defined(CONFIG_R8A7794X)|| defined(CONFIG_R8A7747X)
 #define DL_VALUE(bps, clk) (clk / bps / 16) /* External Clock */
 #define SCBRR_VALUE(bps, clk) (clk / bps / 32 - 1) /* Internal Clock */
 #else /* Generic SH */
diff --git a/drivers/usb/host/ehci-r8a779x.c b/drivers/usb/host/ehci-r8a779x.c
index 8b8c9f1..289d81b 100644
--- a/drivers/usb/host/ehci-r8a779x.c
+++ b/drivers/usb/host/ehci-r8a779x.c
@@ -1,7 +1,7 @@
 /*
  *  EHCI HCD (Host Controller Driver) for USB.
  *
- *  Copyright (C) 2013-2014 Renesas Electronics Corporation
+ *  Copyright (C) 2013-2015 Renesas Electronics Corporation
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License version 2
@@ -34,11 +34,31 @@
 #define PHYS_OFFSET	SKRZG1E_SDRAM_BASE
 #elif defined(SKRZG1M_SDRAM_BASE)
 #define PHYS_OFFSET	SKRZG1M_SDRAM_BASE
+#elif defined(SKRZG1C_SDRAM_BASE)
+#define PHYS_OFFSET	SKRZG1C_SDRAM_BASE
 #else
 #error
 #endif
 
-#define SMSTPCR703      0x08
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+/* USB High-Speed Module (HS-USB) */
+#define REG_LPSTS       0x0102		/* 16bit */
+#define SUSPM           0x4000
+#define SUSPM_SUSPEND   0x0000
+#define SUSPM_NORMAL    0x4000
+#define REG_UGCTRL      0x0180		/* 32bit */
+#define PLLRESET        0x00000001
+#define REG_UGCTRL2     0x0184		/* 32bit */
+#define USB0SEL         0x00000030
+#define USB0SEL_EHCI    0x00000010
+#define USB0SEL_HSUSB   0x00000020
+#define USB0SEL_OTG     0x00000030
+#endif
+
+#define SMSTPCR703      (0x1 << 3)
+#define SMSTPCR704      (0x1 << 4)
+#define SMSTPCR705      (0x1 << 5)
+#define SMSTPCR706      (0x1 << 6)
 
 static u32 usb_base_address[CONFIG_USB_MAX_CONTROLLER_COUNT] = {
 	0xee080000,	/* USB0 (EHCI) */
@@ -48,6 +68,13 @@ static u32 usb_base_address[CONFIG_USB_MAX_CONTROLLER_COUNT] = {
 	0xee0c0000,	/* USB2 */
 };
 
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+static u32 hsusb_base_address[CONFIG_USB_MAX_CONTROLLER_COUNT] = {
+	0xE6590000,	/* HS-USB (Channel 0) */
+	0xE6598000,	/* HS-USB (Channel 1) */
+};
+#endif
+
 int ehci_hcd_stop(int index)
 {
 	u32 data;
@@ -56,7 +83,9 @@ int ehci_hcd_stop(int index)
 
 	base = usb_base_address[index];
 
+#if !(defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X))
 	writel(0, base + AHB_BUS_CTR);
+#endif
 
 	/* reset ehci */
 	data = readl(base + EHCI_USBCMD);
@@ -72,24 +101,66 @@ int ehci_hcd_stop(int index)
 	if (i == 100)
 		printf("error : ehci(%d) reset failed.\n", index);
 
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+	switch (index) {
+	case 0:
+		/* Stops supply of EHCI0 clock signal */
+		setbits_le32(SMSTPCR7, SMSTPCR703);
+		/* Stops supply of USBHS0 clock signal */
+		setbits_le32(SMSTPCR7, SMSTPCR704);
+		break;
+	case 1:
+		/* Stops supply of EHCI1 clock signal */
+		setbits_le32(SMSTPCR7, SMSTPCR705);
+		/* Stops supply of USBHS1 clock signal */
+		setbits_le32(SMSTPCR7, SMSTPCR706);
+		break;
+	default:
+		return -1;
+	}
+#else
 	if (index == (CONFIG_USB_MAX_CONTROLLER_COUNT-1)) {
 		data = readl(SMSTPCR7);
 		data |= SMSTPCR703;
 		writel(data, SMSTPCR7);
 	}
+#endif
 
 	return 0;
 }
 
 int ehci_hcd_init(int index, struct ehci_hccr **hccr, struct ehci_hcor **hcor)
 {
-	u32 data;
 	u32 base;
-	u32 phys_base;
 	struct rmobile_ehci_reg *rehci;
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+	struct ahb_bridge *ahb;
+	struct usb_core_reg *ucore;
+#else
+	u32 data;
+	u32 phys_base;
+#endif
 	uint32_t cap_base;
 
 	base = usb_base_address[index];
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+	switch (index) {
+	case 0:
+		/* Enables supply of EHCI0 clock signal */
+		clrbits_le32(SMSTPCR7, SMSTPCR703);
+		/* Enables supply of USBHS0 clock signal */
+		clrbits_le32(SMSTPCR7, SMSTPCR704);
+		break;
+	case 1:
+		/* Enables supply of EHCI1 clock signal */
+		clrbits_le32(SMSTPCR7, SMSTPCR705);
+		/* Enables supply of USBHS1 clock signal */
+		clrbits_le32(SMSTPCR7, SMSTPCR706);
+		break;
+	default:
+		return -1;
+	}
+#else
 	phys_base = base;
 
 	if (index == 0) {
@@ -97,10 +168,16 @@ int ehci_hcd_init(int index, struct ehci_hccr **hccr, struct ehci_hcor **hcor)
 		data &= ~(SMSTPCR703);
 		writel(data, SMSTPCR7);
 	}
+#endif
 
 	/* init */
 	rehci = (struct rmobile_ehci_reg *)(base + EHCI_OFFSET);
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+	ahb = (struct ahb_bridge *)(uintptr_t)(base + AHB_OFFSET);
+	ucore = (struct usb_core_reg *)(uintptr_t)(base + USB_CORE_OFFSET);
+#endif
 
+#if !(defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X))
 	/* Clock & Reset & Direct Power Down */
 	data = readl(base + USBCTR);
 	data &= ~(DIRPD | PCICLK_MASK | USBH_RST);
@@ -139,12 +216,78 @@ int ehci_hcd_init(int index, struct ehci_hccr **hccr, struct ehci_hcor **hcor)
 	data = SERREN | PERREN | MASTEREN | MEMEN;
 	writel(data, base + OHCI_CMND_STS);
 	writel(data, base + EHCI_CMND_STS);
+#endif
+
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+	switch (index) {
+	case 0:		/* HS-USB Channel 0(CN6) */
+		/* USBHS PHY PLL reset release */
+		clrbits_le32(hsusb_base_address[0]+REG_UGCTRL, PLLRESET);
+		mdelay(100);  /* 100ms wait */
+
+		/* HS-USB Channel 0(CN6)                    */
+		/*    -> 10:Select HS USB module for USB2.0 */
+		clrsetbits_le32(hsusb_base_address[index]+REG_UGCTRL2
+				, USB0SEL, USB0SEL_HSUSB);
+
+		/* low power status */
+		clrsetbits_le16(hsusb_base_address[index]+REG_LPSTS
+				, SUSPM, SUSPM_NORMAL);
+
+		mdelay(100);  /* 100ms wait */
+
+		/* Clock & Reset */
+		clrbits_le32(&ahb->usbctr, PLL_RST);
+
+		/* INT_ENALBLE ALL DISABLE */
+		clrbits_le32(&ahb->int_enable, (WAKEON_INTEN | UCOM_INTEN
+				| USBH_INTBEN | USBH_INTAEN | USBH_INTEN));
+
+		/* Suspend/Resume Timer Setting */
+		/* (TIMER_CONNECT:334cycle(us) / TIMER_RESUME:667cycle(us)) */
+		writel(0x014e029b, &ucore->spd_rsm_timset);
+
+		/* Overcurrent Detection Timer Setting */
+		/* 133547cycle(us) */
+		writel(0x000209ab, &ucore->oc_timset);
+
+		break;
+	case 1:		/* HS-USB Channel 1(CN5) */
+		/* HS-USB Channel 1(CN5)                            */
+		/*    -> 01:Select EHCI/OHCI host module for USB2.0 */
+		clrsetbits_le32(hsusb_base_address[index]+REG_UGCTRL2
+				, USB0SEL, USB0SEL_EHCI);
 
+		/* low power status */
+		clrsetbits_le16(hsusb_base_address[index]+REG_LPSTS
+				, SUSPM, SUSPM_NORMAL);
+
+		mdelay(100);  /* 100ms wait */
+
+		/* Clock & Reset */
+		clrbits_le32(&ahb->usbctr, PLL_RST);
+
+		/* INT_ENALBLE */
+		setbits_le32(&ahb->int_enable, USBH_INTBEN | USBH_INTAEN);
+
+		/* Suspend/Resume Timer Setting */
+		/* (TIMER_CONNECT:334cycle(us) / TIMER_RESUME:667cycle(us)) */
+		writel(0x014e029b, &ucore->spd_rsm_timset);
+
+		/* Overcurrent Detection Timer Setting 133547cycle(us) */
+		writel(0x000209ab, &ucore->oc_timset);
+
+		break;
+	default:
+		return -1;
+	}
+#else
 	/* PCI_INT_ENABLE */
 	data = __raw_readl(base + PCI_INT_ENABLE);
 	data |= USBH_PMEEN | USBH_INTBEN | USBH_INTAEN;
 	writel(data | USBH_PMEEN | USBH_INTBEN | USBH_INTAEN,
 			base + PCI_INT_ENABLE);
+#endif
 
 	*hccr = (struct ehci_hccr *)((uint32_t)&rehci->HCIVERSION);
 	cap_base = ehci_readl(&(*hccr)->cr_capbase);
diff --git a/drivers/usb/host/r8a779x.h b/drivers/usb/host/r8a779x.h
index 02a75ed..ea013b1 100644
--- a/drivers/usb/host/r8a779x.h
+++ b/drivers/usb/host/r8a779x.h
@@ -21,14 +21,36 @@ struct rmobile_usb_platdata {
 
 /*-------------------------------------------------------------------------*/
 /* Register offset */
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+#define OHCI_OFFSET		0x00
+#define OHCI_SIZE		0x100
+#define EHCI_OFFSET		0x100
+#define EHCI_SIZE		0x100
+#define AHB_OFFSET		0x200
+#define USB_CORE_OFFSET	0x300
+#else
 #define OHCI_OFFSET		0
 #define OHCI_SIZE		0x1000
 
 #define EHCI_OFFSET		0x1000
 #define EHCI_SIZE		0x1000
+#endif
 
 #define EHCI_USBCMD	(EHCI_OFFSET + 0x0020)
 
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+/* INT_ENABLE (0x200) */
+#define WAKEON_INTEN		(1 << 4)
+#define UCOM_INTEN			(1 << 3)
+#define USBH_INTBEN			(1 << 2)
+#define USBH_INTAEN			(1 << 1)
+#define USBH_INTEN			(1 << 0)
+
+/* USBCTR (0x20C) */
+#define DIRPD				(1 << 2)
+#define PLL_RST				(1 << 1)
+
+#else
 /* PCI Configuration Registers */
 #define PCI_CONF_OHCI_OFFSET	0x10000
 #define OHCI_VID_DID		(PCI_CONF_OHCI_OFFSET + 0x0000)
@@ -202,9 +224,25 @@ struct rmobile_usb_platdata {
 #define PCIREQ2			(1 << 2)		/* RW */
 #define PCIREQ1			(1 << 1)		/* RW */
 #define PCIREQ0			(1 << 0)		/* RW */
-
+#endif
 /*-------------------------------------------------------------------------*/
+#if defined(CONFIG_R8A7794X) || defined(CONFIG_R8A7747X)
+struct ahb_bridge {
+	u32 int_enable;
+	u32 int_status;
+	u32 ahb_bus_ctr;
+	u32 usbctr;
+};
 
+struct usb_core_reg {
+	u32 revid;
+	u32 regen_cg_ctrl;
+	u32 spd_ctrl;
+	u32 spd_rsm_timset;
+	u32 oc_timset;
+	u32 sbrn_fladj_pw;
+};
+#else
 struct rmobile_ohci_reg {
 	u32	HcRevision;		/* HcRevision */
 	u32	HcControl;		/* HcControl */
@@ -231,6 +269,7 @@ struct rmobile_ohci_reg {
 
 	u32	save_flag;		/* Save Flag */
 };
+#endif
 
 struct rmobile_ehci_reg {
 	u32	HCIVERSION;		/* HCIVERSION/CAPLENGTH */
-- 
1.7.9.5

