From 7022d5a573ea8e963dea00b5de89cd3ffc33ae91 Mon Sep 17 00:00:00 2001
From: thanhbui <thanh.bui.fz@renesas.com>
Date: Tue, 28 Jul 2020 14:36:29 +0700
Subject: [PATCH 426/504] watchdog: renesas-wdt: Register a restart handler for
 R8A7745

This patch registers a restart handler for R8A7745 (RG/G1E) SoC with
Cortex-A7 CPU cores.

Signed-off-by: thanhbui <thanh.bui.fz@renesas.com>
Signed-off-by: Hao Bui <hao.bui.yg@renesas.com>
---
 drivers/watchdog/renesas_wdt.c | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/watchdog/renesas_wdt.c b/drivers/watchdog/renesas_wdt.c
index f251c12..9c705d4 100644
--- a/drivers/watchdog/renesas_wdt.c
+++ b/drivers/watchdog/renesas_wdt.c
@@ -22,6 +22,7 @@
 
 #define WDTRSTCR        0xE6160054	/*Watchdog Timer Reset Control Register*/
 #define CA15BAR         0xE6160020	/*Cortex A15 Boot Address Register*/
+#define CA7BAR		0xE6160030      /*Cortex A7 Boot Address Register*/
 
 #define RWTCNT		0
 #define RWTCSRA		4
@@ -162,6 +163,30 @@ static int rwdt_restart_handler_ca15(struct notifier_block *nb, unsigned long mo
 	return NOTIFY_DONE;
 }
 
+static int rwdt_restart_handler_ca7(struct notifier_block *nb, unsigned long mode, void *cmd)
+{
+	struct rwdt_priv *priv = container_of(nb, struct rwdt_priv, restart_handler);
+	void __iomem *wdtrstcr = ioremap_nocache(WDTRSTCR, 4);
+	void __iomem *ca7bar  = ioremap_nocache(CA7BAR, 4);
+
+	BUG_ON(!ca7bar);
+	BUG_ON(!wdtrstcr);
+
+	/* Enabling RWDT Reset request */
+	iowrite32(0xA55A0002, wdtrstcr);
+	/* setting ROM Address as SYS Boot Address */
+	iowrite32(0x00000002, ca7bar);
+	iowrite32(0x00000012, ca7bar);
+
+	rwdt_start(&priv->wdev);
+	rwdt_write(priv, 0xffff, RWTCNT);
+
+	iounmap(wdtrstcr);
+	iounmap(ca7bar);
+
+	return NOTIFY_DONE;
+}
+
 static const struct watchdog_ops rwdt_ops = {
 	.owner = THIS_MODULE,
 	.start = rwdt_start,
@@ -261,6 +286,20 @@ static int rwdt_probe(struct platform_device *pdev)
 				"Failed to register restart handler (err = %d)\n", ret);
 	}
 
+	/*
+	 * register restart handler base on machine here
+	 * same ARM core architecture (e.g ARM cortex A7) can use same handler
+	 */
+	if (of_machine_is_compatible("renesas,r8a7745")) {
+		priv->restart_handler.notifier_call = rwdt_restart_handler_ca7;
+		/* 255: Highest priority restart handler */
+		priv->restart_handler.priority = 255;
+		ret = register_restart_handler(&priv->restart_handler);
+		if (ret)
+			dev_err(&pdev->dev,
+				"Failed to register restart handler (err = %d)\n", ret);
+	}
+
 	return 0;
 
  out_pm_disable:
-- 
2.7.4

