From aab0f7e0ec2c8f1135c2e1554b0c5cd95dddf21f Mon Sep 17 00:00:00 2001
From: "Nguyen Van Tu [FGA.AIS]" <TuNV16@fsoft.com.vn>
Date: Thu, 4 Oct 2018 13:33:56 +0700
Subject: [PATCH 203/641] renesas: rcar_gen2: Core CPG Clocks add G1C r8a77470
 support

Signed-off-by: thongsyho <thong.ho.px@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: Nguyen Van Tu [FGA.AIS] <TuNV16@fsoft.com.vn>
---
 drivers/clk/shmobile/Makefile        |   1 +
 drivers/clk/shmobile/clk-rcar-gen2.c | 226 ++++++++++++++++-------------------
 2 files changed, 105 insertions(+), 122 deletions(-)

diff --git a/drivers/clk/shmobile/Makefile b/drivers/clk/shmobile/Makefile
index b339c0b..2412eb9 100644
--- a/drivers/clk/shmobile/Makefile
+++ b/drivers/clk/shmobile/Makefile
@@ -4,6 +4,7 @@ obj-$(CONFIG_ARCH_R8A73A4)		+= clk-r8a73a4.o
 obj-$(CONFIG_ARCH_R8A7740)		+= clk-r8a7740.o
 obj-$(CONFIG_ARCH_R8A7743)		+= clk-rcar-gen2.o
 obj-$(CONFIG_ARCH_R8A7745)		+= clk-rcar-gen2.o
+obj-$(CONFIG_ARCH_R8A77470)		+= clk-rcar-gen2.o
 obj-$(CONFIG_ARCH_R8A7778)		+= clk-r8a7778.o
 obj-$(CONFIG_ARCH_R8A7779)		+= clk-r8a7779.o
 obj-$(CONFIG_ARCH_R8A7790)		+= clk-rcar-gen2.o
diff --git a/drivers/clk/shmobile/clk-rcar-gen2.c b/drivers/clk/shmobile/clk-rcar-gen2.c
index c24f6e7..0861ac7 100644
--- a/drivers/clk/shmobile/clk-rcar-gen2.c
+++ b/drivers/clk/shmobile/clk-rcar-gen2.c
@@ -11,16 +11,19 @@
  */
 
 #include <linux/clk-provider.h>
+#include <linux/clkdev.h>
 #include <linux/clk/shmobile.h>
 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/math64.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
-#include <linux/slab.h>
 #include <linux/spinlock.h>
 #include <linux/soc/renesas/rcar-rst.h>
 
+static bool is_e2;
+static bool is_e2x;
+
 struct rcar_gen2_cpg {
 	struct clk_onecell_data data;
 	spinlock_t lock;
@@ -34,8 +37,6 @@ struct rcar_gen2_cpg {
 #define CPG_FRQCRC			0x000000e0
 #define CPG_FRQCRC_ZFC_MASK		(0x1f << 8)
 #define CPG_FRQCRC_ZFC_SHIFT		8
-#define CPG_ADSPCKCR			0x0000025c
-#define CPG_RCANCKCR			0x00000270
 
 /* -----------------------------------------------------------------------------
  * Z Clock
@@ -164,93 +165,12 @@ static struct clk * __init cpg_z_clk_register(struct rcar_gen2_cpg *cpg)
 	return clk;
 }
 
-static struct clk * __init cpg_rcan_clk_register(struct rcar_gen2_cpg *cpg,
-						 struct device_node *np)
-{
-	const char *parent_name = of_clk_get_parent_name(np, 1);
-	struct clk_fixed_factor *fixed;
-	struct clk_gate *gate;
-	struct clk *clk;
-
-	fixed = kzalloc(sizeof(*fixed), GFP_KERNEL);
-	if (!fixed)
-		return ERR_PTR(-ENOMEM);
-
-	fixed->mult = 1;
-	fixed->div = 6;
-
-	gate = kzalloc(sizeof(*gate), GFP_KERNEL);
-	if (!gate) {
-		kfree(fixed);
-		return ERR_PTR(-ENOMEM);
-	}
-
-	gate->reg = cpg->reg + CPG_RCANCKCR;
-	gate->bit_idx = 8;
-	gate->flags = CLK_GATE_SET_TO_DISABLE;
-	gate->lock = &cpg->lock;
-
-	clk = clk_register_composite(NULL, "rcan", &parent_name, 1, NULL, NULL,
-				     &fixed->hw, &clk_fixed_factor_ops,
-				     &gate->hw, &clk_gate_ops, 0);
-	if (IS_ERR(clk)) {
-		kfree(gate);
-		kfree(fixed);
-	}
-
-	return clk;
-}
-
-/* ADSP divisors */
-static const struct clk_div_table cpg_adsp_div_table[] = {
-	{  1,  3 }, {  2,  4 }, {  3,  6 }, {  4,  8 },
-	{  5, 12 }, {  6, 16 }, {  7, 18 }, {  8, 24 },
-	{ 10, 36 }, { 11, 48 }, {  0,  0 },
-};
-
-static struct clk * __init cpg_adsp_clk_register(struct rcar_gen2_cpg *cpg)
-{
-	const char *parent_name = "pll1";
-	struct clk_divider *div;
-	struct clk_gate *gate;
-	struct clk *clk;
-
-	div = kzalloc(sizeof(*div), GFP_KERNEL);
-	if (!div)
-		return ERR_PTR(-ENOMEM);
-
-	div->reg = cpg->reg + CPG_ADSPCKCR;
-	div->width = 4;
-	div->table = cpg_adsp_div_table;
-	div->lock = &cpg->lock;
-
-	gate = kzalloc(sizeof(*gate), GFP_KERNEL);
-	if (!gate) {
-		kfree(div);
-		return ERR_PTR(-ENOMEM);
-	}
-
-	gate->reg = cpg->reg + CPG_ADSPCKCR;
-	gate->bit_idx = 8;
-	gate->flags = CLK_GATE_SET_TO_DISABLE;
-	gate->lock = &cpg->lock;
-
-	clk = clk_register_composite(NULL, "adsp", &parent_name, 1, NULL, NULL,
-				     &div->hw, &clk_divider_ops,
-				     &gate->hw, &clk_gate_ops, 0);
-	if (IS_ERR(clk)) {
-		kfree(gate);
-		kfree(div);
-	}
-
-	return clk;
-}
-
 /* -----------------------------------------------------------------------------
  * CPG Clock Data
  */
 
 /*
+ * PLL Multiplication Ratio [H2/M2-W/M2-N]
  *   MD		EXTAL		PLL0	PLL1	PLL3
  * 14 13 19	(MHz)		*1	*1
  *---------------------------------------------------
@@ -263,8 +183,40 @@ static struct clk * __init cpg_adsp_clk_register(struct rcar_gen2_cpg *cpg)
  * 1  1  0	30 / 2		x172/2	x208/2	x106
  * 1  1  1	30 / 2		x172/2	x208/2	x88
  *
- * *1 :	Table 7.6 indicates VCO ouput (PLLx = VCO/2)
+ * *1 :	Table 7.5a indicates VCO ouput (PLLx = VCO/2)
+ */
+
+/*
+ * PLL Multiplication Ratio [E2]
+ *   MD		EXTAL		PLL0	PLL1	PLL3
+ * 14 13 19	(MHz)		*1	*2
+ *---------------------------------------------------
+ * 0  0  0	Invalid setting
+ * 0  0  1	15 x 1		x200/3	x208/2	x88
+ * 0  1  0	Invalid setting
+ * 0  1  1	20 x 1		x150/3	x156/2	x66
+ * 1  0  0	Invalid setting
+ * 1  0  1	26 / 2		x230/3	x240/2	x102
+ * 1  1  0	Invalid setting
+ * 1  1  1	30 / 2		x200/3	x208/2	x88
+ *
+ * *1 :	Table 7.5c indicates VCO ouput (PLL0 = VCO/3)
+ * *2 :	Table 7.5c indicates VCO ouput (PLL1 = VCO/2)
  */
+
+/*
+ * PLL Multiplication Ratio [E2X]
+ *   MD		EXTAL		PLL0	PLL1	PLL3
+ * 14 13	(MHz)			*1	*1
+ *--------------------------------------------------
+ * 0  0		20 x 1			x80/2	x78/2	x50
+ * 0  1		26 x 1			x60/2	x60/2	x56
+ * 1  0		Prohibited setting	-	-	-
+ * 1  1		30 x 1			x52/2	x52/2	x50
+ *
+ * *1 :	Table 7.5 indicates VCO ouput (PLLx = VCO/2)
+ */
+
 #define CPG_PLL_CONFIG_INDEX(md)	((((md) & BIT(14)) >> 12) | \
 					 (((md) & BIT(13)) >> 12) | \
 					 (((md) & BIT(19)) >> 19))
@@ -276,10 +228,22 @@ struct cpg_pll_config {
 };
 
 static const struct cpg_pll_config cpg_pll_configs[8] __initconst = {
-	{ 1, 208, 106, 200 }, { 1, 208,  88, 200 },
-	{ 1, 156,  80, 150 }, { 1, 156,  66, 150 },
-	{ 2, 240, 122, 230 }, { 2, 240, 102, 230 },
-	{ 2, 208, 106, 200 }, { 2, 208,  88, 200 },
+	{ 1, 172, 208, 106 }, { 1, 172, 208,  88 },
+	{ 1, 130, 156,  80 }, { 1, 130, 156,  66 },
+	{ 2, 200, 240, 122 }, { 2, 200, 240, 102 },
+	{ 2, 172, 208, 106 }, { 2, 172, 208,  88 },
+};
+
+static const struct cpg_pll_config e2_cpg_pll_configs[8] __initconst = {
+	{ /* Invalid */ }, { 1, 200, 208,  88 },
+	{ /* Invalid */ }, { 1, 150, 156,  66 },
+	{ /* Invalid */ }, { 2, 230, 240, 102 },
+	{ /* Invalid */ }, { 2, 200, 208,  88 },
+};
+
+static const struct cpg_pll_config e2x_cpg_pll_configs[4] __initconst = {
+	{ 1, 80, 78, 50 }, { 1, 60, 60, 56 },
+	{ /* Invalid */ }, { 1, 52, 52, 50 },
 };
 
 /* SDHI divisors */
@@ -290,7 +254,12 @@ static const struct clk_div_table cpg_sdh_div_table[] = {
 };
 
 static const struct clk_div_table cpg_sd01_div_table[] = {
-	{  4,  8 },
+	{  4,  8 }, {  5, 12 }, {  6, 16 }, {  7, 18 },
+	{  8, 24 }, { 10, 36 }, { 11, 48 }, { 12, 10 },
+	{  0,  0 },
+};
+
+static const struct clk_div_table e2x_cpg_sd01_div_table[] = {
 	{  5, 12 }, {  6, 16 }, {  7, 18 }, {  8, 24 },
 	{ 10, 36 }, { 11, 48 }, { 12, 10 }, {  0,  0 },
 };
@@ -315,21 +284,6 @@ static struct pll0_config_data var_pll0_ratio = {
 	.is_devider_fixed = false
 };
 
-static const struct of_device_id cpg_of_match[] = {
-
-	{
-		.compatible = "renesas,r8a7743-cpg-clocks",
-		.data = &var_pll0_ratio,
-	},
-
-
-	{
-		.compatible = "renesas,r8a7745-cpg-clocks",
-		.data = &fix_pll0_ratio,
-	},
-	{}
-};
-
 static u32 cpg_mode __initdata;
 
 static const char * const pll0_mult_match[] = {
@@ -359,24 +313,28 @@ rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
 		 * clock implementation and we currently have no need to change
 		 * the multiplier value.
 		 */
-		if (of_device_compatible_match(np, pll0_mult_match)) {
-			/* R-Car V2H and E2 do not have PLL0CR */
-			mult = config->pll0_mult;
-			div = 3;
+		parent_name = "main";
+		if (is_e2) {
+			mult = config->pll0_mult / 3;
 		} else {
 			u32 value = clk_readl(cpg->reg + CPG_PLL0CR);
 			mult = ((value >> 24) & ((1 << 7) - 1)) + 1;
 		}
-		parent_name = "main";
 	} else if (!strcmp(name, "pll1")) {
 		parent_name = "main";
-		mult = config->pll1_mult / 2;
+		if (is_e2x)
+			mult = config->pll1_mult;
+		else
+			mult = config->pll1_mult / 2;
 	} else if (!strcmp(name, "pll3")) {
 		parent_name = "main";
 		mult = config->pll3_mult;
 	} else if (!strcmp(name, "lb")) {
 		parent_name = "pll1";
-		div = cpg_mode & BIT(18) ? 36 : 24;
+		if (is_e2x)
+			div = 12;
+		else
+			div = cpg_mode & BIT(18) ? 36 : 24;
 	} else if (!strcmp(name, "qspi")) {
 		parent_name = "pll1_div2";
 		div = (cpg_mode & (BIT(3) | BIT(2) | BIT(1))) == BIT(2)
@@ -387,18 +345,20 @@ rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
 		shift = 8;
 	} else if (!strcmp(name, "sd0")) {
 		parent_name = "pll1";
-		table = cpg_sd01_div_table;
+		if (is_e2x)
+			table = e2x_cpg_sd01_div_table;
+		else
+			table = cpg_sd01_div_table;
 		shift = 4;
 	} else if (!strcmp(name, "sd1")) {
 		parent_name = "pll1";
-		table = cpg_sd01_div_table;
+		if (is_e2x)
+			table = e2x_cpg_sd01_div_table;
+		else
+			table = cpg_sd01_div_table;
 		shift = 0;
 	} else if (!strcmp(name, "z")) {
 		return cpg_z_clk_register(cpg);
-	} else if (!strcmp(name, "rcan")) {
-		return cpg_rcan_clk_register(cpg, np);
-	} else if (!strcmp(name, "adsp")) {
-		return cpg_adsp_clk_register(cpg);
 	} else {
 		return ERR_PTR(-EINVAL);
 	}
@@ -445,7 +405,31 @@ static void __init rcar_gen2_cpg_clocks_init(struct device_node *np)
 	if (WARN_ON(cpg->reg == NULL))
 		return;
 
-	config = &cpg_pll_configs[CPG_PLL_CONFIG_INDEX(cpg_mode)];
+	if (of_machine_is_compatible("renesas,r8a7790") ||
+	    of_machine_is_compatible("renesas,r8a7791") ||
+	    of_machine_is_compatible("renesas,r8a7743") ||
+	    of_machine_is_compatible("renesas,r8a7793")) {
+		config = &cpg_pll_configs[CPG_PLL_CONFIG_INDEX(cpg_mode)];
+		is_e2 = false;
+		is_e2x = false;
+	} else if (of_machine_is_compatible("renesas,r8a7792") ||
+		   of_machine_is_compatible("renesas,r8a7745") ||
+		   of_machine_is_compatible("renesas,r8a7794")) {
+		config = &e2_cpg_pll_configs[CPG_PLL_CONFIG_INDEX(cpg_mode)];
+		is_e2 = true;
+		is_e2x = false;
+	} else if (of_machine_is_compatible("renesas,r8a77945") ||
+			   of_machine_is_compatible("renesas,r8a77946") ||
+			   of_machine_is_compatible("renesas,r8a77470") ||
+			   of_machine_is_compatible("renesas,r8a77471")) {
+		config = &e2x_cpg_pll_configs[CPG_PLL_CONFIG_INDEX(cpg_mode)
+						>> 1];
+		is_e2 = false;
+		is_e2x = true;
+	} else {
+		pr_err("%s: failed to find R-Car Gen2 compatible\n", __func__);
+		return;
+	}
 
 	for (i = 0; i < num_clks; ++i) {
 		const char *name;
@@ -463,8 +447,6 @@ static void __init rcar_gen2_cpg_clocks_init(struct device_node *np)
 	}
 
 	of_clk_add_provider(np, of_clk_src_onecell_get, &cpg->data);
-
-	cpg_mstp_add_clk_domain(np);
 }
 CLK_OF_DECLARE(rcar_gen2_cpg_clks, "renesas,rcar-gen2-cpg-clocks",
 	       rcar_gen2_cpg_clocks_init);
-- 
2.7.4

