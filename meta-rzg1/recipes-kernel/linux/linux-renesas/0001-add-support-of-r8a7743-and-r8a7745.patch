From 09303de3ecd91b36db419011e6a7d843cbb755d9 Mon Sep 17 00:00:00 2001
From: Dmitry Shifrin <dmitry.shifrin@cogentembedded.com>
Date: Tue, 27 Oct 2015 16:48:10 +0300
Subject: [PATCH 1/2] add support of r8a7743 and r8a7745

---
 arch/arm/boot/dts/r8a7743.dtsi                 | 1215 ++++++++++++++++++++++++
 arch/arm/boot/dts/r8a7745.dtsi                 | 1088 +++++++++++++++++++++
 arch/arm/configs/shmobile_defconfig            |    2 +
 arch/arm/mach-shmobile/Kconfig                 |   19 +
 arch/arm/mach-shmobile/Makefile                |    9 +
 arch/arm/mach-shmobile/clock-r8a7743.c         |  374 ++++++++
 arch/arm/mach-shmobile/pm-r8a7743.c            |  269 ++++++
 arch/arm/mach-shmobile/pm-r8a7745.c            |  267 ++++++
 arch/arm/mach-shmobile/r8a7743.h               |  142 +++
 arch/arm/mach-shmobile/r8a7745.h               |  130 +++
 arch/arm/mach-shmobile/setup-r8a7743.c         |  290 ++++++
 arch/arm/mach-shmobile/setup-r8a7745.c         |  293 ++++++
 arch/arm/mach-shmobile/smp-r8a7743.c           |   85 ++
 arch/arm/mach-shmobile/smp-r8a7745.c           |   90 ++
 drivers/media/platform/soc_camera/rcar_vin.c   |   15 +-
 drivers/media/v4l2-core/videobuf2-dma-contig.c |    1 +
 include/dt-bindings/clock/r8a7743-clock.h      |  137 +++
 include/dt-bindings/clock/r8a7745-clock.h      |  128 +++
 18 files changed, 4552 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/boot/dts/r8a7743.dtsi
 create mode 100644 arch/arm/boot/dts/r8a7745.dtsi
 create mode 100644 arch/arm/mach-shmobile/clock-r8a7743.c
 create mode 100644 arch/arm/mach-shmobile/pm-r8a7743.c
 create mode 100644 arch/arm/mach-shmobile/pm-r8a7745.c
 create mode 100644 arch/arm/mach-shmobile/r8a7743.h
 create mode 100644 arch/arm/mach-shmobile/r8a7745.h
 create mode 100644 arch/arm/mach-shmobile/setup-r8a7743.c
 create mode 100644 arch/arm/mach-shmobile/setup-r8a7745.c
 create mode 100644 arch/arm/mach-shmobile/smp-r8a7743.c
 create mode 100644 arch/arm/mach-shmobile/smp-r8a7745.c
 create mode 100644 include/dt-bindings/clock/r8a7743-clock.h
 create mode 100644 include/dt-bindings/clock/r8a7745-clock.h

diff --git a/arch/arm/boot/dts/r8a7743.dtsi b/arch/arm/boot/dts/r8a7743.dtsi
new file mode 100644
index 0000000..faffab2
--- /dev/null
+++ b/arch/arm/boot/dts/r8a7743.dtsi
@@ -0,0 +1,1215 @@
+/*
+ * Device Tree Source for the r8a7743 SoC
+ *
+ * Copyright (C) 2013-2015 Renesas Electronics Corporation
+ * Copyright (C) 2013-2014 Renesas Solutions Corp.
+ * Copyright (C) 2014 Cogent Embedded Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2.  This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <dt-bindings/clock/r8a7743-clock.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+#include <dt-bindings/interrupt-controller/irq.h>
+
+/ {
+	compatible = "renesas,r8a7743";
+	interrupt-parent = <&gic>;
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	aliases {
+		i2c0 = &i2c0;
+		i2c1 = &i2c1;
+		i2c2 = &i2c2;
+		i2c3 = &i2c3;
+		i2c4 = &i2c4;
+		i2c5 = &i2c5;
+		spi0 = &qspi;
+		spi1 = &msiof0;
+		spi2 = &msiof1;
+		spi3 = &msiof2;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu0: cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a15";
+			reg = <0>;
+			clock-frequency = <1500000000>;
+			voltage-tolerance = <1>; /* 1% */
+			clocks = <&cpg_clocks R8A7743_CLK_Z>;
+			clock-latency = <300000>; /* 300 us */
+
+			/* kHz - uV - OPPs unknown yet */
+			operating-points = <1500000 1000000>,
+					   <1312500 1000000>,
+					   <1125000 1000000>,
+					   < 937500 1000000>,
+					   < 750000 1000000>,
+					   < 375000 1000000>;
+		};
+
+		cpu1: cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a15";
+			reg = <1>;
+			clock-frequency = <1500000000>;
+		};
+	};
+
+	gic: interrupt-controller@f1001000 {
+		compatible = "arm,cortex-a15-gic";
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+		interrupt-controller;
+		reg = <0 0xf1001000 0 0x1000>,
+			<0 0xf1002000 0 0x1000>,
+			<0 0xf1004000 0 0x2000>,
+			<0 0xf1006000 0 0x2000>;
+		interrupts = <1 9 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_HIGH)>;
+	};
+
+	gpio0: gpio@e6050000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6050000 0 0x50>;
+		interrupts = <0 4 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 0 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO0>;
+	};
+
+	gpio1: gpio@e6051000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6051000 0 0x50>;
+		interrupts = <0 5 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 32 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO1>;
+	};
+
+	gpio2: gpio@e6052000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6052000 0 0x50>;
+		interrupts = <0 6 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 64 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO2>;
+	};
+
+	gpio3: gpio@e6053000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6053000 0 0x50>;
+		interrupts = <0 7 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 96 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO3>;
+	};
+
+	gpio4: gpio@e6054000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6054000 0 0x50>;
+		interrupts = <0 8 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 128 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO4>;
+	};
+
+	gpio5: gpio@e6055000 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6055000 0 0x50>;
+		interrupts = <0 9 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 160 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO5>;
+	};
+
+	gpio6: gpio@e6055400 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6055400 0 0x50>;
+		interrupts = <0 10 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 192 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO6>;
+	};
+
+	gpio7: gpio@e6055800 {
+		compatible = "renesas,gpio-r8a7743", "renesas,gpio-rcar";
+		reg = <0 0xe6055800 0 0x50>;
+		interrupts = <0 11 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 224 26>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7743_CLK_GPIO7>;
+	};
+
+	thermal@e61f0000 {
+		compatible = "renesas,thermal-r8a7743", "renesas,rcar-thermal";
+		reg = <0 0xe61f0000 0 0x14>, <0 0xe61f0100 0 0x38>;
+		interrupts = <0 69 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp5_clks R8A7743_CLK_THERMAL>;
+	};
+
+	timer {
+		compatible = "arm,armv7-timer";
+		interrupts = <1 13 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 14 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 11 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 10 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>;
+	};
+
+	irqc0: interrupt-controller@e61c0000 {
+		compatible = "renesas,irqc-r8a7743", "renesas,irqc";
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		reg = <0 0xe61c0000 0 0x200>;
+		interrupts = <0 0 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 1 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 2 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 3 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 12 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 13 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 14 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 15 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 16 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 17 IRQ_TYPE_LEVEL_HIGH>;
+	};
+
+	audma0: dma-controller@ec700000 {
+		compatible = "renesas,rcar-dmac";
+		reg = <0 0xec700000 0 0x10000>;
+		interrupts =	<0 346 IRQ_TYPE_LEVEL_HIGH
+				 0 320 IRQ_TYPE_LEVEL_HIGH
+				 0 321 IRQ_TYPE_LEVEL_HIGH
+				 0 322 IRQ_TYPE_LEVEL_HIGH
+				 0 323 IRQ_TYPE_LEVEL_HIGH
+				 0 324 IRQ_TYPE_LEVEL_HIGH
+				 0 325 IRQ_TYPE_LEVEL_HIGH
+				 0 326 IRQ_TYPE_LEVEL_HIGH
+				 0 327 IRQ_TYPE_LEVEL_HIGH
+				 0 328 IRQ_TYPE_LEVEL_HIGH
+				 0 329 IRQ_TYPE_LEVEL_HIGH
+				 0 330 IRQ_TYPE_LEVEL_HIGH
+				 0 331 IRQ_TYPE_LEVEL_HIGH
+				 0 332 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "error",
+				"ch0", "ch1", "ch2", "ch3",
+				"ch4", "ch5", "ch6", "ch7",
+				"ch8", "ch9", "ch10", "ch11",
+				"ch12";
+		clocks = <&mstp5_clks R8A7743_CLK_AUDIO_DMAC0>;
+		clock-names = "fck";
+		#dma-cells = <1>;
+		dma-channels = <13>;
+	};
+
+	audma1: dma-controller@ec720000 {
+		compatible = "renesas,rcar-dmac";
+		reg = <0 0xec720000 0 0x10000>;
+		interrupts =	<0 347 IRQ_TYPE_LEVEL_HIGH
+				 0 333 IRQ_TYPE_LEVEL_HIGH
+				 0 334 IRQ_TYPE_LEVEL_HIGH
+				 0 335 IRQ_TYPE_LEVEL_HIGH
+				 0 336 IRQ_TYPE_LEVEL_HIGH
+				 0 337 IRQ_TYPE_LEVEL_HIGH
+				 0 338 IRQ_TYPE_LEVEL_HIGH
+				 0 339 IRQ_TYPE_LEVEL_HIGH
+				 0 340 IRQ_TYPE_LEVEL_HIGH
+				 0 341 IRQ_TYPE_LEVEL_HIGH
+				 0 342 IRQ_TYPE_LEVEL_HIGH
+				 0 343 IRQ_TYPE_LEVEL_HIGH
+				 0 344 IRQ_TYPE_LEVEL_HIGH
+				 0 345 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "error",
+				"ch0", "ch1", "ch2", "ch3",
+				"ch4", "ch5", "ch6", "ch7",
+				"ch8", "ch9", "ch10", "ch11",
+				"ch12";
+		clocks = <&mstp5_clks R8A7743_CLK_AUDIO_DMAC1>;
+		clock-names = "fck";
+		#dma-cells = <1>;
+		dma-channels = <13>;
+	};
+
+	audmapp: dma-controller@ec740000 {
+		compatible = "renesas,rcar-audmapp";
+		#dma-cells = <1>;
+
+		reg = <0 0xec740000 0 0x200>;
+	};
+
+	/* The memory map in the User's Manual maps the cores to bus numbers */
+	i2c0: i2c@e6508000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6508000 0 0x40>;
+		interrupts = <0 287 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C0>;
+		status = "disabled";
+	};
+
+	i2c1: i2c@e6518000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6518000 0 0x40>;
+		interrupts = <0 288 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C1>;
+		status = "disabled";
+	};
+
+	i2c2: i2c@e6530000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6530000 0 0x40>;
+		interrupts = <0 286 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C2>;
+		status = "disabled";
+	};
+
+	i2c3: i2c@e6540000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6540000 0 0x40>;
+		interrupts = <0 290 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C3>;
+		status = "disabled";
+	};
+
+	i2c4: i2c@e6520000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6520000 0 0x40>;
+		interrupts = <0 19 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C4>;
+		status = "disabled";
+	};
+
+	i2c5: i2c@e6528000 {
+		/* doesn't need pinmux */
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7743";
+		reg = <0 0xe6528000 0 0x40>;
+		interrupts = <0 20 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_I2C5>;
+		status = "disabled";
+	};
+
+	pfc: pfc@e6060000 {
+		compatible = "renesas,pfc-r8a7743";
+		reg = <0 0xe6060000 0 0x250>;
+		#gpio-range-cells = <3>;
+	};
+
+	sdhi0: sd@ee100000 {
+		compatible = "renesas,sdhi-r8a7743";
+		reg = <0 0xee100000 0 0x200>;
+		dma-names = "tx", "rx";
+		interrupts = <0 165 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7743_CLK_SDHI0>;
+		cap-uhs-sdr104;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <195000000>;
+		renesas,mmc-scc-tapnum = <8>;
+		renesas,pfcs = <0xe6060000 0x8c>;
+		renesas,id = <0>;
+		status = "disabled";
+	};
+
+	sdhi1: sd@ee140000 {
+		compatible = "renesas,sdhi-r8a7743";
+		reg = <0 0xee140000 0 0x100>;
+		dma-names = "tx", "rx";
+		interrupts = <0 167 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7743_CLK_SDHI1>;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <97500000>;
+		renesas,pfcs = <0xe6060000 0x8c>;
+		renesas,id = <1>;
+		status = "disabled";
+	};
+
+	sdhi2: sd@ee160000 {
+		compatible = "renesas,sdhi-r8a7743";
+		reg = <0 0xee160000 0 0x100>;
+		dma-names = "tx", "rx";
+		interrupts = <0 168 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7743_CLK_SDHI2>;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <97500000>;
+		renesas,pfcs = <0xe6060000 0x8c>;
+		renesas,id = <2>;
+		status = "disabled";
+	};
+
+	mmcif0: mmcif@ee200000 {
+		compatible = "renesas,mmcif-r8a7743", "renesas,sh-mmcif";
+		reg = <0 0xee200000 0 0x80>;
+		dma-names = "tx", "rx";
+		interrupts = <0 169 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7743_CLK_MMCIF0>;
+		reg-io-width = <4>;
+		renesas,clk-rate = <97500000>;
+		status = "disabled";
+	};
+
+	scif0: serial@e6e60000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6e60000 0 64>;
+		interrupts = <0 152 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF0>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif1: serial@e6e68000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6e68000 0 64>;
+		interrupts = <0 153 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF1>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif2: serial@e6e58000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6e58000 0 64>;
+		interrupts = <0 22 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF2>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif3: serial@e6ea8000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6ea8000 0 64>;
+		interrupts = <0 23 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF3>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif4: serial@e6ee0000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6ee0000 0 64>;
+		interrupts = <0 24 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF4>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif5: serial@e6ee8000 {
+		compatible = "renesas,scif-r8a7743", "renesas,scif";
+		reg = <0 0xe6ee8000 0 64>;
+		interrupts = <0 25 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_SCIF5>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif0: serial@e62c0000 {
+		compatible = "renesas,hscif-r8a7743", "renesas,hscif";
+		reg = <0 0xe62c0000 0 96>;
+		interrupts = <0 154 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_HSCIF0>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif1: serial@e62c8000 {
+		compatible = "renesas,hscif-r8a7743", "renesas,hscif";
+		reg = <0 0xe62c8000 0 96>;
+		interrupts = <0 155 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_HSCIF1>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif2: serial@e62d0000 {
+		compatible = "renesas,hscif-r8a7743", "renesas,hscif";
+		reg = <0 0xe62d0000 0 96>;
+		interrupts = <0 21 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7743_CLK_HSCIF2>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	ether: ethernet@ee700000 {
+		compatible = "renesas,ether-r8a7743";
+		reg = <0 0xee700000 0 0x400>;
+		interrupts = <0 162 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp8_clks R8A7743_CLK_ETHER>;
+		phy-mode = "rmii";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	sata0: sata@ee300000 {
+		compatible = "renesas,sata-r8a7743";
+		reg = <0 0xee300000 0 0x2000>;
+		interrupts = <0 105 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp8_clks R8A7743_CLK_SATA0>;
+		status = "disabled";
+	};
+
+	sata1: sata@ee500000 {
+		compatible = "renesas,sata-r8a7743";
+		reg = <0 0xee500000 0 0x2000>;
+		interrupts = <0 106 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp8_clks R8A7743_CLK_SATA1>;
+		status = "disabled";
+	};
+
+	clocks {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		/* External root clock */
+		extal_clk: extal_clk {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			/* This value must be overriden by the board. */
+			clock-frequency = <0>;
+			clock-output-names = "extal";
+		};
+
+		/*
+		 * The external audio clocks are configured as 0 Hz fixed frequency clocks by
+		 * default. Boards that provide audio clocks should override them.
+		 */
+		audio_clk_a: audio_clk_a {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_a";
+		};
+		audio_clk_b: audio_clk_b {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_b";
+		};
+		audio_clk_c: audio_clk_c {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_c";
+		};
+
+		/* External PCIe clock - can be overridden by the board */
+		pcie_bus_clk: pcie_bus_clk {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <100000000>;
+			clock-output-names = "pcie_bus";
+			status = "disabled";
+		};
+
+		/* Special CPG clocks */
+		cpg_clocks: cpg_clocks@e6150000 {
+			compatible = "renesas,r8a7743-cpg-clocks",
+				     "renesas,rcar-gen2-cpg-clocks";
+			reg = <0 0xe6150000 0 0x1000>;
+			clocks = <&extal_clk>;
+			#clock-cells = <1>;
+			clock-output-names = "main", "pll0", "pll1", "pll3",
+					     "lb", "qspi", "sdh", "sd0", "z";
+		};
+
+		/* Variable factor clocks */
+		sd1_clk: sd2_clk@e6150078 {
+			compatible = "renesas,r8a7743-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe6150078 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "sd1";
+		};
+		sd2_clk: sd3_clk@e615026c {
+			compatible = "renesas,r8a7743-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe615026c 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "sd2";
+		};
+		mmc0_clk: mmc0_clk@e6150240 {
+			compatible = "renesas,r8a7743-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe6150240 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "mmc0";
+		};
+
+		/* Fixed factor clocks */
+		pll1_div2_clk: pll1_div2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "pll1_div2";
+		};
+		zg_clk: zg_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <3>;
+			clock-mult = <1>;
+			clock-output-names = "zg";
+		};
+		zx_clk: zx_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <3>;
+			clock-mult = <1>;
+			clock-output-names = "zx";
+		};
+		zs_clk: zs_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <6>;
+			clock-mult = <1>;
+			clock-output-names = "zs";
+		};
+		hp_clk: hp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <12>;
+			clock-mult = <1>;
+			clock-output-names = "hp";
+		};
+		i_clk: i_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "i";
+		};
+		b_clk: b_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <12>;
+			clock-mult = <1>;
+			clock-output-names = "b";
+		};
+		p_clk: p_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <24>;
+			clock-mult = <1>;
+			clock-output-names = "p";
+		};
+		cl_clk: cl_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <48>;
+			clock-mult = <1>;
+			clock-output-names = "cl";
+		};
+		m2_clk: m2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "m2";
+		};
+		imp_clk: imp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <4>;
+			clock-mult = <1>;
+			clock-output-names = "imp";
+		};
+		rclk_clk: rclk_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <(48 * 1024)>;
+			clock-mult = <1>;
+			clock-output-names = "rclk";
+		};
+		oscclk_clk: oscclk_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <(12 * 1024)>;
+			clock-mult = <1>;
+			clock-output-names = "oscclk";
+		};
+		zb3_clk: zb3_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <4>;
+			clock-mult = <1>;
+			clock-output-names = "zb3";
+		};
+		zb3d2_clk: zb3d2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "zb3d2";
+		};
+		ddr_clk: ddr_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7743_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "ddr";
+		};
+		mp_clk: mp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-div = <15>;
+			clock-mult = <1>;
+			clock-output-names = "mp";
+		};
+		cp_clk: cp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&extal_clk>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "cp";
+		};
+
+		/* Gate clocks */
+		mstp0_clks: mstp0_clks@e6150130 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150130 0 4>, <0 0xe6150030 0 4>;
+			clocks = <&mp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <R8A7743_CLK_MSIOF0>;
+			clock-output-names = "msiof0";
+		};
+		mstp1_clks: mstp1_clks@e6150134 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150134 0 4>, <0 0xe6150038 0 4>;
+			clocks = <&zs_clk>, <&zs_clk>, <&zs_clk>, <&p_clk>,
+				 <&zg_clk>, <&zs_clk>, <&zs_clk>, <&zs_clk>,
+				 <&p_clk>, <&p_clk>, <&rclk_clk>, <&cp_clk>,
+				 <&zs_clk>, <&zs_clk>, <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_VCP0 R8A7743_CLK_VPC0
+				R8A7743_CLK_TMU1 R8A7743_CLK_PVRSRVKM R8A7743_CLK_2DDMAC
+				R8A7743_CLK_FDP1 R8A7743_CLK_FDP0 R8A7743_CLK_TMU3
+				R8A7743_CLK_TMU2 R8A7743_CLK_CMT0
+				R8A7743_CLK_VSP1_DU1 R8A7743_CLK_VSP1_DU0 R8A7743_CLK_VSP1_S
+			>;
+			clock-output-names =
+				"vcp0", "vpc0", "tmu1", "pvrsrvkm",
+				"tddmac", "fdp1", "fdp0", "tmu3", "tmu2",
+				"cmt0", "vsp1-du1", "vsp1-du0", "vsps";
+		};
+		mstp2_clks: mstp2_clks@e6150138 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150138 0 4>, <0 0xe6150040 0 4>;
+			clocks = <&mp_clk>, <&mp_clk>,
+				 <&zs_clk>, <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_MSIOF2
+				R8A7743_CLK_MSIOF1
+				R8A7743_CLK_SYS_DMAC1 R8A7743_CLK_SYS_DMAC0
+			>;
+			clock-output-names =
+				"msiof2", "msiof1",
+				"sys-dmac1", "sys-dmac0";
+		};
+		mstp3_clks: mstp3_clks@e615013c {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe615013c 0 4>, <0 0xe6150048 0 4>;
+			clocks = <&cp_clk>, <&sd2_clk>, <&sd1_clk>, <&cpg_clocks R8A7743_CLK_SD0>,
+				 <&mmc0_clk>, <&mp_clk>,<&mp_clk>, <&rclk_clk>,
+				 <&hp_clk>, <&hp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_TPU0 R8A7743_CLK_SDHI2 R8A7743_CLK_SDHI1 R8A7743_CLK_SDHI0
+				R8A7743_CLK_MMCIF0 R8A7743_CLK_PCIEC
+				R8A7743_CLK_SSUSB R8A7743_CLK_CMT1
+				R8A7743_CLK_USBDMAC0 R8A7743_CLK_USBDMAC1
+			>;
+			clock-output-names =
+				"tpu0", "sdhi2", "sdhi1", "sdhi0",
+				"mmcif0", "pciec", "ssusb", "cmt1",
+				"usbdmac0", "usbdmac1";
+		};
+		mstp5_clks: mstp5_clks@e6150144 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150144 0 4>, <0 0xe615003c 0 4>;
+			clocks = <&zs_clk>, <&zs_clk>, <&extal_clk>, <&p_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <R8A7743_CLK_AUDIO_DMAC0 R8A7743_CLK_AUDIO_DMAC1
+					R8A7743_CLK_THERMAL R8A7743_CLK_PWM>;
+			clock-indices = <R8A7743_CLK_AUDIO_DMAC0 R8A7743_CLK_AUDIO_DMAC1
+					R8A7743_CLK_THERMAL R8A7743_CLK_PWM>;
+			clock-output-names = "audmac0", "audmac1", "thermal", "pwm";
+		};
+		mstp7_clks: mstp7_clks@e615014c {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe615014c 0 4>, <0 0xe61501c4 0 4>;
+			clocks = <&mp_clk>,  <&hp_clk>, <&zs_clk>, <&p_clk>, <&p_clk>, <&zs_clk>,
+				 <&zs_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				 <&zx_clk>, <&zx_clk>, <&zx_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_EHCI R8A7743_CLK_HSUSB R8A7743_CLK_HSCIF2 R8A7743_CLK_SCIF5
+				R8A7743_CLK_SCIF4 R8A7743_CLK_HSCIF1 R8A7743_CLK_HSCIF0
+				R8A7743_CLK_SCIF3 R8A7743_CLK_SCIF2 R8A7743_CLK_SCIF1
+				R8A7743_CLK_SCIF0 R8A7743_CLK_DU1 R8A7743_CLK_DU0
+				R8A7743_CLK_LVDS0
+			>;
+			clock-output-names =
+				"ehci", "hsusb", "hscif2", "scif5", "scif4", "hscif1", "hscif0",
+				"scif3", "scif2", "scif1", "scif0", "du1", "du0", "lvds0";
+		};
+		mstp8_clks: mstp8_clks@e6150990 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150990 0 4>, <0 0xe61509a0 0 4>;
+			clocks = <&zx_clk>, <&zg_clk>, <&zg_clk>, <&zg_clk>, <&p_clk>,
+				 <&zs_clk>, <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_IPMMU_GP
+				R8A7743_CLK_VIN2 R8A7743_CLK_VIN1 R8A7743_CLK_VIN0
+				R8A7743_CLK_ETHER R8A7743_CLK_SATA1 R8A7743_CLK_SATA0
+			>;
+			clock-output-names =
+				"ipmmu_gp", "vin2", "vin1", "vin0", "ether", "sata1",
+				"sata0";
+		};
+		mstp9_clks: mstp9_clks@e6150994 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150994 0 4>, <0 0xe61509a4 0 4>;
+			clocks = <&cp_clk>, <&cp_clk>, <&cp_clk>, <&cp_clk>,
+				 <&cp_clk>, <&cp_clk>, <&cp_clk>, <&cp_clk>,
+				 <&p_clk>, <&p_clk>, <&cpg_clocks R8A7743_CLK_QSPI>, <&hp_clk>,
+				 <&hp_clk>, <&hp_clk>, <&hp_clk>,
+				 <&hp_clk>, <&hp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_GPIO7 R8A7743_CLK_GPIO6 R8A7743_CLK_GPIO5 R8A7743_CLK_GPIO4
+				R8A7743_CLK_GPIO3 R8A7743_CLK_GPIO2 R8A7743_CLK_GPIO1 R8A7743_CLK_GPIO0
+				R8A7743_CLK_RCAN1 R8A7743_CLK_RCAN0 R8A7743_CLK_QSPI_MOD R8A7743_CLK_I2C5
+				R8A7743_CLK_I2C4 R8A7743_CLK_I2C3 R8A7743_CLK_I2C2
+				R8A7743_CLK_I2C1 R8A7743_CLK_I2C0
+			>;
+			clock-output-names =
+				"gpio7", "gpio6", "gpio5", "gpio4", "gpio3", "gpio2", "gpio1", "gpio0",
+				"rcan1", "rcan0", "qspi_mod", "i2c5", "i2c4", "i2c3", "i2c2",
+				"i2c1", "i2c0";
+		};
+		mstp10_clks: mstp10_clks@e6150998 {
+			compatible = "renesas,r8a7743-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150998 0 4>, <0 0xe61509a8 0 4>;
+			clocks = <&p_clk>, /* parent of SCU */
+				<&p_clk>,
+				<&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				<&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>,
+				<&mstp10_clks R8A7743_CLK_SCU>, <&mstp10_clks R8A7743_CLK_SCU>;
+
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7743_CLK_SCU
+				R8A7743_CLK_SSI
+				R8A7743_CLK_SSI9 R8A7743_CLK_SSI8 R8A7743_CLK_SSI7 R8A7743_CLK_SSI6 R8A7743_CLK_SSI5
+				R8A7743_CLK_SSI4 R8A7743_CLK_SSI3 R8A7743_CLK_SSI2 R8A7743_CLK_SSI1 R8A7743_CLK_SSI0
+				R8A7743_CLK_DVC1 R8A7743_CLK_DVC0
+				R8A7743_CLK_SRC9 R8A7743_CLK_SRC8 R8A7743_CLK_SRC7 R8A7743_CLK_SRC6 R8A7743_CLK_SRC5
+				R8A7743_CLK_SRC4 R8A7743_CLK_SRC3 R8A7743_CLK_SRC2 R8A7743_CLK_SRC1 R8A7743_CLK_SRC0
+			>;
+			clock-indices = <
+				R8A7743_CLK_SCU
+				R8A7743_CLK_SSI
+				R8A7743_CLK_SSI9 R8A7743_CLK_SSI8 R8A7743_CLK_SSI7 R8A7743_CLK_SSI6 R8A7743_CLK_SSI5
+				R8A7743_CLK_SSI4 R8A7743_CLK_SSI3 R8A7743_CLK_SSI2 R8A7743_CLK_SSI1 R8A7743_CLK_SSI0
+				R8A7743_CLK_DVC1 R8A7743_CLK_DVC0
+				R8A7743_CLK_SRC9 R8A7743_CLK_SRC8 R8A7743_CLK_SRC7 R8A7743_CLK_SRC6 R8A7743_CLK_SRC5
+				R8A7743_CLK_SRC4 R8A7743_CLK_SRC3 R8A7743_CLK_SRC2 R8A7743_CLK_SRC1 R8A7743_CLK_SRC0
+			>;
+			clock-output-names =
+				"scu", "ssi",
+				"ssi9", "ssi8", "ssi7", "ssi6", "ssi5",
+				"ssi4", "ssi3", "ssi2", "ssi1", "ssi0",
+				"dvc1", "dvc0",
+				"src9", "src8", "src7", "src6", "src5",
+				"src4", "src3", "src2", "src1", "src0";
+		};
+	};
+
+	qspi: spi@e6b10000 {
+		compatible = "renesas,qspi-r8a7743", "renesas,qspi";
+		reg = <0 0xe6b10000 0 0x2c>;
+		interrupts = <0 184 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7743_CLK_QSPI_MOD>;
+		num-cs = <1>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof0: spi@e6e20000 {
+		compatible = "renesas,msiof-r8a7743";
+		reg = <0 0xe6e20000 0 0x0064>;
+		interrupts = <0 156 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp0_clks R8A7743_CLK_MSIOF0>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof1: spi@e6e10000 {
+		compatible = "renesas,msiof-r8a7743";
+		reg = <0 0xe6e10000 0 0x0064>;
+		interrupts = <0 157 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp2_clks R8A7743_CLK_MSIOF1>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof2: spi@e6e00000 {
+		compatible = "renesas,msiof-r8a7743";
+		reg = <0 0xe6e00000 0 0x0064>;
+		interrupts = <0 158 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp2_clks R8A7743_CLK_MSIOF2>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	pci0: pci@ee090000 {
+		compatible = "renesas,pci-r8a7743";
+		device_type = "pci";
+		clocks = <&mstp7_clks R8A7743_CLK_EHCI>;
+		reg = <0 0xee090000 0 0xc00>,
+		      <0 0xee080000 0 0x1100>;
+		interrupts = <0 108 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+
+		bus-range = <0 0>;
+		#address-cells = <3>;
+		#size-cells = <2>;
+		#interrupt-cells = <1>;
+		ranges = <0x02000000 0 0xee080000 0 0xee080000 0 0x00010000>;
+		interrupt-map-mask = <0xff00 0 0 0x7>;
+		interrupt-map = <0x0000 0 0 1 &gic 0 108 IRQ_TYPE_LEVEL_HIGH
+				 0x0800 0 0 1 &gic 0 108 IRQ_TYPE_LEVEL_HIGH
+				 0x1000 0 0 2 &gic 0 108 IRQ_TYPE_LEVEL_HIGH>;
+	};
+
+	pci1: pci@ee0d0000 {
+		compatible = "renesas,pci-r8a7743";
+		device_type = "pci";
+		clocks = <&mstp7_clks R8A7743_CLK_EHCI>;
+		reg = <0 0xee0d0000 0 0xc00>,
+		      <0 0xee0c0000 0 0x1100>;
+		interrupts = <0 113 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+
+		bus-range = <1 1>;
+		#address-cells = <3>;
+		#size-cells = <2>;
+		#interrupt-cells = <1>;
+		ranges = <0x02000000 0 0xee0c0000 0 0xee0c0000 0 0x00010000>;
+		interrupt-map-mask = <0xff00 0 0 0x7>;
+		interrupt-map = <0x0000 0 0 1 &gic 0 113 IRQ_TYPE_LEVEL_HIGH
+				 0x0800 0 0 1 &gic 0 113 IRQ_TYPE_LEVEL_HIGH
+				 0x1000 0 0 2 &gic 0 113 IRQ_TYPE_LEVEL_HIGH>;
+	};
+
+	pciec: pcie@fe000000 {
+		compatible = "renesas,pcie-r8a7743";
+		reg = <0 0xfe000000 0 0x80000>;
+		#address-cells = <3>;
+		#size-cells = <2>;
+		bus-range = <0x00 0xff>;
+		device_type = "pci";
+		ranges = <0x01000000 0 0x00000000 0 0xfe100000 0 0x00100000
+			  0x02000000 0 0xfe200000 0 0xfe200000 0 0x00200000
+			  0x02000000 0 0x30000000 0 0x30000000 0 0x08000000
+			  0x42000000 0 0x38000000 0 0x38000000 0 0x08000000>;
+		/* Map all possible DDR as inbound ranges */
+		dma-ranges = <0x42000000 0 0x40000000 0 0x40000000 0 0x80000000
+			      0x43000000 2 0x00000000 2 0x00000000 1 0x00000000>;
+		interrupts = <0 116 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 117 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 118 IRQ_TYPE_LEVEL_HIGH>;
+		#interrupt-cells = <1>;
+		interrupt-map-mask = <0 0 0 0>;
+		interrupt-map = <0 0 0 0 &gic 0 116 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7743_CLK_PCIEC>, <&pcie_bus_clk>;
+		clock-names = "pcie", "pcie_bus";
+		status = "disabled";
+	};
+
+	rcar_sound: rcar_sound@0xec500000 {
+		#sound-dai-cells = <1>;
+		compatible =  "renesas,rcar_sound-r8a7743", "renesas,rcar_sound-gen2", "renesas,rcar_sound";
+		reg =	<0 0xec500000 0 0x1000>, /* SCU */
+			<0 0xec5a0000 0 0x100>,  /* ADG */
+			<0 0xec540000 0 0x1000>, /* SSIU */
+			<0 0xec541000 0 0x1280>; /* SSI */
+		clocks = <&mstp10_clks R8A7743_CLK_SSI>,
+			<&mstp10_clks R8A7743_CLK_SSI9>, <&mstp10_clks R8A7743_CLK_SSI8>,
+			<&mstp10_clks R8A7743_CLK_SSI7>, <&mstp10_clks R8A7743_CLK_SSI6>,
+			<&mstp10_clks R8A7743_CLK_SSI5>, <&mstp10_clks R8A7743_CLK_SSI4>,
+			<&mstp10_clks R8A7743_CLK_SSI3>, <&mstp10_clks R8A7743_CLK_SSI2>,
+			<&mstp10_clks R8A7743_CLK_SSI1>, <&mstp10_clks R8A7743_CLK_SSI0>,
+			<&mstp10_clks R8A7743_CLK_SRC9>, <&mstp10_clks R8A7743_CLK_SRC8>,
+			<&mstp10_clks R8A7743_CLK_SRC7>, <&mstp10_clks R8A7743_CLK_SRC6>,
+			<&mstp10_clks R8A7743_CLK_SRC5>, <&mstp10_clks R8A7743_CLK_SRC4>,
+			<&mstp10_clks R8A7743_CLK_SRC3>, <&mstp10_clks R8A7743_CLK_SRC2>,
+			<&mstp10_clks R8A7743_CLK_SRC1>, <&mstp10_clks R8A7743_CLK_SRC0>,
+			<&mstp10_clks R8A7743_CLK_DVC0>, <&mstp10_clks R8A7743_CLK_DVC1>,
+			<&audio_clk_a>, <&audio_clk_b>, <&audio_clk_c>, <&m2_clk>;
+		clock-names = "ssi",
+				"ssi.9", "ssi.8", "ssi.7", "ssi.6", "ssi.5",
+				"ssi.4", "ssi.3", "ssi.2", "ssi.1", "ssi.0",
+				"src.9", "src.8", "src.7", "src.6", "src.5",
+				"src.4", "src.3", "src.2", "src.1", "src.0",
+				"dvc.0", "dvc.1",
+				"clk_a", "clk_b", "clk_c", "clk_i";
+
+		dmas =		<&audma0 0x01>,	<&audma1 0x02>,	<&audma0 0x15>,	<&audma1 0x16>,
+				<&audma0 0x03>,	<&audma1 0x04>,	<&audma0 0x49>,	<&audma1 0x4a>,
+				<&audma0 0x05>,	<&audma1 0x06>,	<&audma0 0x63>,	<&audma1 0x64>,
+				<&audma0 0x07>,	<&audma1 0x08>,	<&audma0 0x6f>,	<&audma1 0x70>,
+				<&audma0 0x09>,	<&audma1 0x0a>,	<&audma0 0x71>,	<&audma1 0x72>,
+				<&audma0 0x0b>,	<&audma1 0x0c>,	<&audma0 0x73>,	<&audma1 0x74>,
+				<&audma0 0x0d>,	<&audma1 0x0e>,	<&audma0 0x75>,	<&audma1 0x76>,
+				<&audma0 0x0f>,	<&audma1 0x10>,	<&audma0 0x79>,	<&audma1 0x7a>,
+				<&audma0 0x11>,	<&audma1 0x12>,	<&audma0 0x7b>,	<&audma1 0x7c>,
+				<&audma0 0x13>,	<&audma1 0x14>,	<&audma0 0x7d>,	<&audma1 0x7e>,
+
+				<&audma0 0x85>,	<&audma1 0x9a>,	<&audma0 0xbc>,
+				<&audma0 0x87>,	<&audma1 0x9c>,	<&audma0 0xbe>,
+				<&audma0 0x89>,	<&audma1 0x9e>,
+				<&audma0 0x8b>,	<&audma1 0xa0>,
+				<&audma0 0x8d>,	<&audma1 0xb0>,
+				<&audma0 0x8f>,	<&audma1 0xb2>,
+				<&audma0 0x91>,	<&audma1 0xb4>,
+				<&audma0 0x93>,	<&audma1 0xb6>,
+				<&audma0 0x95>,	<&audma1 0xb8>,
+				<&audma0 0x97>,	<&audma1 0xba>,
+
+				<&audmapp 0x2d00>,	<&audmapp 0x2e00>,	<&audmapp 0x2f00>,	<&audmapp 0x3000>,	<&audmapp 0x3100>,
+				<&audmapp 0x2d04>,	<&audmapp 0x2e04>,	<&audmapp 0x2f04>,	<&audmapp 0x3004>,	<&audmapp 0x3104>,
+				<&audmapp 0x2d08>,	<&audmapp 0x2e08>,	<&audmapp 0x2f08>,	<&audmapp 0x3008>,	<&audmapp 0x3108>,
+				<&audmapp 0x2d0c>,	<&audmapp 0x2e0c>,	<&audmapp 0x2f0c>,	<&audmapp 0x300c>,	<&audmapp 0x310c>,
+				<&audmapp 0x2d0d>,	<&audmapp 0x2e0d>,	<&audmapp 0x2f0d>,	<&audmapp 0x300d>,	<&audmapp 0x310d>,
+				<&audmapp 0x2d0e>,	<&audmapp 0x2e0e>,	<&audmapp 0x2f0e>,	<&audmapp 0x300e>,	<&audmapp 0x310e>,
+				<&audmapp 0x2d0f>,	<&audmapp 0x2e0f>,	<&audmapp 0x2f0f>,	<&audmapp 0x300f>,	<&audmapp 0x310f>,
+				<&audmapp 0x2d10>,	<&audmapp 0x2e10>,	<&audmapp 0x2f10>,	<&audmapp 0x3010>,	<&audmapp 0x3110>,
+				<&audmapp 0x2d11>,	<&audmapp 0x2e11>,	<&audmapp 0x2f11>,	<&audmapp 0x3011>,	<&audmapp 0x3111>,
+				<&audmapp 0x2d12>,	<&audmapp 0x2e12>,	<&audmapp 0x2f12>,	<&audmapp 0x3012>,	<&audmapp 0x3112>,
+
+				<&audmapp 0x3200>,	<&audmapp 0x3300>,	<&audmapp 0x3400>,	<&audmapp 0x3500>,	<&audmapp 0x3600>,
+				<&audmapp 0x3204>,	<&audmapp 0x3304>,	<&audmapp 0x3404>,	<&audmapp 0x3504>,	<&audmapp 0x3604>,
+				<&audmapp 0x3208>,	<&audmapp 0x3308>,	<&audmapp 0x3408>,	<&audmapp 0x3508>,	<&audmapp 0x3608>,
+				<&audmapp 0x320c>,	<&audmapp 0x330c>,	<&audmapp 0x340c>,	<&audmapp 0x350c>,	<&audmapp 0x360c>,
+				<&audmapp 0x320d>,	<&audmapp 0x330d>,	<&audmapp 0x340d>,	<&audmapp 0x350d>,	<&audmapp 0x360d>,
+				<&audmapp 0x320e>,	<&audmapp 0x330e>,	<&audmapp 0x340e>,	<&audmapp 0x350e>,	<&audmapp 0x360e>,
+				<&audmapp 0x320f>,	<&audmapp 0x330f>,	<&audmapp 0x340f>,	<&audmapp 0x350f>,	<&audmapp 0x360f>,
+				<&audmapp 0x3210>,	<&audmapp 0x3310>,	<&audmapp 0x3410>,	<&audmapp 0x3510>,	<&audmapp 0x3610>,
+				<&audmapp 0x3211>,	<&audmapp 0x3311>,	<&audmapp 0x3411>,	<&audmapp 0x3511>,	<&audmapp 0x3611>,
+				<&audmapp 0x3212>,	<&audmapp 0x3312>,	<&audmapp 0x3412>,	<&audmapp 0x3512>,	<&audmapp 0x3612>,
+
+				<&audmapp 0x002d>,	<&audmapp 0x002e>,	<&audmapp 0x002f>,	<&audmapp 0x0030>,	<&audmapp 0x0031>,
+				<&audmapp 0x042d>,	<&audmapp 0x042e>,	<&audmapp 0x042f>,	<&audmapp 0x0430>,	<&audmapp 0x0431>,
+				<&audmapp 0x082d>,	<&audmapp 0x082e>,	<&audmapp 0x082f>,	<&audmapp 0x0830>,	<&audmapp 0x0831>,
+				<&audmapp 0x0c2d>,	<&audmapp 0x0c2e>,	<&audmapp 0x0c2f>,	<&audmapp 0x0c30>,	<&audmapp 0x0c31>,
+				<&audmapp 0x0d2d>,	<&audmapp 0x0d2e>,	<&audmapp 0x0d2f>,	<&audmapp 0x0d30>,	<&audmapp 0x0d31>,
+				<&audmapp 0x0e2d>,	<&audmapp 0x0e2e>,	<&audmapp 0x0e2f>,	<&audmapp 0x0e30>,	<&audmapp 0x0e31>,
+				<&audmapp 0x0f2d>,	<&audmapp 0x0f2e>,	<&audmapp 0x0f2f>,	<&audmapp 0x0f30>,	<&audmapp 0x0f31>,
+				<&audmapp 0x102d>,	<&audmapp 0x102e>,	<&audmapp 0x102f>,	<&audmapp 0x1030>,	<&audmapp 0x1031>,
+				<&audmapp 0x112d>,	<&audmapp 0x112e>,	<&audmapp 0x112f>,	<&audmapp 0x1130>,	<&audmapp 0x1131>,
+				<&audmapp 0x122d>,	<&audmapp 0x122e>,	<&audmapp 0x122f>,	<&audmapp 0x1230>,	<&audmapp 0x1231>,
+
+				<&audmapp 0x0032>,	<&audmapp 0x0033>,	<&audmapp 0x0034>,	<&audmapp 0x0035>,	<&audmapp 0x0036>,
+				<&audmapp 0x0432>,	<&audmapp 0x0433>,	<&audmapp 0x0434>,	<&audmapp 0x0435>,	<&audmapp 0x0436>,
+				<&audmapp 0x0832>,	<&audmapp 0x0833>,	<&audmapp 0x0834>,	<&audmapp 0x0835>,	<&audmapp 0x0836>,
+				<&audmapp 0x0c32>,	<&audmapp 0x0c33>,	<&audmapp 0x0c34>,	<&audmapp 0x0c35>,	<&audmapp 0x0c36>,
+				<&audmapp 0x0d32>,	<&audmapp 0x0d33>,	<&audmapp 0x0d34>,	<&audmapp 0x0d35>,	<&audmapp 0x0d36>,
+				<&audmapp 0x0e32>,	<&audmapp 0x0e33>,	<&audmapp 0x0e34>,	<&audmapp 0x0e35>,	<&audmapp 0x0e36>,
+				<&audmapp 0x0f32>,	<&audmapp 0x0f33>,	<&audmapp 0x0f34>,	<&audmapp 0x0f35>,	<&audmapp 0x0f36>,
+				<&audmapp 0x1032>,	<&audmapp 0x1033>,	<&audmapp 0x1034>,	<&audmapp 0x1035>,	<&audmapp 0x1036>,
+				<&audmapp 0x1132>,	<&audmapp 0x1133>,	<&audmapp 0x1134>,	<&audmapp 0x1135>,	<&audmapp 0x1136>,
+				<&audmapp 0x1232>,	<&audmapp 0x1233>,	<&audmapp 0x1234>,	<&audmapp 0x1235>,	<&audmapp 0x1236>,
+				<&audmapp 0x3700>,	<&audmapp 0x3800>,
+				<&audmapp 0x3704>,	<&audmapp 0x3804>,
+				<&audmapp 0x3708>,	<&audmapp 0x3808>,
+				<&audmapp 0x370c>,	<&audmapp 0x380c>,
+				<&audmapp 0x370d>,	<&audmapp 0x380d>,
+				<&audmapp 0x370e>,	<&audmapp 0x380e>,
+				<&audmapp 0x370f>,	<&audmapp 0x380f>,
+				<&audmapp 0x3710>,	<&audmapp 0x3810>,
+				<&audmapp 0x3711>,	<&audmapp 0x3811>,
+				<&audmapp 0x3712>,	<&audmapp 0x3812>;
+
+		dma-names =	"mem_ssi0",	"ssi0_mem",	"mem_ssiu0",	"ssiu0_mem",
+				"mem_ssi1",	"ssi1_mem",	"mem_ssiu1",	"ssiu1_mem",
+				"mem_ssi2",	"ssi2_mem",	"mem_ssiu2",	"ssiu2_mem",
+				"mem_ssi3",	"ssi3_mem",	"mem_ssiu3",	"ssiu3_mem",
+				"mem_ssi4",	"ssi4_mem",	"mem_ssiu4",	"ssiu4_mem",
+				"mem_ssi5",	"ssi5_mem",	"mem_ssiu5",	"ssiu5_mem",
+				"mem_ssi6",	"ssi6_mem",	"mem_ssiu6",	"ssiu6_mem",
+				"mem_ssi7",	"ssi7_mem",	"mem_ssiu7",	"ssiu7_mem",
+				"mem_ssi8",	"ssi8_mem",	"mem_ssiu8",	"ssiu8_mem",
+				"mem_ssi9",	"ssi9_mem",	"mem_ssiu9",	"ssiu9_mem",
+
+				"mem_src0",	"src0_mem",	"dvc0_mem",
+				"mem_src1",	"src1_mem",	"dvc1_mem",
+				"mem_src2",	"src2_mem",
+				"mem_src3",	"src3_mem",
+				"mem_src4",	"src4_mem",
+				"mem_src5",	"src5_mem",
+				"mem_src6",	"src6_mem",
+				"mem_src7",	"src7_mem",
+				"mem_src8",	"src8_mem",
+				"mem_src9",	"src9_mem",
+
+				"src0_ssiu0",		"src1_ssiu0",		"src2_ssiu0",		"src3_ssiu0",		"src4_ssiu0",
+				"src0_ssiu1",		"src1_ssiu1",		"src2_ssiu1",		"src3_ssiu1",		"src4_ssiu1",
+				"src0_ssiu2",		"src1_ssiu2",		"src2_ssiu2",		"src3_ssiu2",		"src4_ssiu2",
+				"src0_ssiu3",		"src1_ssiu3",		"src2_ssiu3",		"src3_ssiu3",		"src4_ssiu3",
+				"src0_ssiu4",		"src1_ssiu4",		"src2_ssiu4",		"src3_ssiu4",		"src4_ssiu4",
+				"src0_ssiu5",		"src1_ssiu5",		"src2_ssiu5",		"src3_ssiu5",		"src4_ssiu5",
+				"src0_ssiu6",		"src1_ssiu6",		"src2_ssiu6",		"src3_ssiu6",		"src4_ssiu6",
+				"src0_ssiu7",		"src1_ssiu7",		"src2_ssiu7",		"src3_ssiu7",		"src4_ssiu7",
+				"src0_ssiu8",		"src1_ssiu8",		"src2_ssiu8",		"src3_ssiu8",		"src4_ssiu8",
+				"src0_ssiu9",		"src1_ssiu9",		"src2_ssiu9",		"src3_ssiu9",		"src4_ssiu9",
+
+				"src5_ssiu0",		"src6_ssiu0",		"src7_ssiu0",		"src8_ssiu0",		"src9_ssiu0",
+				"src5_ssiu1",		"src6_ssiu1",		"src7_ssiu1",		"src8_ssiu1",		"src9_ssiu1",
+				"src5_ssiu2",		"src6_ssiu2",		"src7_ssiu2",		"src8_ssiu2",		"src9_ssiu2",
+				"src5_ssiu3",		"src6_ssiu3",		"src7_ssiu3",		"src8_ssiu3",		"src9_ssiu3",
+				"src5_ssiu4",		"src6_ssiu4",		"src7_ssiu4",		"src8_ssiu4",		"src9_ssiu4",
+				"src5_ssiu5",		"src6_ssiu5",		"src7_ssiu5",		"src8_ssiu5",		"src9_ssiu5",
+				"src5_ssiu6",		"src6_ssiu6",		"src7_ssiu6",		"src8_ssiu6",		"src9_ssiu6",
+				"src5_ssiu7",		"src6_ssiu7",		"src7_ssiu7",		"src8_ssiu7",		"src9_ssiu7",
+				"src5_ssiu8",		"src6_ssiu8",		"src7_ssiu8",		"src8_ssiu8",		"src9_ssiu8",
+				"src5_ssiu9",		"src6_ssiu9",		"src7_ssiu9",		"src8_ssiu9",		"src9_ssiu9",
+
+				"ssiu0_src0",		"ssiu0_src1",		"ssiu0_src2",		"ssiu0_src3",		"ssiu0_src4",
+				"ssiu1_src0",		"ssiu1_src1",		"ssiu1_src2",		"ssiu1_src3",		"ssiu1_src4",
+				"ssiu2_src0",		"ssiu2_src1",		"ssiu2_src2",		"ssiu2_src3",		"ssiu2_src4",
+				"ssiu3_src0",		"ssiu3_src1",		"ssiu3_src2",		"ssiu3_src3",		"ssiu3_src4",
+				"ssiu4_src0",		"ssiu4_src1",		"ssiu4_src2",		"ssiu4_src3",		"ssiu4_src4",
+				"ssiu5_src0",		"ssiu5_src1",		"ssiu5_src2",		"ssiu5_src3",		"ssiu5_src4",
+				"ssiu6_src0",		"ssiu6_src1",		"ssiu6_src2",		"ssiu6_src3",		"ssiu6_src4",
+				"ssiu7_src0",		"ssiu7_src1",		"ssiu7_src2",		"ssiu7_src3",		"ssiu7_src4",
+				"ssiu8_src0",		"ssiu8_src1",		"ssiu8_src2",		"ssiu8_src3",		"ssiu8_src4",
+				"ssiu9_src0",		"ssiu9_src1",		"ssiu9_src2",		"ssiu9_src3",		"ssiu9_src4",
+
+				"ssiu0_src5",		"ssiu0_src6",		"ssiu0_src7",		"ssiu0_src8",		"ssiu0_src9",
+				"ssiu1_src5",		"ssiu1_src6",		"ssiu1_src7",		"ssiu1_src8",		"ssiu1_src9",
+				"ssiu2_src5",		"ssiu2_src6",		"ssiu2_src7",		"ssiu2_src8",		"ssiu2_src9",
+				"ssiu3_src5",		"ssiu3_src6",		"ssiu3_src7",		"ssiu3_src8",		"ssiu3_src9",
+				"ssiu4_src5",		"ssiu4_src6",		"ssiu4_src7",		"ssiu4_src8",		"ssiu4_src9",
+				"ssiu5_src5",		"ssiu5_src6",		"ssiu5_src7",		"ssiu5_src8",		"ssiu5_src9",
+				"ssiu6_src5",		"ssiu6_src6",		"ssiu6_src7",		"ssiu6_src8",		"ssiu6_src9",
+				"ssiu7_src5",		"ssiu7_src6",		"ssiu7_src7",		"ssiu7_src8",		"ssiu7_src9",
+				"ssiu8_src5",		"ssiu8_src6",		"ssiu8_src7",		"ssiu8_src8",		"ssiu8_src9",
+				"ssiu9_src5",		"ssiu9_src6",		"ssiu9_src7",		"ssiu9_src8",		"ssiu9_src9",
+				"dvc0_ssiu0",		"dvc1_ssiu0",
+				"dvc0_ssiu1",		"dvc1_ssiu1",
+				"dvc0_ssiu2",		"dvc1_ssiu2",
+				"dvc0_ssiu3",		"dvc1_ssiu3",
+				"dvc0_ssiu4",		"dvc1_ssiu4",
+				"dvc0_ssiu5",		"dvc1_ssiu5",
+				"dvc0_ssiu6",		"dvc1_ssiu6",
+				"dvc0_ssiu7",		"dvc1_ssiu7",
+				"dvc0_ssiu8",		"dvc1_ssiu8",
+				"dvc0_ssiu9",		"dvc1_ssiu9";
+
+		status = "disabled";
+
+		rcar_sound,dvc {
+			dvc0: dvc@0 { };
+			dvc1: dvc@1 { };
+		};
+
+		rcar_sound,src {
+			src0: src@0 { interrupts = <0 352 IRQ_TYPE_LEVEL_HIGH>; };
+			src1: src@1 { interrupts = <0 353 IRQ_TYPE_LEVEL_HIGH>; };
+			src2: src@2 { interrupts = <0 354 IRQ_TYPE_LEVEL_HIGH>; };
+			src3: src@3 { interrupts = <0 355 IRQ_TYPE_LEVEL_HIGH>; };
+			src4: src@4 { interrupts = <0 356 IRQ_TYPE_LEVEL_HIGH>; };
+			src5: src@5 { interrupts = <0 357 IRQ_TYPE_LEVEL_HIGH>; };
+			src6: src@6 { interrupts = <0 358 IRQ_TYPE_LEVEL_HIGH>; };
+			src7: src@7 { interrupts = <0 359 IRQ_TYPE_LEVEL_HIGH>; };
+			src8: src@8 { interrupts = <0 360 IRQ_TYPE_LEVEL_HIGH>; };
+			src9: src@9 { interrupts = <0 361 IRQ_TYPE_LEVEL_HIGH>; };
+		};
+
+		rcar_sound,ssi {
+			ssi0: ssi@0 { interrupts = <0 370 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi1: ssi@1 { interrupts = <0 371 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi2: ssi@2 { interrupts = <0 372 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi3: ssi@3 { interrupts = <0 373 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi4: ssi@4 { interrupts = <0 374 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi5: ssi@5 { interrupts = <0 375 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi6: ssi@6 { interrupts = <0 376 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi7: ssi@7 { interrupts = <0 377 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi8: ssi@8 { interrupts = <0 378 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi9: ssi@9 { interrupts = <0 379 IRQ_TYPE_LEVEL_HIGH>; };
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/r8a7745.dtsi b/arch/arm/boot/dts/r8a7745.dtsi
new file mode 100644
index 0000000..86085fa
--- /dev/null
+++ b/arch/arm/boot/dts/r8a7745.dtsi
@@ -0,0 +1,1088 @@
+/*
+ * Device Tree Source for the r8a7745 SoC
+ *
+ * Copyright (C) 2014-2015 Renesas Electronics Corporation
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2.  This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <dt-bindings/clock/r8a7745-clock.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+#include <dt-bindings/interrupt-controller/irq.h>
+
+/ {
+	compatible = "renesas,r8a7745";
+	interrupt-parent = <&gic>;
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	aliases {
+		i2c0 = &i2c0;
+		i2c1 = &i2c1;
+		i2c2 = &i2c2;
+		i2c3 = &i2c3;
+		i2c4 = &i2c4;
+		i2c5 = &i2c5;
+		spi0 = &qspi;
+		spi1 = &msiof0;
+		spi2 = &msiof1;
+		spi3 = &msiof2;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu0: cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a7";
+			reg = <0>;
+			clock-frequency = <1000000000>;
+			clocks = <&z2_clk>;
+
+			/* kHz - uV - OPPs unknown yet */
+			operating-points = <1000000 1000000>;
+		};
+
+		cpu1: cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a7";
+			reg = <1>;
+			clock-frequency = <1000000000>;
+		};
+	};
+
+	gic: interrupt-controller@f1001000 {
+		compatible = "arm,cortex-a7-gic";
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+		interrupt-controller;
+		reg = <0 0xf1001000 0 0x1000>,
+			<0 0xf1002000 0 0x1000>,
+			<0 0xf1004000 0 0x2000>,
+			<0 0xf1006000 0 0x2000>;
+		interrupts = <1 9 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_HIGH)>;
+	};
+
+	gpio0: gpio@e6050000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6050000 0 0x50>;
+		interrupts = <0 4 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 0 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO0>;
+	};
+
+	gpio1: gpio@e6051000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6051000 0 0x50>;
+		interrupts = <0 5 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 32 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO1>;
+	};
+
+	gpio2: gpio@e6052000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6052000 0 0x50>;
+		interrupts = <0 6 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 64 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO2>;
+	};
+
+	gpio3: gpio@e6053000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6053000 0 0x50>;
+		interrupts = <0 7 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 96 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO3>;
+	};
+
+	gpio4: gpio@e6054000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6054000 0 0x50>;
+		interrupts = <0 8 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 128 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO4>;
+	};
+
+	gpio5: gpio@e6055000 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6055000 0 0x50>;
+		interrupts = <0 9 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 160 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO5>;
+	};
+
+	gpio6: gpio@e6055400 {
+		compatible = "renesas,gpio-r8a7745", "renesas,gpio-rcar";
+		reg = <0 0xe6055400 0 0x50>;
+		interrupts = <0 10 IRQ_TYPE_LEVEL_HIGH>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		gpio-ranges = <&pfc 0 192 32>;
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		clocks = <&mstp9_clks R8A7745_CLK_GPIO6>;
+	};
+
+	timer {
+		compatible = "arm,armv7-timer";
+		interrupts = <1 13 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 14 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 11 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <1 10 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>;
+	};
+
+	irqc0: interrupt-controller@e61c0000 {
+		compatible = "renesas,irqc-r8a7745", "renesas,irqc";
+		#interrupt-cells = <2>;
+		interrupt-controller;
+		reg = <0 0xe61c0000 0 0x200>;
+		interrupts = <0 0 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 1 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 2 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 3 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 12 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 13 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 14 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 15 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 16 IRQ_TYPE_LEVEL_HIGH>,
+			     <0 17 IRQ_TYPE_LEVEL_HIGH>;
+	};
+
+	audma0: dma-controller@ec700000 {
+		compatible = "renesas,rcar-dmac";
+		reg = <0 0xec700000 0 0x10000>;
+		interrupts =	<0 346 IRQ_TYPE_LEVEL_HIGH
+				 0 320 IRQ_TYPE_LEVEL_HIGH
+				 0 321 IRQ_TYPE_LEVEL_HIGH
+				 0 322 IRQ_TYPE_LEVEL_HIGH
+				 0 323 IRQ_TYPE_LEVEL_HIGH
+				 0 324 IRQ_TYPE_LEVEL_HIGH
+				 0 325 IRQ_TYPE_LEVEL_HIGH
+				 0 326 IRQ_TYPE_LEVEL_HIGH
+				 0 327 IRQ_TYPE_LEVEL_HIGH
+				 0 328 IRQ_TYPE_LEVEL_HIGH
+				 0 329 IRQ_TYPE_LEVEL_HIGH
+				 0 330 IRQ_TYPE_LEVEL_HIGH
+				 0 331 IRQ_TYPE_LEVEL_HIGH
+				 0 332 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "error",
+				"ch0", "ch1", "ch2", "ch3",
+				"ch4", "ch5", "ch6", "ch7",
+				"ch8", "ch9", "ch10", "ch11",
+				"ch12";
+		clocks = <&mstp5_clks R8A7745_CLK_AUDIO_DMAC0>;
+		clock-names = "fck";
+		#dma-cells = <1>;
+		dma-channels = <13>;
+	};
+
+	audmapp: dma-controller@ec740000 {
+		compatible = "renesas,rcar-audmapp";
+		#dma-cells = <1>;
+
+		reg = <0 0xec740000 0 0x200>;
+	};
+
+	/* The memory map in the User's Manual maps the cores to bus numbers */
+	i2c0: i2c@e6508000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6508000 0 0x40>;
+		interrupts = <0 287 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C0>;
+		status = "disabled";
+	};
+
+	i2c1: i2c@e6518000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6518000 0 0x40>;
+		interrupts = <0 288 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C1>;
+		status = "disabled";
+	};
+
+	i2c2: i2c@e6530000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6530000 0 0x40>;
+		interrupts = <0 286 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C2>;
+		status = "disabled";
+	};
+
+	i2c3: i2c@e6540000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6540000 0 0x40>;
+		interrupts = <0 290 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C3>;
+		status = "disabled";
+	};
+
+	i2c4: i2c@e6520000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6520000 0 0x40>;
+		interrupts = <0 19 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C4>;
+		status = "disabled";
+	};
+
+	i2c5: i2c@e6528000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "renesas,i2c-r8a7745";
+		reg = <0 0xe6528000 0 0x40>;
+		interrupts = <0 20 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_I2C5>;
+		status = "disabled";
+	};
+
+	pfc: pfc@e6060000 {
+		compatible = "renesas,pfc-r8a7745";
+		reg = <0 0xe6060000 0 0x250>;
+		#gpio-range-cells = <3>;
+	};
+
+
+	scif0: serial@e6e60000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6e60000 0 64>;
+		interrupts = <0 152 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF0>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif1: serial@e6e68000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6e68000 0 64>;
+		interrupts = <0 153 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF1>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif2: serial@e6e58000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6e58000 0 64>;
+		interrupts = <0 22 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF2>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif3: serial@e6ea8000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6ea8000 0 64>;
+		interrupts = <0 23 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF3>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif4: serial@e6ee0000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6ee0000 0 64>;
+		interrupts = <0 24 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF4>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	scif5: serial@e6ee8000 {
+		compatible = "renesas,scif-r8a7745", "renesas,scif";
+		reg = <0 0xe6ee8000 0 64>;
+		interrupts = <0 25 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_SCIF5>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif0: serial@e62c0000 {
+		compatible = "renesas,hscif-r8a7745", "renesas,hscif";
+		reg = <0 0xe62c0000 0 96>;
+		interrupts = <0 154 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_HSCIF0>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif1: serial@e62c8000 {
+		compatible = "renesas,hscif-r8a7745", "renesas,hscif";
+		reg = <0 0xe62c8000 0 96>;
+		interrupts = <0 155 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_HSCIF1>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	hscif2: serial@e62d0000 {
+		compatible = "renesas,hscif-r8a7745", "renesas,hscif";
+		reg = <0 0xe62d0000 0 96>;
+		interrupts = <0 21 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp7_clks R8A7745_CLK_HSCIF2>;
+		clock-names = "sci_ick";
+		status = "disabled";
+	};
+
+	ether: ethernet@ee700000 {
+		compatible = "renesas,ether-r8a7745";
+		reg = <0 0xee700000 0 0x400>;
+		interrupts = <0 162 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp8_clks R8A7745_CLK_ETHER>;
+		phy-mode = "rmii";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	avb: ethernet@e6800000 {
+		compatible = "renesas,gether-r8a7745";
+		reg = <0 0xe6800000 0 0x7bf>;
+		interrupts = <0 163 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp8_clks R8A7745_CLK_AVB>;
+		phy-mode = "gmii";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	sdhi0: sd@ee100000 {
+		compatible = "renesas,sdhi-r8a7745";
+		reg = <0 0xee100000 0 0x200>;
+		dma-names = "tx", "rx";
+		interrupt-parent = <&gic>;
+		interrupts = <0 165 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7745_CLK_SDHI0>;
+		cap-uhs-sdr104;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <195000000>;
+		renesas,mmc-scc-tapnum = <8>;
+		renesas,pfcs = <0xe6060000 0x6c>;
+		renesas,id = <1>;
+		status = "disabled";
+	};
+
+	sdhi1: sd@ee140000 {
+		compatible = "renesas,sdhi-r8a7745";
+		reg = <0 0xee140000 0 0x100>;
+		dma-names = "tx", "rx";
+		interrupt-parent = <&gic>;
+		interrupts = <0 167 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7745_CLK_SDHI1>;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <97500000>;
+		renesas,pfcs = <0xe6060000 0x6c>;
+		renesas,id = <2>;
+		status = "disabled";
+	};
+
+	sdhi2: sd@ee160000 {
+		compatible = "renesas,sdhi-r8a7745";
+		reg = <0 0xee160000 0 0x100>;
+		dma-names = "tx", "rx";
+		interrupt-parent = <&gic>;
+		interrupts = <0 168 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7745_CLK_SDHI2>;
+		cap-uhs-sdr50;
+		dma-xmit-sz = <32>;
+		renesas,clk-rate = <97500000>;
+		status = "disabled";
+	};
+
+	mmcif0: mmcif@ee200000 {
+		compatible = "renesas,mmcif-r8a7745", "renesas,sh-mmcif";
+		reg = <0 0xee200000 0 0x80>;
+		dma-names = "tx", "rx";
+		interrupts = <0 169 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp3_clks R8A7745_CLK_MMCIF0>;
+		renesas,clk-rate = <97500000>;
+		reg-io-width = <4>;
+		status = "disabled";
+	};
+
+	clocks {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		/* External root clock */
+		extal_clk: extal_clk {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			/* This value must be overriden by the board. */
+			clock-frequency = <0>;
+			clock-output-names = "extal";
+		};
+
+		/*
+		 * The external audio clocks are configured as 0 Hz fixed frequency clocks by
+		 * default. Boards that provide audio clocks should override them.
+		 */
+		audio_clk_a: audio_clk_a {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_a";
+		};
+		audio_clk_b: audio_clk_b {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_b";
+		};
+		audio_clk_c: audio_clk_c {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "audio_clk_c";
+		};
+
+		/* Special CPG clocks */
+		cpg_clocks: cpg_clocks@e6150000 {
+			compatible = "renesas,r8a7745-cpg-clocks",
+				     "renesas,rcar-gen2-cpg-clocks";
+			reg = <0 0xe6150000 0 0x1000>;
+			clocks = <&extal_clk>;
+			#clock-cells = <1>;
+			clock-output-names = "main", "pll0", "pll1", "pll3",
+					     "lb", "qspi", "sdh", "sd0", "z";
+		};
+		/* Variable factor clocks */
+		sd1_clk: sd2_clk@e6150078 {
+			compatible = "renesas,r8a7745-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe6150078 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "sd1";
+		};
+		sd2_clk: sd3_clk@e615026c {
+			compatible = "renesas,r8a7745-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe615026c 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "sd2";
+		};
+		mmc0_clk: mmc0_clk@e6150240 {
+			compatible = "renesas,r8a7745-div6-clock", "renesas,cpg-div6-clock";
+			reg = <0 0xe6150240 0 4>;
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-output-names = "mmc0";
+		};
+
+		/* Fixed factor clocks */
+		pll1_div2_clk: pll1_div2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "pll1_div2";
+		};
+		z2_clk: z2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "z2";
+		};
+		zg_clk: zg_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <6>;
+			clock-mult = <1>;
+			clock-output-names = "zg";
+		};
+		zx_clk: zx_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <3>;
+			clock-mult = <1>;
+			clock-output-names = "zx";
+		};
+		zs_clk: zs_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <6>;
+			clock-mult = <1>;
+			clock-output-names = "zs";
+		};
+		hp_clk: hp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <12>;
+			clock-mult = <1>;
+			clock-output-names = "hp";
+		};
+		i_clk: i_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "i";
+		};
+		b_clk: b_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <12>;
+			clock-mult = <1>;
+			clock-output-names = "b";
+		};
+		p_clk: p_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <24>;
+			clock-mult = <1>;
+			clock-output-names = "p";
+		};
+		cl_clk: cl_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <48>;
+			clock-mult = <1>;
+			clock-output-names = "cl";
+		};
+		m2_clk: m2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "m2";
+		};
+		imp_clk: imp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <4>;
+			clock-mult = <1>;
+			clock-output-names = "imp";
+		};
+		rclk_clk: rclk_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <(48 * 1024)>;
+			clock-mult = <1>;
+			clock-output-names = "rclk";
+		};
+		oscclk_clk: oscclk_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <(12 * 1024)>;
+			clock-mult = <1>;
+			clock-output-names = "oscclk";
+		};
+		zb3_clk: zb3_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <4>;
+			clock-mult = <1>;
+			clock-output-names = "zb3";
+		};
+		zb3d2_clk: zb3d2_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "zb3d2";
+		};
+		ddr_clk: ddr_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL3>;
+			#clock-cells = <0>;
+			clock-div = <8>;
+			clock-mult = <1>;
+			clock-output-names = "ddr";
+		};
+		mp_clk: mp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&pll1_div2_clk>;
+			#clock-cells = <0>;
+			clock-div = <15>;
+			clock-mult = <1>;
+			clock-output-names = "mp";
+		};
+		cp_clk: cp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7745_CLK_PLL1>;
+			#clock-cells = <0>;
+			clock-div = <48>;
+			clock-mult = <1>;
+			clock-output-names = "cp";
+		};
+
+		acp_clk: acp_clk {
+			compatible = "fixed-factor-clock";
+			clocks = <&extal_clk>;
+			#clock-cells = <0>;
+			clock-div = <2>;
+			clock-mult = <1>;
+			clock-output-names = "acp";
+		};
+
+		/* Gate clocks */
+		mstp0_clks: mstp0_clks@e6150130 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150130 0 4>, <0 0xe6150030 0 4>;
+			clocks = <&mp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <R8A7745_CLK_MSIOF0>;
+			clock-output-names = "msiof0";
+		};
+		mstp1_clks: mstp1_clks@e6150134 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150134 0 4>, <0 0xe6150038 0 4>;
+			clocks = <&zs_clk>, <&zs_clk>, <&p_clk>, <&zg_clk>, <&zs_clk>,
+				 <&zs_clk>, <&p_clk>, <&p_clk>, <&rclk_clk>,
+				 <&zs_clk>, <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_VCP0 R8A7745_CLK_VPC0 R8A7745_CLK_TMU1
+				R8A7745_CLK_PVRSRVKM R8A7745_CLK_2DDMAC R8A7745_CLK_FDP0
+				R8A7745_CLK_TMU3 R8A7745_CLK_TMU2 R8A7745_CLK_CMT0
+				R8A7745_CLK_VSP1_DU0 R8A7745_CLK_VSP1_S
+			>;
+			clock-output-names =
+				"vcp0", "vpc0", "tmu1", "pvrsrvkm", "tddmac", "fdp0",
+				"tmu3", "tmu2", "cmt0", "vsp1-du0", "vsps";
+		};
+		mstp2_clks: mstp2_clks@e6150138 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150138 0 4>, <0 0xe6150040 0 4>;
+			clocks = <&mp_clk>, <&mp_clk>,
+				 <&zs_clk>, <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_MSIOF2
+				R8A7745_CLK_MSIOF1
+				R8A7745_CLK_SYS_DMAC1 R8A7745_CLK_SYS_DMAC0
+			>;
+			clock-output-names =
+				"msiof2", "msiof1",
+				"sys-dmac1", "sys-dmac0";
+		};
+		mstp3_clks: mstp3_clks@e615013c {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe615013c 0 4>, <0 0xe6150048 0 4>;
+			clocks = <&sd2_clk>, <&sd1_clk>, <&cpg_clocks R8A7745_CLK_SD0>,
+				 <&mmc0_clk>,
+				 <&rclk_clk>, <&hp_clk>, <&hp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_SDHI2 R8A7745_CLK_SDHI1 R8A7745_CLK_SDHI0
+				R8A7745_CLK_MMCIF0
+				R8A7745_CLK_CMT1 R8A7745_CLK_USBDMAC0 R8A7745_CLK_USBDMAC1
+			>;
+			clock-output-names =
+				"sdhi2", "sdhi1", "sdhi0", "mmcif0", "cmt1",
+				"usbdmac0", "usbdmac1";
+		};
+		mstp5_clks: mstp5_clks@e6150144 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150144 0 4>, <0 0xe615003c 0 4>;
+			clocks = <&zs_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <R8A7745_CLK_AUDIO_DMAC0>;
+			clock-indices = <R8A7745_CLK_AUDIO_DMAC0>;
+			clock-output-names = "audmac0";
+		};
+		mstp7_clks: mstp7_clks@e615014c {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe615014c 0 4>, <0 0xe61501c4 0 4>;
+			clocks = <&mp_clk>, <&hp_clk>, <&zs_clk>, <&p_clk>, <&p_clk>,
+				 <&zs_clk>, <&zs_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				 <&zx_clk>, <&zx_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_EHCI R8A7745_CLK_HSUSB R8A7745_CLK_HSCIF2
+				R8A7745_CLK_SCIF5 R8A7745_CLK_SCIF4 R8A7745_CLK_HSCIF1
+				R8A7745_CLK_HSCIF0 R8A7745_CLK_SCIF3 R8A7745_CLK_SCIF2
+				R8A7745_CLK_SCIF1 R8A7745_CLK_SCIF0 R8A7745_CLK_DU1
+				R8A7745_CLK_DU0
+			>;
+			clock-output-names =
+				"ehci", "hsusb", "hscif2", "scif5", "scif4", "hscif1",
+				"hscif0", "scif3", "scif2", "scif1", "scif0", "du1", "du0";
+		};
+		mstp8_clks: mstp8_clks@e6150990 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150990 0 4>, <0 0xe61509a0 0 4>;
+			clocks = <&zx_clk>, <&zg_clk>, <&zg_clk>, <&hp_clk>, <&p_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_IPMMU_GP
+				R8A7745_CLK_VIN1 R8A7745_CLK_VIN0 R8A7745_CLK_AVB
+				R8A7745_CLK_ETHER
+			>;
+			clock-output-names =
+				"ipmmu_gp", "vin1", "vin0", "avb", "ether";
+		};
+		mstp9_clks: mstp9_clks@e6150994 {
+			compatible = "renesas,r8a7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150994 0 4>, <0 0xe61509a4 0 4>;
+			clocks = <&cp_clk>, <&cp_clk>, <&cp_clk>,
+				 <&cp_clk>, <&cp_clk>, <&cp_clk>,
+				 <&cpg_clocks R8A7745_CLK_QSPI>, <&hp_clk>, <&hp_clk>,
+				 <&hp_clk>, <&hp_clk>, <&hp_clk>, <&hp_clk>, <&hp_clk>;
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_GPIO6 R8A7745_CLK_GPIO5 R8A7745_CLK_GPIO4
+				R8A7745_CLK_GPIO3 R8A7745_CLK_GPIO2 R8A7745_CLK_GPIO1
+				R8A7745_CLK_GPIO0
+				R8A7745_CLK_QSPI_MOD R8A7745_CLK_I2C5 R8A7745_CLK_I2C4
+				R8A7745_CLK_I2C3 R8A7745_CLK_I2C2 R8A7745_CLK_I2C1
+				R8A7745_CLK_I2C0
+			>;
+			clock-output-names =
+				"gpio6", "gpio5", "gpio4", "gpio3", "gpio2", "gpio1", "gpio0",
+				"qspi_mod", "i2c5", "i2c4", "i2c3", "i2c2", "i2c1", "i2c0";
+		};
+		mstp10_clks: mstp10_clks@e6150998 {
+			compatible = "renesas,R8A7745-mstp-clocks", "renesas,cpg-mstp-clocks";
+			reg = <0 0xe6150998 0 4>, <0 0xe61509a8 0 4>;
+			clocks = <&p_clk>, /* parent of SCU */
+				<&p_clk>,
+				<&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				<&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>, <&p_clk>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>,
+				<&mstp10_clks R8A7745_CLK_SCU>, <&mstp10_clks R8A7745_CLK_SCU>;
+
+			#clock-cells = <1>;
+			renesas,clock-indices = <
+				R8A7745_CLK_SCU
+				R8A7745_CLK_SSI
+				R8A7745_CLK_SSI9 R8A7745_CLK_SSI8 R8A7745_CLK_SSI7 R8A7745_CLK_SSI6 R8A7745_CLK_SSI5
+				R8A7745_CLK_SSI4 R8A7745_CLK_SSI3 R8A7745_CLK_SSI2 R8A7745_CLK_SSI1 R8A7745_CLK_SSI0
+				R8A7745_CLK_DVC1 R8A7745_CLK_DVC0
+				R8A7745_CLK_SRC9 R8A7745_CLK_SRC8 R8A7745_CLK_SRC7 R8A7745_CLK_SRC6 R8A7745_CLK_SRC5
+				R8A7745_CLK_SRC4 R8A7745_CLK_SRC3 R8A7745_CLK_SRC2 R8A7745_CLK_SRC1 R8A7745_CLK_SRC0
+			>;
+			clock-indices = <
+				R8A7745_CLK_SCU
+				R8A7745_CLK_SSI
+				R8A7745_CLK_SSI9 R8A7745_CLK_SSI8 R8A7745_CLK_SSI7 R8A7745_CLK_SSI6 R8A7745_CLK_SSI5
+				R8A7745_CLK_SSI4 R8A7745_CLK_SSI3 R8A7745_CLK_SSI2 R8A7745_CLK_SSI1 R8A7745_CLK_SSI0
+				R8A7745_CLK_DVC1 R8A7745_CLK_DVC0
+				R8A7745_CLK_SRC9 R8A7745_CLK_SRC8 R8A7745_CLK_SRC7 R8A7745_CLK_SRC6 R8A7745_CLK_SRC5
+				R8A7745_CLK_SRC4 R8A7745_CLK_SRC3 R8A7745_CLK_SRC2 R8A7745_CLK_SRC1 R8A7745_CLK_SRC0
+			>;
+			clock-output-names =
+				"scu", "ssi",
+				"ssi9", "ssi8", "ssi7", "ssi6", "ssi5",
+				"ssi4", "ssi3", "ssi2", "ssi1", "ssi0",
+				"dvc1", "dvc0",
+				"src9", "src8", "src7", "src6", "src5",
+				"src4", "src3", "src2", "src1", "src0";
+		};
+
+	};
+
+	qspi: spi@e6b10000 {
+		compatible = "renesas,qspi-r8a7745", "renesas,qspi";
+		reg = <0 0xe6b10000 0 0x2c>;
+		interrupts = <0 184 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp9_clks R8A7745_CLK_QSPI_MOD>;
+		num-cs = <1>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof0: spi@e6e20000 {
+		compatible = "renesas,msiof-r8a7745";
+		reg = <0 0xe6e20000 0 0x0064>;
+		interrupts = <0 156 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp0_clks R8A7745_CLK_MSIOF0>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof1: spi@e6e10000 {
+		compatible = "renesas,msiof-r8a7745";
+		reg = <0 0xe6e10000 0 0x0064>;
+		interrupts = <0 157 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp2_clks R8A7745_CLK_MSIOF1>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	msiof2: spi@e6e00000 {
+		compatible = "renesas,msiof-r8a7745";
+		reg = <0 0xe6e00000 0 0x0064>;
+		interrupts = <0 158 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&mstp2_clks R8A7745_CLK_MSIOF2>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	rcar_sound: rcar_sound@0xec500000 {
+		#sound-dai-cells = <1>;
+		compatible =  "renesas,rcar_sound-r8a7745", "renesas,rcar_sound-gen2", "renesas,rcar_sound";
+		reg =	<0 0xec500000 0 0x1000>, /* SCU */
+			<0 0xec5a0000 0 0x100>,  /* ADG */
+			<0 0xec540000 0 0x1000>, /* SSIU */
+			<0 0xec541000 0 0x1280>; /* SSI */
+		clocks = <&mstp10_clks R8A7745_CLK_SSI>,
+			<&mstp10_clks R8A7745_CLK_SSI9>, <&mstp10_clks R8A7745_CLK_SSI8>,
+			<&mstp10_clks R8A7745_CLK_SSI7>, <&mstp10_clks R8A7745_CLK_SSI6>,
+			<&mstp10_clks R8A7745_CLK_SSI5>, <&mstp10_clks R8A7745_CLK_SSI4>,
+			<&mstp10_clks R8A7745_CLK_SSI3>, <&mstp10_clks R8A7745_CLK_SSI2>,
+			<&mstp10_clks R8A7745_CLK_SSI1>, <&mstp10_clks R8A7745_CLK_SSI0>,
+			<&mstp10_clks R8A7745_CLK_SRC9>, <&mstp10_clks R8A7745_CLK_SRC8>,
+			<&mstp10_clks R8A7745_CLK_SRC7>, <&mstp10_clks R8A7745_CLK_SRC6>,
+			<&mstp10_clks R8A7745_CLK_SRC5>, <&mstp10_clks R8A7745_CLK_SRC4>,
+			<&mstp10_clks R8A7745_CLK_SRC3>, <&mstp10_clks R8A7745_CLK_SRC2>,
+			<&mstp10_clks R8A7745_CLK_SRC1>, <&mstp10_clks R8A7745_CLK_SRC0>,
+			<&mstp10_clks R8A7745_CLK_DVC0>, <&mstp10_clks R8A7745_CLK_DVC1>,
+			<&audio_clk_a>, <&audio_clk_b>, <&audio_clk_c>, <&m2_clk>;
+		clock-names = "ssi",
+				"ssi.9", "ssi.8", "ssi.7", "ssi.6", "ssi.5",
+				"ssi.4", "ssi.3", "ssi.2", "ssi.1", "ssi.0",
+				"src.9", "src.8", "src.7", "src.6", "src.5",
+				"src.4", "src.3", "src.2", "src.1", "src.0",
+				"dvc.0", "dvc.1",
+				"clk_a", "clk_b", "clk_c", "clk_i";
+
+		dmas =		<&audma0 0x01>,	<&audma0 0x02>,	<&audma0 0x15>,	<&audma0 0x16>,
+				<&audma0 0x03>,	<&audma0 0x04>,	<&audma0 0x49>,	<&audma0 0x4a>,
+				<&audma0 0x05>,	<&audma0 0x06>,	<&audma0 0x63>,	<&audma0 0x64>,
+				<&audma0 0x07>,	<&audma0 0x08>,	<&audma0 0x6f>,	<&audma0 0x70>,
+				<&audma0 0x09>,	<&audma0 0x0a>,	<&audma0 0x71>,	<&audma0 0x72>,
+				<&audma0 0x0b>,	<&audma0 0x0c>,	<&audma0 0x73>,	<&audma0 0x74>,
+				<&audma0 0x0d>,	<&audma0 0x0e>,	<&audma0 0x75>,	<&audma0 0x76>,
+				<&audma0 0x0f>,	<&audma0 0x10>,	<&audma0 0x79>,	<&audma0 0x7a>,
+				<&audma0 0x11>,	<&audma0 0x12>,	<&audma0 0x7b>,	<&audma0 0x7c>,
+				<&audma0 0x13>,	<&audma0 0x14>,	<&audma0 0x7d>,	<&audma0 0x7e>,
+
+				<&audma0 0x85>,	<&audma0 0x9a>,	<&audma0 0xbc>,
+				<&audma0 0x87>,	<&audma0 0x9c>,	<&audma0 0xbe>,
+				<&audma0 0x89>,	<&audma0 0x9e>,
+				<&audma0 0x8b>,	<&audma0 0xa0>,
+				<&audma0 0x8d>,	<&audma0 0xb0>,
+				<&audma0 0x8f>,	<&audma0 0xb2>,
+				<&audma0 0x91>,	<&audma0 0xb4>,
+				<&audma0 0x93>,	<&audma0 0xb6>,
+				<&audma0 0x95>,	<&audma0 0xb8>,
+				<&audma0 0x97>,	<&audma0 0xba>,
+
+				<&audmapp 0x2d00>,	<&audmapp 0x2e00>,	<&audmapp 0x2f00>,	<&audmapp 0x3000>,	<&audmapp 0x3100>,
+				<&audmapp 0x2d04>,	<&audmapp 0x2e04>,	<&audmapp 0x2f04>,	<&audmapp 0x3004>,	<&audmapp 0x3104>,
+				<&audmapp 0x2d08>,	<&audmapp 0x2e08>,	<&audmapp 0x2f08>,	<&audmapp 0x3008>,	<&audmapp 0x3108>,
+				<&audmapp 0x2d0c>,	<&audmapp 0x2e0c>,	<&audmapp 0x2f0c>,	<&audmapp 0x300c>,	<&audmapp 0x310c>,
+				<&audmapp 0x2d0d>,	<&audmapp 0x2e0d>,	<&audmapp 0x2f0d>,	<&audmapp 0x300d>,	<&audmapp 0x310d>,
+				<&audmapp 0x2d0e>,	<&audmapp 0x2e0e>,	<&audmapp 0x2f0e>,	<&audmapp 0x300e>,	<&audmapp 0x310e>,
+				<&audmapp 0x2d0f>,	<&audmapp 0x2e0f>,	<&audmapp 0x2f0f>,	<&audmapp 0x300f>,	<&audmapp 0x310f>,
+				<&audmapp 0x2d10>,	<&audmapp 0x2e10>,	<&audmapp 0x2f10>,	<&audmapp 0x3010>,	<&audmapp 0x3110>,
+				<&audmapp 0x2d11>,	<&audmapp 0x2e11>,	<&audmapp 0x2f11>,	<&audmapp 0x3011>,	<&audmapp 0x3111>,
+				<&audmapp 0x2d12>,	<&audmapp 0x2e12>,	<&audmapp 0x2f12>,	<&audmapp 0x3012>,	<&audmapp 0x3112>,
+
+				<&audmapp 0x3200>,	<&audmapp 0x3300>,	<&audmapp 0x3400>,	<&audmapp 0x3500>,	<&audmapp 0x3600>,
+				<&audmapp 0x3204>,	<&audmapp 0x3304>,	<&audmapp 0x3404>,	<&audmapp 0x3504>,	<&audmapp 0x3604>,
+				<&audmapp 0x3208>,	<&audmapp 0x3308>,	<&audmapp 0x3408>,	<&audmapp 0x3508>,	<&audmapp 0x3608>,
+				<&audmapp 0x320c>,	<&audmapp 0x330c>,	<&audmapp 0x340c>,	<&audmapp 0x350c>,	<&audmapp 0x360c>,
+				<&audmapp 0x320d>,	<&audmapp 0x330d>,	<&audmapp 0x340d>,	<&audmapp 0x350d>,	<&audmapp 0x360d>,
+				<&audmapp 0x320e>,	<&audmapp 0x330e>,	<&audmapp 0x340e>,	<&audmapp 0x350e>,	<&audmapp 0x360e>,
+				<&audmapp 0x320f>,	<&audmapp 0x330f>,	<&audmapp 0x340f>,	<&audmapp 0x350f>,	<&audmapp 0x360f>,
+				<&audmapp 0x3210>,	<&audmapp 0x3310>,	<&audmapp 0x3410>,	<&audmapp 0x3510>,	<&audmapp 0x3610>,
+				<&audmapp 0x3211>,	<&audmapp 0x3311>,	<&audmapp 0x3411>,	<&audmapp 0x3511>,	<&audmapp 0x3611>,
+				<&audmapp 0x3212>,	<&audmapp 0x3312>,	<&audmapp 0x3412>,	<&audmapp 0x3512>,	<&audmapp 0x3612>,
+
+				<&audmapp 0x002d>,	<&audmapp 0x002e>,	<&audmapp 0x002f>,	<&audmapp 0x0030>,	<&audmapp 0x0031>,
+				<&audmapp 0x042d>,	<&audmapp 0x042e>,	<&audmapp 0x042f>,	<&audmapp 0x0430>,	<&audmapp 0x0431>,
+				<&audmapp 0x082d>,	<&audmapp 0x082e>,	<&audmapp 0x082f>,	<&audmapp 0x0830>,	<&audmapp 0x0831>,
+				<&audmapp 0x0c2d>,	<&audmapp 0x0c2e>,	<&audmapp 0x0c2f>,	<&audmapp 0x0c30>,	<&audmapp 0x0c31>,
+				<&audmapp 0x0d2d>,	<&audmapp 0x0d2e>,	<&audmapp 0x0d2f>,	<&audmapp 0x0d30>,	<&audmapp 0x0d31>,
+				<&audmapp 0x0e2d>,	<&audmapp 0x0e2e>,	<&audmapp 0x0e2f>,	<&audmapp 0x0e30>,	<&audmapp 0x0e31>,
+				<&audmapp 0x0f2d>,	<&audmapp 0x0f2e>,	<&audmapp 0x0f2f>,	<&audmapp 0x0f30>,	<&audmapp 0x0f31>,
+				<&audmapp 0x102d>,	<&audmapp 0x102e>,	<&audmapp 0x102f>,	<&audmapp 0x1030>,	<&audmapp 0x1031>,
+				<&audmapp 0x112d>,	<&audmapp 0x112e>,	<&audmapp 0x112f>,	<&audmapp 0x1130>,	<&audmapp 0x1131>,
+				<&audmapp 0x122d>,	<&audmapp 0x122e>,	<&audmapp 0x122f>,	<&audmapp 0x1230>,	<&audmapp 0x1231>,
+
+				<&audmapp 0x0032>,	<&audmapp 0x0033>,	<&audmapp 0x0034>,	<&audmapp 0x0035>,	<&audmapp 0x0036>,
+				<&audmapp 0x0432>,	<&audmapp 0x0433>,	<&audmapp 0x0434>,	<&audmapp 0x0435>,	<&audmapp 0x0436>,
+				<&audmapp 0x0832>,	<&audmapp 0x0833>,	<&audmapp 0x0834>,	<&audmapp 0x0835>,	<&audmapp 0x0836>,
+				<&audmapp 0x0c32>,	<&audmapp 0x0c33>,	<&audmapp 0x0c34>,	<&audmapp 0x0c35>,	<&audmapp 0x0c36>,
+				<&audmapp 0x0d32>,	<&audmapp 0x0d33>,	<&audmapp 0x0d34>,	<&audmapp 0x0d35>,	<&audmapp 0x0d36>,
+				<&audmapp 0x0e32>,	<&audmapp 0x0e33>,	<&audmapp 0x0e34>,	<&audmapp 0x0e35>,	<&audmapp 0x0e36>,
+				<&audmapp 0x0f32>,	<&audmapp 0x0f33>,	<&audmapp 0x0f34>,	<&audmapp 0x0f35>,	<&audmapp 0x0f36>,
+				<&audmapp 0x1032>,	<&audmapp 0x1033>,	<&audmapp 0x1034>,	<&audmapp 0x1035>,	<&audmapp 0x1036>,
+				<&audmapp 0x1132>,	<&audmapp 0x1133>,	<&audmapp 0x1134>,	<&audmapp 0x1135>,	<&audmapp 0x1136>,
+				<&audmapp 0x1232>,	<&audmapp 0x1233>,	<&audmapp 0x1234>,	<&audmapp 0x1235>,	<&audmapp 0x1236>,
+				<&audmapp 0x3700>,	<&audmapp 0x3800>,
+				<&audmapp 0x3704>,	<&audmapp 0x3804>,
+				<&audmapp 0x3708>,	<&audmapp 0x3808>,
+				<&audmapp 0x370c>,	<&audmapp 0x380c>,
+				<&audmapp 0x370d>,	<&audmapp 0x380d>,
+				<&audmapp 0x370e>,	<&audmapp 0x380e>,
+				<&audmapp 0x370f>,	<&audmapp 0x380f>,
+				<&audmapp 0x3710>,	<&audmapp 0x3810>,
+				<&audmapp 0x3711>,	<&audmapp 0x3811>,
+				<&audmapp 0x3712>,	<&audmapp 0x3812>;
+
+		dma-names =	"mem_ssi0",	"ssi0_mem",	"mem_ssiu0",	"ssiu0_mem",
+				"mem_ssi1",	"ssi1_mem",	"mem_ssiu1",	"ssiu1_mem",
+				"mem_ssi2",	"ssi2_mem",	"mem_ssiu2",	"ssiu2_mem",
+				"mem_ssi3",	"ssi3_mem",	"mem_ssiu3",	"ssiu3_mem",
+				"mem_ssi4",	"ssi4_mem",	"mem_ssiu4",	"ssiu4_mem",
+				"mem_ssi5",	"ssi5_mem",	"mem_ssiu5",	"ssiu5_mem",
+				"mem_ssi6",	"ssi6_mem",	"mem_ssiu6",	"ssiu6_mem",
+				"mem_ssi7",	"ssi7_mem",	"mem_ssiu7",	"ssiu7_mem",
+				"mem_ssi8",	"ssi8_mem",	"mem_ssiu8",	"ssiu8_mem",
+				"mem_ssi9",	"ssi9_mem",	"mem_ssiu9",	"ssiu9_mem",
+
+				"mem_src0",	"src0_mem",	"dvc0_mem",
+				"mem_src1",	"src1_mem",	"dvc1_mem",
+				"mem_src2",	"src2_mem",
+				"mem_src3",	"src3_mem",
+				"mem_src4",	"src4_mem",
+				"mem_src5",	"src5_mem",
+				"mem_src6",	"src6_mem",
+				"mem_src7",	"src7_mem",
+				"mem_src8",	"src8_mem",
+				"mem_src9",	"src9_mem",
+
+				"src0_ssiu0",		"src1_ssiu0",		"src2_ssiu0",		"src3_ssiu0",		"src4_ssiu0",
+				"src0_ssiu1",		"src1_ssiu1",		"src2_ssiu1",		"src3_ssiu1",		"src4_ssiu1",
+				"src0_ssiu2",		"src1_ssiu2",		"src2_ssiu2",		"src3_ssiu2",		"src4_ssiu2",
+				"src0_ssiu3",		"src1_ssiu3",		"src2_ssiu3",		"src3_ssiu3",		"src4_ssiu3",
+				"src0_ssiu4",		"src1_ssiu4",		"src2_ssiu4",		"src3_ssiu4",		"src4_ssiu4",
+				"src0_ssiu5",		"src1_ssiu5",		"src2_ssiu5",		"src3_ssiu5",		"src4_ssiu5",
+				"src0_ssiu6",		"src1_ssiu6",		"src2_ssiu6",		"src3_ssiu6",		"src4_ssiu6",
+				"src0_ssiu7",		"src1_ssiu7",		"src2_ssiu7",		"src3_ssiu7",		"src4_ssiu7",
+				"src0_ssiu8",		"src1_ssiu8",		"src2_ssiu8",		"src3_ssiu8",		"src4_ssiu8",
+				"src0_ssiu9",		"src1_ssiu9",		"src2_ssiu9",		"src3_ssiu9",		"src4_ssiu9",
+
+				"src5_ssiu0",		"src6_ssiu0",		"src7_ssiu0",		"src8_ssiu0",		"src9_ssiu0",
+				"src5_ssiu1",		"src6_ssiu1",		"src7_ssiu1",		"src8_ssiu1",		"src9_ssiu1",
+				"src5_ssiu2",		"src6_ssiu2",		"src7_ssiu2",		"src8_ssiu2",		"src9_ssiu2",
+				"src5_ssiu3",		"src6_ssiu3",		"src7_ssiu3",		"src8_ssiu3",		"src9_ssiu3",
+				"src5_ssiu4",		"src6_ssiu4",		"src7_ssiu4",		"src8_ssiu4",		"src9_ssiu4",
+				"src5_ssiu5",		"src6_ssiu5",		"src7_ssiu5",		"src8_ssiu5",		"src9_ssiu5",
+				"src5_ssiu6",		"src6_ssiu6",		"src7_ssiu6",		"src8_ssiu6",		"src9_ssiu6",
+				"src5_ssiu7",		"src6_ssiu7",		"src7_ssiu7",		"src8_ssiu7",		"src9_ssiu7",
+				"src5_ssiu8",		"src6_ssiu8",		"src7_ssiu8",		"src8_ssiu8",		"src9_ssiu8",
+				"src5_ssiu9",		"src6_ssiu9",		"src7_ssiu9",		"src8_ssiu9",		"src9_ssiu9",
+
+				"ssiu0_src0",		"ssiu0_src1",		"ssiu0_src2",		"ssiu0_src3",		"ssiu0_src4",
+				"ssiu1_src0",		"ssiu1_src1",		"ssiu1_src2",		"ssiu1_src3",		"ssiu1_src4",
+				"ssiu2_src0",		"ssiu2_src1",		"ssiu2_src2",		"ssiu2_src3",		"ssiu2_src4",
+				"ssiu3_src0",		"ssiu3_src1",		"ssiu3_src2",		"ssiu3_src3",		"ssiu3_src4",
+				"ssiu4_src0",		"ssiu4_src1",		"ssiu4_src2",		"ssiu4_src3",		"ssiu4_src4",
+				"ssiu5_src0",		"ssiu5_src1",		"ssiu5_src2",		"ssiu5_src3",		"ssiu5_src4",
+				"ssiu6_src0",		"ssiu6_src1",		"ssiu6_src2",		"ssiu6_src3",		"ssiu6_src4",
+				"ssiu7_src0",		"ssiu7_src1",		"ssiu7_src2",		"ssiu7_src3",		"ssiu7_src4",
+				"ssiu8_src0",		"ssiu8_src1",		"ssiu8_src2",		"ssiu8_src3",		"ssiu8_src4",
+				"ssiu9_src0",		"ssiu9_src1",		"ssiu9_src2",		"ssiu9_src3",		"ssiu9_src4",
+
+				"ssiu0_src5",		"ssiu0_src6",		"ssiu0_src7",		"ssiu0_src8",		"ssiu0_src9",
+				"ssiu1_src5",		"ssiu1_src6",		"ssiu1_src7",		"ssiu1_src8",		"ssiu1_src9",
+				"ssiu2_src5",		"ssiu2_src6",		"ssiu2_src7",		"ssiu2_src8",		"ssiu2_src9",
+				"ssiu3_src5",		"ssiu3_src6",		"ssiu3_src7",		"ssiu3_src8",		"ssiu3_src9",
+				"ssiu4_src5",		"ssiu4_src6",		"ssiu4_src7",		"ssiu4_src8",		"ssiu4_src9",
+				"ssiu5_src5",		"ssiu5_src6",		"ssiu5_src7",		"ssiu5_src8",		"ssiu5_src9",
+				"ssiu6_src5",		"ssiu6_src6",		"ssiu6_src7",		"ssiu6_src8",		"ssiu6_src9",
+				"ssiu7_src5",		"ssiu7_src6",		"ssiu7_src7",		"ssiu7_src8",		"ssiu7_src9",
+				"ssiu8_src5",		"ssiu8_src6",		"ssiu8_src7",		"ssiu8_src8",		"ssiu8_src9",
+				"ssiu9_src5",		"ssiu9_src6",		"ssiu9_src7",		"ssiu9_src8",		"ssiu9_src9",
+				"dvc0_ssiu0",		"dvc1_ssiu0",
+				"dvc0_ssiu1",		"dvc1_ssiu1",
+				"dvc0_ssiu2",		"dvc1_ssiu2",
+				"dvc0_ssiu3",		"dvc1_ssiu3",
+				"dvc0_ssiu4",		"dvc1_ssiu4",
+				"dvc0_ssiu5",		"dvc1_ssiu5",
+				"dvc0_ssiu6",		"dvc1_ssiu6",
+				"dvc0_ssiu7",		"dvc1_ssiu7",
+				"dvc0_ssiu8",		"dvc1_ssiu8",
+				"dvc0_ssiu9",		"dvc1_ssiu9";
+
+		status = "disabled";
+
+		rcar_sound,dvc {
+			dvc0: dvc@0 { };
+			dvc1: dvc@1 { };
+		};
+
+		rcar_sound,src {
+			src0: src@0 { interrupts = <0 352 IRQ_TYPE_LEVEL_HIGH>; };
+			src1: src@1 { interrupts = <0 353 IRQ_TYPE_LEVEL_HIGH>; };
+			src2: src@2 { interrupts = <0 354 IRQ_TYPE_LEVEL_HIGH>; };
+			src3: src@3 { interrupts = <0 355 IRQ_TYPE_LEVEL_HIGH>; };
+			src4: src@4 { interrupts = <0 356 IRQ_TYPE_LEVEL_HIGH>; };
+			src5: src@5 { interrupts = <0 357 IRQ_TYPE_LEVEL_HIGH>; };
+			src6: src@6 { interrupts = <0 358 IRQ_TYPE_LEVEL_HIGH>; };
+			src7: src@7 { interrupts = <0 359 IRQ_TYPE_LEVEL_HIGH>; };
+			src8: src@8 { interrupts = <0 360 IRQ_TYPE_LEVEL_HIGH>; };
+			src9: src@9 { interrupts = <0 361 IRQ_TYPE_LEVEL_HIGH>; };
+		};
+
+		rcar_sound,ssi {
+			ssi0: ssi@0 { interrupts = <0 370 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi1: ssi@1 { interrupts = <0 371 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi2: ssi@2 { interrupts = <0 372 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi3: ssi@3 { interrupts = <0 373 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi4: ssi@4 { interrupts = <0 374 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi5: ssi@5 { interrupts = <0 375 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi6: ssi@6 { interrupts = <0 376 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi7: ssi@7 { interrupts = <0 377 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi8: ssi@8 { interrupts = <0 378 IRQ_TYPE_LEVEL_HIGH>; };
+			ssi9: ssi@9 { interrupts = <0 379 IRQ_TYPE_LEVEL_HIGH>; };
+		};
+	};
+};
diff --git a/arch/arm/configs/shmobile_defconfig b/arch/arm/configs/shmobile_defconfig
index 0d8e29e..00675a5 100644
--- a/arch/arm/configs/shmobile_defconfig
+++ b/arch/arm/configs/shmobile_defconfig
@@ -19,6 +19,8 @@ CONFIG_ARCH_R8A7790=y
 CONFIG_ARCH_R8A7791=y
 CONFIG_ARCH_R8A7793=y
 CONFIG_ARCH_R8A7794=y
+CONFIG_ARCH_R8A7743=y
+CONFIG_ARCH_R8A7745=y
 CONFIG_MACH_GENMAI=y
 CONFIG_MACH_KOELSCH=y
 CONFIG_MACH_LAGER=y
diff --git a/arch/arm/mach-shmobile/Kconfig b/arch/arm/mach-shmobile/Kconfig
index bb1b599..ce134e9 100644
--- a/arch/arm/mach-shmobile/Kconfig
+++ b/arch/arm/mach-shmobile/Kconfig
@@ -52,6 +52,15 @@ config ARCH_R8A7794
 	bool "R-Car E2 (R8A77940)"
 	select RENESAS_IRQC

+
+config ARCH_R8A7743
+	bool "RZ/G1M (R8A77430)"
+	select RENESAS_IRQC
+
+config ARCH_R8A7745
+	bool "RZ/G1E (R8A77450)"
+	select RENESAS_IRQC
+
 comment "Renesas ARM SoCs Board Type"

 config MACH_GENMAI
@@ -168,6 +177,16 @@ config ARCH_R8A7791
 	select RENESAS_IRQC
 	select ARCH_DMA_ADDR_T_64BIT if ARM_LPAE

+config ARCH_R8A7743
+	bool "RZ/G1M (R8A77430)"
+	select ARCH_WANT_OPTIONAL_GPIOLIB
+	select ARM_GIC
+	select CPU_V7
+	select MIGHT_HAVE_PCI
+	select SH_CLK_CPG
+	select RENESAS_IRQC
+	select ARCH_DMA_ADDR_T_64BIT if ARM_LPAE
+
 config ARCH_R7S72100
 	bool "RZ/A1H (R7S72100)"
 	select ARCH_WANT_OPTIONAL_GPIOLIB
diff --git a/arch/arm/mach-shmobile/Makefile b/arch/arm/mach-shmobile/Makefile
index 8d997e2..bb1192f 100644
--- a/arch/arm/mach-shmobile/Makefile
+++ b/arch/arm/mach-shmobile/Makefile
@@ -17,8 +17,10 @@ obj-$(CONFIG_ARCH_R8A7779)	+= setup-r8a7779.o
 obj-$(CONFIG_ARCH_R8A7790)	+= setup-r8a7790.o
 obj-$(CONFIG_ARCH_R8A7790)	+= setup-r8a7790.o setup-rcar-gen2.o
 obj-$(CONFIG_ARCH_R8A7791)	+= setup-r8a7791.o setup-rcar-gen2.o
+obj-$(CONFIG_ARCH_R8A7743)	+= setup-r8a7743.o setup-rcar-gen2.o
 obj-$(CONFIG_ARCH_R8A7793)	+= setup-r8a7793.o setup-rcar-gen2.o
 obj-$(CONFIG_ARCH_R8A7794)	+= setup-r8a7794.o setup-rcar-gen2.o
+obj-$(CONFIG_ARCH_R8A7745)	+= setup-r8a7745.o setup-rcar-gen2.o
 obj-$(CONFIG_ARCH_EMEV2)	+= setup-emev2.o
 obj-$(CONFIG_ARCH_R7S72100)	+= setup-r7s72100.o

@@ -33,6 +35,7 @@ obj-$(CONFIG_ARCH_R8A7778)	+= clock-r8a7778.o
 obj-$(CONFIG_ARCH_R8A7779)	+= clock-r8a7779.o
 obj-$(CONFIG_ARCH_R8A7790)	+= clock-r8a7790.o
 obj-$(CONFIG_ARCH_R8A7791)	+= clock-r8a7791.o
+obj-$(CONFIG_ARCH_R8A7743)	+= clock-r8a7743.o
 obj-$(CONFIG_ARCH_R7S72100)	+= clock-r7s72100.o
 endif

@@ -40,8 +43,10 @@ endif
 cpu-y				:= platsmp.o headsmp.o
 cpu-$(CONFIG_ARCH_R8A7790)	+= platsmp-apmu.o platsmp-rst.o
 cpu-$(CONFIG_ARCH_R8A7791)	+= platsmp-apmu.o platsmp-rst.o
+cpu-$(CONFIG_ARCH_R8A7743)	+= platsmp-apmu.o platsmp-rst.o
 cpu-$(CONFIG_ARCH_R8A7793)	+= platsmp-apmu.o platsmp-rst.o
 cpu-$(CONFIG_ARCH_R8A7794)	+= platsmp-apmu.o platsmp-rst.o
+cpu-$(CONFIG_ARCH_R8A7745)	+= platsmp-apmu.o platsmp-rst.o

 # SMP objects
 smp-y				:= $(cpu-y)
@@ -49,8 +54,10 @@ smp-$(CONFIG_ARCH_SH73A0)	+= smp-sh73a0.o headsmp-scu.o platsmp-scu.o
 smp-$(CONFIG_ARCH_R8A7779)	+= smp-r8a7779.o headsmp-scu.o platsmp-scu.o
 smp-$(CONFIG_ARCH_R8A7790)	+= smp-r8a7790.o
 smp-$(CONFIG_ARCH_R8A7791)	+= smp-r8a7791.o
+smp-$(CONFIG_ARCH_R8A7743)	+= smp-r8a7743.o
 smp-$(CONFIG_ARCH_R8A7793)	+= smp-r8a7793.o
 smp-$(CONFIG_ARCH_R8A7794)	+= smp-r8a7794.o
+smp-$(CONFIG_ARCH_R8A7745)	+= smp-r8a7745.o
 smp-$(CONFIG_ARCH_EMEV2)	+= smp-emev2.o headsmp-scu.o platsmp-scu.o

 # PM objects
@@ -63,8 +70,10 @@ obj-$(CONFIG_ARCH_R8A7740)	+= pm-r8a7740.o pm-rmobile.o
 obj-$(CONFIG_ARCH_R8A7779)	+= pm-r8a7779.o pm-rcar.o
 obj-$(CONFIG_ARCH_R8A7790)	+= pm-r8a7790.o pm-rcar.o $(cpu-y)
 obj-$(CONFIG_ARCH_R8A7791)	+= pm-r8a7791.o pm-rcar.o $(cpu-y)
+obj-$(CONFIG_ARCH_R8A7743)	+= pm-r8a7743.o pm-rcar.o $(cpu-y)
 obj-$(CONFIG_ARCH_R8A7793)	+= pm-r8a7793.o pm-rcar.o $(cpu-y)
 obj-$(CONFIG_ARCH_R8A7794)	+= pm-r8a7794.o pm-rcar.o $(cpu-y)
+obj-$(CONFIG_ARCH_R8A7745)	+= pm-r8a7745.o pm-rcar.o $(cpu-y)

 # IRQ objects
 obj-$(CONFIG_ARCH_SH7372)	+= entry-intc.o
diff --git a/arch/arm/mach-shmobile/clock-r8a7743.c b/arch/arm/mach-shmobile/clock-r8a7743.c
new file mode 100644
index 0000000..f31311f
--- /dev/null
+++ b/arch/arm/mach-shmobile/clock-r8a7743.c
@@ -0,0 +1,374 @@
+/*
+ * r8a7743 clock framework support
+ *
+ * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2013  Renesas Solutions Corp.
+ * Copyright (C) 2013  Magnus Damm
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/sh_clk.h>
+#include <linux/clkdev.h>
+#include "clock.h"
+#include "common.h"
+#include "rcar-gen2.h"
+
+/*
+ *   MD		EXTAL		PLL0	PLL1	PLL3
+ * 14 13 19	(MHz)		*1	*1
+ *---------------------------------------------------
+ * 0  0  0	15 x 1		x172/2	x208/2	x106
+ * 0  0  1	15 x 1		x172/2	x208/2	x88
+ * 0  1  0	20 x 1		x130/2	x156/2	x80
+ * 0  1  1	20 x 1		x130/2	x156/2	x66
+ * 1  0  0	26 / 2		x200/2	x240/2	x122
+ * 1  0  1	26 / 2		x200/2	x240/2	x102
+ * 1  1  0	30 / 2		x172/2	x208/2	x106
+ * 1  1  1	30 / 2		x172/2	x208/2	x88
+ *
+ * *1 :	Table 7.6 indicates VCO ouput (PLLx = VCO/2)
+ *	see "p1 / 2" on R8A7743_CLOCK_ROOT() below
+ */
+
+#define CPG_BASE 0xe6150000
+#define CPG_LEN 0x1000
+
+#define SMSTPCR0	0xE6150130
+#define SMSTPCR1	0xE6150134
+#define SMSTPCR2	0xe6150138
+#define SMSTPCR3	0xE615013C
+#define SMSTPCR5	0xE6150144
+#define SMSTPCR7	0xe615014c
+#define SMSTPCR8	0xE6150990
+#define SMSTPCR9	0xE6150994
+#define SMSTPCR10	0xE6150998
+#define SMSTPCR11	0xE615099C
+
+#define MSTPSR0		IOMEM(0xe6150030)
+#define MSTPSR1		IOMEM(0xe6150038)
+#define MSTPSR2		IOMEM(0xe6150040)
+#define MSTPSR3		IOMEM(0xe6150048)
+#define MSTPSR5		IOMEM(0xe615003c)
+#define MSTPSR7		IOMEM(0xe61501c4)
+#define MSTPSR8		IOMEM(0xe61509a0)
+#define MSTPSR9		IOMEM(0xe61509a4)
+#define MSTPSR11	IOMEM(0xe61509ac)
+
+#define SDCKCR		0xE6150074
+#define SD1CKCR		0xE6150078
+#define SD2CKCR		0xE615026c
+#define MMC0CKCR	0xE6150240
+#define MMC1CKCR	0xE6150244
+#define SSPCKCR		0xE6150248
+#define SSPRSCKCR	0xE615024C
+
+static struct clk_mapping cpg_mapping = {
+	.phys   = CPG_BASE,
+	.len    = CPG_LEN,
+};
+
+static struct clk extal_clk = {
+	/* .rate will be updated on r8a7791_clock_init() */
+	.mapping	= &cpg_mapping,
+};
+
+static struct sh_clk_ops followparent_clk_ops = {
+	.recalc	= followparent_recalc,
+};
+
+static struct clk main_clk = {
+	/* .parent will be set r8a73a4_clock_init */
+	.ops	= &followparent_clk_ops,
+};
+
+/*
+ * clock ratio of these clock will be updated
+ * on r8a7743_clock_init()
+ */
+SH_FIXED_RATIO_CLK_SET(pll1_clk,		main_clk,	1, 1);
+SH_FIXED_RATIO_CLK_SET(pll3_clk,		main_clk,	1, 1);
+SH_FIXED_RATIO_CLK_SET(qspi_clk,		pll1_clk,	1, 1);
+
+/* fixed ratio clock */
+SH_FIXED_RATIO_CLK_SET(extal_div2_clk,		extal_clk,	1, 2);
+SH_FIXED_RATIO_CLK_SET(cp_clk,			extal_clk,	1, 2);
+
+SH_FIXED_RATIO_CLK_SET(pll1_div2_clk,		pll1_clk,	1, 2);
+SH_FIXED_RATIO_CLK_SET(hp_clk,			pll1_clk,	1, 12);
+SH_FIXED_RATIO_CLK_SET(p_clk,			pll1_clk,	1, 24);
+SH_FIXED_RATIO_CLK_SET(rclk_clk,		pll1_clk,	1, (48 * 1024));
+SH_FIXED_RATIO_CLK_SET(mp_clk,			pll1_div2_clk,	1, 15);
+SH_FIXED_RATIO_CLK_SET(zg_clk,			pll1_clk,	1, 3);
+SH_FIXED_RATIO_CLK_SET(zx_clk,			pll1_clk,	1, 3);
+SH_FIXED_RATIO_CLK_SET(zs_clk,			pll1_clk,	1, 6);
+
+static struct clk *main_clks[] = {
+	&extal_clk,
+	&extal_div2_clk,
+	&main_clk,
+	&pll1_clk,
+	&pll1_div2_clk,
+	&pll3_clk,
+	&hp_clk,
+	&p_clk,
+	&qspi_clk,
+	&rclk_clk,
+	&mp_clk,
+	&cp_clk,
+	&zg_clk,
+	&zx_clk,
+	&zs_clk,
+};
+
+/* SDHI (DIV4) clock */
+static int divisors[] = { 2, 3, 4, 6, 8, 12, 16, 18, 24, 0, 36, 48, 10 };
+
+static struct clk_div_mult_table div4_div_mult_table = {
+	.divisors = divisors,
+	.nr_divisors = ARRAY_SIZE(divisors),
+};
+
+static struct clk_div4_table div4_table = {
+	.div_mult_table = &div4_div_mult_table,
+};
+
+enum {
+	DIV4_SDH, DIV4_SD0,
+	DIV4_NR
+};
+
+static struct clk div4_clks[DIV4_NR] = {
+	[DIV4_SDH] = SH_CLK_DIV4(&pll1_clk, SDCKCR, 8, 0x0dff, CLK_ENABLE_ON_INIT),
+	[DIV4_SD0] = SH_CLK_DIV4(&pll1_clk, SDCKCR, 4, 0x1de0, CLK_ENABLE_ON_INIT),
+};
+
+/* DIV6 clocks */
+enum {
+	DIV6_SD1, DIV6_SD2,
+	DIV6_NR
+};
+
+static struct clk div6_clks[DIV6_NR] = {
+	[DIV6_SD1]	= SH_CLK_DIV6(&pll1_div2_clk, SD1CKCR, 0),
+	[DIV6_SD2]	= SH_CLK_DIV6(&pll1_div2_clk, SD2CKCR, 0),
+};
+
+/* MSTP */
+enum {
+	MSTP931, MSTP930, MSTP929, MSTP928, MSTP927, MSTP925,
+	MSTP917,
+	MSTP815, MSTP814,
+	MSTP813,
+	MSTP811, MSTP810, MSTP809,
+	MSTP726, MSTP724, MSTP723, MSTP721, MSTP720,
+	MSTP719, MSTP718, MSTP717, MSTP716, MSTP715, MSTP714, MSTP713,
+	MSTP704, MSTP703,
+	MSTP522,
+	MSTP502, MSTP501,
+	MSTP314, MSTP312, MSTP311,
+	MSTP219,
+	MSTP208, MSTP205,
+	MSTP131, MSTP119, MSTP118, MSTP115, MSTP103, MSTP101,
+	MSTP128, MSTP127,
+	MSTP124,
+	MSTP112,
+	MSTP000,
+	MSTP_NR
+};
+
+static struct clk mstp_clks[MSTP_NR] = {
+	[MSTP931] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 31, MSTPSR9, 0), /* I2C0 */
+	[MSTP930] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 30, MSTPSR9, 0), /* I2C1 */
+	[MSTP929] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 29, MSTPSR9, 0), /* I2C2 */
+	[MSTP928] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 28, MSTPSR9, 0), /* I2C3 */
+	[MSTP927] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 27, MSTPSR9, 0), /* I2C4 */
+	[MSTP925] = SH_CLK_MSTP32_STS(&hp_clk, SMSTPCR9, 25, MSTPSR9, 0), /* I2C5 */
+	[MSTP917] = SH_CLK_MSTP32_STS(&qspi_clk, SMSTPCR9, 17, MSTPSR9, 0), /* QSPI */
+	[MSTP815] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR8, 15, MSTPSR8, 0), /* SATA0 */
+	[MSTP814] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR8, 14, MSTPSR8, 0), /* SATA1 */
+	[MSTP813] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR8, 13, MSTPSR8, 0), /* Ether */
+	[MSTP811] = SH_CLK_MSTP32_STS(&zg_clk, SMSTPCR8, 11, MSTPSR8, 0), /* VIN0 */
+	[MSTP810] = SH_CLK_MSTP32_STS(&zg_clk, SMSTPCR8, 10, MSTPSR8, 0), /* VIN1 */
+	[MSTP809] = SH_CLK_MSTP32_STS(&zg_clk, SMSTPCR8, 9, MSTPSR8, 0), /* VIN2 */
+	[MSTP726] = SH_CLK_MSTP32_STS(&zx_clk, SMSTPCR7, 26, MSTPSR7, 0), /* LVDS0 */
+	[MSTP724] = SH_CLK_MSTP32_STS(&zx_clk, SMSTPCR7, 24, MSTPSR7, 0), /* DU0 */
+	[MSTP723] = SH_CLK_MSTP32_STS(&zx_clk, SMSTPCR7, 23, MSTPSR7, 0), /* DU1 */
+	[MSTP721] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 21, MSTPSR7, 0), /* SCIF0 */
+	[MSTP720] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 20, MSTPSR7, 0), /* SCIF1 */
+	[MSTP719] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 19, MSTPSR7, 0), /* SCIF2 */
+	[MSTP718] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 18, MSTPSR7, 0), /* SCIF3 */
+	[MSTP717] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR7, 17, MSTPSR7, 0), /* HSCIF0 */
+	[MSTP716] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR7, 16, MSTPSR7, 0), /* HSCIF1 */
+	[MSTP715] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 15, MSTPSR7, 0), /* SCIF4 */
+	[MSTP714] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 14, MSTPSR7, 0), /* SCIF5 */
+	[MSTP713] = SH_CLK_MSTP32_STS(&p_clk, SMSTPCR7, 13, MSTPSR7, 0), /* HSCIF2 */
+	[MSTP704] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR7, 4, MSTPSR7, 0), /* HSUSB */
+	[MSTP703] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR7, 3, MSTPSR7, 0), /* EHCI */
+	[MSTP522] = SH_CLK_MSTP32_STS(&extal_clk, SMSTPCR5, 22, MSTPSR5, 0), /* Thermal */
+	[MSTP502] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR5, 2, MSTPSR5, 0), /* Audio-DMAC low */
+	[MSTP501] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR5, 1, MSTPSR5, 0), /* Audio-DMAC hi */
+	[MSTP314] = SH_CLK_MSTP32_STS(&div4_clks[DIV4_SD0], SMSTPCR3, 14, MSTPSR3, 0), /* SDHI0 */
+	[MSTP312] = SH_CLK_MSTP32_STS(&div6_clks[DIV6_SD1], SMSTPCR3, 12, MSTPSR3, 0), /* SDHI1 */
+	[MSTP311] = SH_CLK_MSTP32_STS(&div6_clks[DIV6_SD2], SMSTPCR3, 11, MSTPSR3, 0), /* SDHI2 */
+	[MSTP219] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR2, 19, MSTPSR2, 0), /* SYS-DMAC LOW */
+	[MSTP208] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR2, 8, MSTPSR2, 0), /* MSIOF1 */
+	[MSTP205] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR2, 5, MSTPSR2, 0), /* MSIOF2 */
+	[MSTP131] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 31, MSTPSR1, 0), /* VSPS */
+	[MSTP128] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 28, MSTPSR1, 0), /* VSP1 (DU0) */
+	[MSTP127] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 27, MSTPSR1, 0), /* VSP1 (DU1) */
+	[MSTP124] = SH_CLK_MSTP32_STS(&rclk_clk, SMSTPCR1, 24, MSTPSR1, 0), /* CMT0 */
+	[MSTP119] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 19, MSTPSR1, 0), /* FDP0 */
+	[MSTP118] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 18, MSTPSR1, 0), /* FDP1 */
+	[MSTP115] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 15, MSTPSR1, 0), /* 2DDMAC */
+	[MSTP112] = SH_CLK_MSTP32_STS(&zg_clk, SMSTPCR1, 12, MSTPSR1, 0), /* 3DG */
+	[MSTP103] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 3,  MSTPSR1, 0),  /* VPC0 */
+	[MSTP101] = SH_CLK_MSTP32_STS(&zs_clk, SMSTPCR1, 1,  MSTPSR1, 0),  /* VCP0 */
+	[MSTP000] = SH_CLK_MSTP32_STS(&mp_clk, SMSTPCR0, 0, MSTPSR0, 0), /* MSIOF0 */
+};
+
+static struct clk_lookup lookups[] = {
+
+	/* main clocks */
+	CLKDEV_CON_ID("extal",		&extal_clk),
+	CLKDEV_CON_ID("extal_div2",	&extal_div2_clk),
+	CLKDEV_CON_ID("main",		&main_clk),
+	CLKDEV_CON_ID("pll1",		&pll1_clk),
+	CLKDEV_CON_ID("pll1_div2",	&pll1_div2_clk),
+	CLKDEV_CON_ID("pll3",		&pll3_clk),
+	CLKDEV_CON_ID("zg",		&zg_clk),
+	CLKDEV_CON_ID("zs",		&zs_clk),
+	CLKDEV_CON_ID("hp",		&hp_clk),
+	CLKDEV_CON_ID("p",		&p_clk),
+	CLKDEV_CON_ID("qspi",		&qspi_clk),
+	CLKDEV_CON_ID("rclk",		&rclk_clk),
+	CLKDEV_CON_ID("mp",		&mp_clk),
+	CLKDEV_CON_ID("cp",		&cp_clk),
+	CLKDEV_CON_ID("peripheral_clk", &hp_clk),
+
+
+	/* MSTP */
+	CLKDEV_DEV_ID("sh-sci.6", &mstp_clks[MSTP721]), /* SCIF0 */
+	CLKDEV_DEV_ID("sh-sci.7", &mstp_clks[MSTP720]), /* SCIF1 */
+	CLKDEV_DEV_ID("sh-sci.8", &mstp_clks[MSTP717]), /* HSCIF0 */
+	CLKDEV_DEV_ID("sh-sci.9", &mstp_clks[MSTP716]), /* HSCIF1 */
+	CLKDEV_DEV_ID("sh-sci.10", &mstp_clks[MSTP719]), /* SCIF2 */
+	CLKDEV_DEV_ID("sh-sci.11", &mstp_clks[MSTP718]), /* SCIF3 */
+	CLKDEV_DEV_ID("sh-sci.12", &mstp_clks[MSTP715]), /* SCIF4 */
+	CLKDEV_DEV_ID("sh-sci.13", &mstp_clks[MSTP714]), /* SCIF5 */
+	CLKDEV_DEV_ID("sh-sci.17", &mstp_clks[MSTP713]), /* HSCIF2 */
+	CLKDEV_DEV_ID("sh_mobile_sdhi.0", &mstp_clks[MSTP314]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.1", &mstp_clks[MSTP312]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.2", &mstp_clks[MSTP311]),
+	CLKDEV_DEV_ID("sh_cmt.0", &mstp_clks[MSTP124]),
+	CLKDEV_DEV_ID("qspi.0", &mstp_clks[MSTP917]),
+	CLKDEV_DEV_ID("spi_sh_msiof.1", &mstp_clks[MSTP000]),
+	CLKDEV_DEV_ID("spi_sh_msiof.2", &mstp_clks[MSTP208]),
+	CLKDEV_DEV_ID("spi_sh_msiof.3", &mstp_clks[MSTP205]),
+	CLKDEV_DEV_ID("rcar_thermal", &mstp_clks[MSTP522]),
+	CLKDEV_DEV_ID("sh-dma-engine.0", &mstp_clks[MSTP502]),
+	CLKDEV_DEV_ID("sh-dma-engine.1", &mstp_clks[MSTP501]),
+	CLKDEV_DEV_ID("sh-dma-engine.2", &mstp_clks[MSTP219]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.0", &mstp_clks[MSTP931]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.1", &mstp_clks[MSTP930]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.2", &mstp_clks[MSTP929]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.3", &mstp_clks[MSTP928]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.4", &mstp_clks[MSTP927]),
+	CLKDEV_DEV_ID("i2c-rcar_gen2.5", &mstp_clks[MSTP925]),
+	CLKDEV_DEV_ID("r8a7791-ether", &mstp_clks[MSTP813]), /* Ether */
+	CLKDEV_DEV_ID("r8a7791-vin.0", &mstp_clks[MSTP811]),
+	CLKDEV_DEV_ID("r8a7791-vin.1", &mstp_clks[MSTP810]),
+	CLKDEV_DEV_ID("r8a7791-vin.2", &mstp_clks[MSTP809]),
+	CLKDEV_DEV_ID("sata-r8a7791.0", &mstp_clks[MSTP815]),
+	CLKDEV_DEV_ID("sata-r8a7791.1", &mstp_clks[MSTP814]),
+	CLKDEV_DEV_ID("pci-rcar-gen2.0", &mstp_clks[MSTP703]),
+	CLKDEV_DEV_ID("pci-rcar-gen2.1", &mstp_clks[MSTP703]),
+	CLKDEV_CON_ID("vsps", &mstp_clks[MSTP131]),
+	CLKDEV_DEV_ID("vsp1.2", &mstp_clks[MSTP128]),
+	CLKDEV_DEV_ID("vsp1.3", &mstp_clks[MSTP127]),
+	CLKDEV_CON_ID("fdp0", &mstp_clks[MSTP119]),
+	CLKDEV_CON_ID("fdp1", &mstp_clks[MSTP118]),
+	CLKDEV_CON_ID("tddmac", &mstp_clks[MSTP115]),
+	CLKDEV_CON_ID("vpc0", &mstp_clks[MSTP103]),
+	CLKDEV_CON_ID("vcp0", &mstp_clks[MSTP101]),
+	CLKDEV_DEV_ID("pvrsrvkm", &mstp_clks[MSTP112]),
+
+	/* ICK */
+	CLKDEV_ICK_ID("lvds.0", "rcar-du-r8a7791", &mstp_clks[MSTP726]),
+	CLKDEV_ICK_ID("du.0", "rcar-du-r8a7791", &mstp_clks[MSTP724]),
+	CLKDEV_ICK_ID("du.1", "rcar-du-r8a7791", &mstp_clks[MSTP723]),
+	CLKDEV_ICK_ID("usbhs", "usb_phy_rcar_gen2", &mstp_clks[MSTP704]),
+};
+
+#define R8A7743_CLOCK_ROOT(e, m, p0, p1, p30, p31)		\
+	extal_clk.rate	= e * 1000 * 1000;			\
+	main_clk.parent	= m;					\
+	SH_CLK_SET_RATIO(&pll1_clk_ratio, p1 / 2, 1);		\
+	if (mode & MD(19))					\
+		SH_CLK_SET_RATIO(&pll3_clk_ratio, p31, 1);	\
+	else							\
+		SH_CLK_SET_RATIO(&pll3_clk_ratio, p30, 1)
+
+
+void __init r8a7743_clock_init(void)
+{
+	u32 mode = rcar_gen2_read_mode_pins();
+	int k, ret = 0;
+
+	switch (mode & (MD(14) | MD(13))) {
+	case 0:
+		R8A7743_CLOCK_ROOT(15, &extal_clk, 172, 208, 106, 88);
+		break;
+	case MD(13):
+		R8A7743_CLOCK_ROOT(20, &extal_clk, 130, 156, 80, 66);
+		break;
+	case MD(14):
+		R8A7743_CLOCK_ROOT(26, &extal_div2_clk, 200, 240, 122, 102);
+		break;
+	case MD(13) | MD(14):
+		R8A7743_CLOCK_ROOT(30, &extal_div2_clk, 172, 208, 106, 88);
+		break;
+	}
+
+	if ((mode & (MD(3) | MD(2) | MD(1))) == MD(2))
+		SH_CLK_SET_RATIO(&qspi_clk_ratio, 1, 16);
+	else
+		SH_CLK_SET_RATIO(&qspi_clk_ratio, 1, 20);
+
+	for (k = 0; !ret && (k < ARRAY_SIZE(main_clks)); k++)
+		ret = clk_register(main_clks[k]);
+
+	if (!ret)
+		ret = sh_clk_div4_register(div4_clks, DIV4_NR, &div4_table);
+
+	if (!ret)
+		ret = sh_clk_div6_register(div6_clks, DIV6_NR);
+
+	if (!ret)
+		ret = sh_clk_mstp_register(mstp_clks, MSTP_NR);
+
+	clkdev_add_table(lookups, ARRAY_SIZE(lookups));
+
+	if (!ret)
+		shmobile_clk_init();
+	else
+		goto epanic;
+
+	return;
+
+epanic:
+	panic("failed to setup r8a7743 clocks\n");
+}
diff --git a/arch/arm/mach-shmobile/pm-r8a7743.c b/arch/arm/mach-shmobile/pm-r8a7743.c
new file mode 100644
index 0000000..38d1617
--- /dev/null
+++ b/arch/arm/mach-shmobile/pm-r8a7743.c
@@ -0,0 +1,269 @@
+/*
+ * r8a7743 Power management support
+ *
+ * Copyright (C) 2013-2014  Renesas Electronics Corporation
+ * Copyright (C) 2011  Renesas Solutions Corp.
+ * Copyright (C) 2011  Magnus Damm
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/notifier.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/pm_clock.h>
+#include <linux/pm_domain.h>
+#include <linux/smp.h>
+#include <asm/io.h>
+#include "common.h"
+#include "pm-rcar.h"
+#include "r8a7743.h"
+
+#define RST		0xe6160000
+#define CA15BAR		0x0020
+#define RAM		0xe63c0000
+
+/* SYSC */
+#define SYSCIER 0x0c
+#define SYSCIMR 0x10
+
+struct r8a7743_pm_domain {
+	struct generic_pm_domain genpd;
+	struct rcar_sysc_ch ch;
+};
+
+static inline struct rcar_sysc_ch *to_r8a7743_ch(struct generic_pm_domain *d)
+{
+	return &container_of(d, struct r8a7743_pm_domain, genpd)->ch;
+}
+
+#if defined(CONFIG_PM) || defined(CONFIG_SMP)
+
+static void __init r8a7743_sysc_init(void)
+{
+	void __iomem *base = rcar_sysc_init(0xe6180000);
+
+	/* enable all interrupt sources, but do not use interrupt handler */
+	iowrite32(0x0131000e, base + SYSCIER);
+	iowrite32(0, base + SYSCIMR);
+}
+
+#else /* CONFIG_PM || CONFIG_SMP */
+
+static inline void r8a7743_sysc_init(void) {}
+
+#endif /* CONFIG_PM || CONFIG_SMP */
+
+#ifdef CONFIG_PM
+
+#define CPG_BASE 0xe6150000
+#define CPG_LEN 0x1000
+
+/* Software Reset */
+#define SRCR0		0x00a0
+#define SRCR1		0x00a8
+#define SRCR2		0x00b0
+#define SRCR3		0x00b8
+#define SRCR4		0x00bc
+#define SRCR5		0x00c4
+#define SRCR6		0x01c8
+#define SRCR7		0x01cc
+#define SRCR8		0x0920
+#define SRCR9		0x0924
+#define SRCR10		0x0928
+#define SRCR11		0x092c
+#define SRSTCLR0	0x0940
+#define SRSTCLR1	0x0944
+#define SRSTCLR2	0x0948
+#define SRSTCLR3	0x094c
+#define SRSTCLR4	0x0950
+#define SRSTCLR5	0x0954
+#define SRSTCLR6	0x0958
+#define SRSTCLR7	0x095c
+#define SRSTCLR8	0x0960
+#define SRSTCLR9	0x0964
+#define SRSTCLR10	0x0968
+#define SRSTCLR11	0x096c
+
+#define SRST_REG(n)	{ .srcr = SRCR##n, .srstclr = SRSTCLR##n, }
+
+static struct software_reset_reg {
+	u16	srcr;
+	u16	srstclr;
+} r8a7743_reset_regs[] = {
+	[0] = SRST_REG(0),
+	[1] = SRST_REG(1),
+	[2] = SRST_REG(2),
+	[3] = SRST_REG(3),
+	[4] = SRST_REG(4),
+	[5] = SRST_REG(5),
+	[6] = SRST_REG(6),
+	[7] = SRST_REG(7),
+	[8] = SRST_REG(8),
+	[9] = SRST_REG(9),
+	[10] = SRST_REG(10),
+	[11] = SRST_REG(11),
+};
+
+static DEFINE_SPINLOCK(r8a7743_reset_lock);
+
+void r8a7743_module_reset(unsigned int n, u32 bits, int usecs)
+{
+	void __iomem *cpg_base;
+	unsigned long flags;
+	u32 srcr;
+
+	if (n >= ARRAY_SIZE(r8a7743_reset_regs)) {
+		pr_err("SRCR%u is not available\n", n);
+		return;
+	}
+
+	if (usecs <= 0)
+		usecs = 50; /* give a short delay for at least one RCLK cycle */
+
+	cpg_base = ioremap(CPG_BASE, CPG_LEN);
+
+	spin_lock_irqsave(&r8a7743_reset_lock, flags);
+	srcr = readl_relaxed(cpg_base + r8a7743_reset_regs[n].srcr);
+	writel_relaxed(srcr | bits, cpg_base + r8a7743_reset_regs[n].srcr);
+	readl_relaxed(cpg_base + r8a7743_reset_regs[n].srcr); /* sync */
+	spin_unlock_irqrestore(&r8a7743_reset_lock, flags);
+
+	udelay(usecs);
+
+	writel_relaxed(bits, cpg_base + r8a7743_reset_regs[n].srstclr);
+	readl_relaxed(cpg_base + r8a7743_reset_regs[n].srstclr); /* sync */
+
+	iounmap(cpg_base);
+}
+
+static int pd_power_down(struct generic_pm_domain *genpd)
+{
+	struct rcar_sysc_ch *r8a7743_ch = to_r8a7743_ch(genpd);
+	int ret;
+
+	ret =  rcar_sysc_power_down(to_r8a7743_ch(genpd));
+
+	if (r8a7743_ch->chan_offs == 0xc0) {
+		/*
+		 * Issue software reset to 3DG functional blocks right after
+		 * the SGX power shut-off to avoid a hardware lock-up issue
+		 * triggered when we bring the SGX power up next time.
+		 */
+		r8a7743_module_reset(1, BIT(12), 2); /* DVFS */
+		r8a7743_module_reset(8, BIT(0), 2); /* CONST */
+	}
+
+	return ret;
+}
+
+static int pd_power_up(struct generic_pm_domain *genpd)
+{
+	return rcar_sysc_power_up(to_r8a7743_ch(genpd));
+}
+
+static bool pd_active_wakeup(struct device *dev)
+{
+	return true;
+}
+
+static struct notifier_block platform_nb;
+
+static void r8a7743_init_pm_domain(struct r8a7743_pm_domain *r8a7743_pd)
+{
+	struct generic_pm_domain *genpd = &r8a7743_pd->genpd;
+
+	pm_genpd_init(genpd, NULL, true);
+	genpd->dev_ops.stop = pm_clk_suspend;
+	genpd->dev_ops.start = pm_clk_resume;
+	genpd->dev_ops.active_wakeup = pd_active_wakeup;
+	genpd->dev_irq_safe = true;
+	genpd->power_off = pd_power_down;
+	genpd->power_on = pd_power_up;
+
+	bus_register_notifier(&platform_bus_type, &platform_nb);
+}
+
+static struct r8a7743_pm_domain r8a7743_pm_domains[] = {
+	{
+		.genpd.name = "pvrsrvkm",
+		.ch = {
+			.chan_offs = 0xc0, /* PWRSR2 .. PWRER2 */
+			.isr_bit = 20, /* SGX */
+		},
+	},
+};
+
+void __init r8a7743_init_pm_domains(void)
+{
+	int j;
+
+	for (j = 0; j < ARRAY_SIZE(r8a7743_pm_domains); j++)
+		r8a7743_init_pm_domain(&r8a7743_pm_domains[j]);
+}
+
+static int r8a7743_pm_notifier_call(struct notifier_block *nb,
+				    unsigned long event, void *data)
+{
+	struct device *dev = data;
+	struct r8a7743_pm_domain *pd;
+	int j;
+
+	switch (event) {
+	case BUS_NOTIFY_BIND_DRIVER:
+		for (j = 0; j < ARRAY_SIZE(r8a7743_pm_domains); j++) {
+			pd = &r8a7743_pm_domains[j];
+			if (!strcmp(pd->genpd.name, dev_name(dev))) {
+				pm_genpd_add_device(&pd->genpd, dev);
+				if (pm_clk_no_clocks(dev))
+					pm_clk_add(dev, NULL);
+			}
+		}
+		break;
+
+	case BUS_NOTIFY_UNBOUND_DRIVER:
+		for (j = 0; j < ARRAY_SIZE(r8a7743_pm_domains); j++) {
+			pd = &r8a7743_pm_domains[j];
+			if (!strcmp(pd->genpd.name, dev_name(dev)))
+				pm_genpd_remove_device(&pd->genpd, dev);
+
+		}
+		break;
+	}
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block platform_nb = {
+	.notifier_call = r8a7743_pm_notifier_call,
+};
+
+#endif /* CONFIG_PM */
+
+void __init r8a7743_pm_init(void)
+{
+	void __iomem *p;
+	u32 bar;
+	static int once;
+
+	if (once++)
+		return;
+
+	/* RAM for jump stub, because BAR requires 256KB aligned address */
+	p = ioremap_nocache(RAM, shmobile_boot_size);
+	memcpy_toio(p, shmobile_boot_vector, shmobile_boot_size);
+	iounmap(p);
+
+	/* setup reset vectors */
+	p = ioremap_nocache(RST, 0x63);
+	bar = (RAM >> 8) & 0xfffffc00;
+	writel_relaxed(bar, p + CA15BAR);
+	writel_relaxed(bar | 0x10, p + CA15BAR);
+	iounmap(p);
+
+	r8a7743_sysc_init();
+	shmobile_smp_apmu_suspend_init();
+}
diff --git a/arch/arm/mach-shmobile/pm-r8a7745.c b/arch/arm/mach-shmobile/pm-r8a7745.c
new file mode 100644
index 0000000..85d29d3
--- /dev/null
+++ b/arch/arm/mach-shmobile/pm-r8a7745.c
@@ -0,0 +1,267 @@
+/*
+ * r8a7745 Power management support
+ *
+ * Copyright (C) 2014  Renesas Electronics Corporation
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/notifier.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/pm_clock.h>
+#include <linux/pm_domain.h>
+#include <linux/smp.h>
+#include <asm/io.h>
+#include "common.h"
+#include "pm-rcar.h"
+#include "r8a7745.h"
+
+#define RST		0xe6160000
+#define CA7BAR		0x0030
+#define RAM		0xe63c0000
+
+/* SYSC */
+#define SYSCIER 0x0c
+#define SYSCIMR 0x10
+
+struct r8a7745_pm_domain {
+	struct generic_pm_domain genpd;
+	struct rcar_sysc_ch ch;
+};
+
+static inline struct rcar_sysc_ch *to_r8a7745_ch(struct generic_pm_domain *d)
+{
+	return &container_of(d, struct r8a7745_pm_domain, genpd)->ch;
+}
+
+#if defined(CONFIG_PM) || defined(CONFIG_SMP)
+
+static void __init r8a7745_sysc_init(void)
+{
+	void __iomem *base = rcar_sysc_init(0xe6180000);
+
+	/* enable all interrupt sources, but do not use interrupt handler */
+	iowrite32(0x0131000e, base + SYSCIER);
+	iowrite32(0, base + SYSCIMR);
+}
+
+#else /* CONFIG_PM || CONFIG_SMP */
+
+static inline void r8a7745_sysc_init(void) {}
+
+#endif /* CONFIG_PM || CONFIG_SMP */
+
+#ifdef CONFIG_PM
+
+#define CPG_BASE 0xe6150000
+#define CPG_LEN 0x1000
+
+/* Software Reset */
+#define SRCR0		0x00a0
+#define SRCR1		0x00a8
+#define SRCR2		0x00b0
+#define SRCR3		0x00b8
+#define SRCR4		0x00bc
+#define SRCR5		0x00c4
+#define SRCR6		0x01c8
+#define SRCR7		0x01cc
+#define SRCR8		0x0920
+#define SRCR9		0x0924
+#define SRCR10		0x0928
+#define SRCR11		0x092c
+#define SRSTCLR0	0x0940
+#define SRSTCLR1	0x0944
+#define SRSTCLR2	0x0948
+#define SRSTCLR3	0x094c
+#define SRSTCLR4	0x0950
+#define SRSTCLR5	0x0954
+#define SRSTCLR6	0x0958
+#define SRSTCLR7	0x095c
+#define SRSTCLR8	0x0960
+#define SRSTCLR9	0x0964
+#define SRSTCLR10	0x0968
+#define SRSTCLR11	0x096c
+
+#define SRST_REG(n)	{ .srcr = SRCR##n, .srstclr = SRSTCLR##n, }
+
+static struct software_reset_reg {
+	u16	srcr;
+	u16	srstclr;
+} r8a7745_reset_regs[] = {
+	[0] = SRST_REG(0),
+	[1] = SRST_REG(1),
+	[2] = SRST_REG(2),
+	[3] = SRST_REG(3),
+	[4] = SRST_REG(4),
+	[5] = SRST_REG(5),
+	[6] = SRST_REG(6),
+	[7] = SRST_REG(7),
+	[8] = SRST_REG(8),
+	[9] = SRST_REG(9),
+	[10] = SRST_REG(10),
+	[11] = SRST_REG(11),
+};
+
+static DEFINE_SPINLOCK(r8a7745_reset_lock);
+
+void r8a7745_module_reset(unsigned int n, u32 bits, int usecs)
+{
+	void __iomem *cpg_base;
+	unsigned long flags;
+	u32 srcr;
+
+	if (n >= ARRAY_SIZE(r8a7745_reset_regs)) {
+		pr_err("SRCR%u is not available\n", n);
+		return;
+	}
+
+	if (usecs <= 0)
+		usecs = 50; /* give a short delay for at least one RCLK cycle */
+
+	cpg_base = ioremap(CPG_BASE, CPG_LEN);
+
+	spin_lock_irqsave(&r8a7745_reset_lock, flags);
+	srcr = readl_relaxed(cpg_base + r8a7745_reset_regs[n].srcr);
+	writel_relaxed(srcr | bits, cpg_base + r8a7745_reset_regs[n].srcr);
+	readl_relaxed(cpg_base + r8a7745_reset_regs[n].srcr); /* sync */
+	spin_unlock_irqrestore(&r8a7745_reset_lock, flags);
+
+	udelay(usecs);
+
+	writel_relaxed(bits, cpg_base + r8a7745_reset_regs[n].srstclr);
+	readl_relaxed(cpg_base + r8a7745_reset_regs[n].srstclr); /* sync */
+
+	iounmap(cpg_base);
+}
+
+static int pd_power_down(struct generic_pm_domain *genpd)
+{
+	struct rcar_sysc_ch *r8a7745_ch = to_r8a7745_ch(genpd);
+	int ret;
+
+	ret =  rcar_sysc_power_down(to_r8a7745_ch(genpd));
+
+	if (r8a7745_ch->chan_offs == 0xc0) {
+		/*
+		 * Issue software reset to 3DG functional blocks right after
+		 * the SGX power shut-off to avoid a hardware lock-up issue
+		 * triggered when we bring the SGX power up next time.
+		 */
+		r8a7745_module_reset(1, BIT(12), 2); /* DVFS */
+		r8a7745_module_reset(8, BIT(0), 2); /* CONST */
+	}
+
+	return ret;
+}
+
+static int pd_power_up(struct generic_pm_domain *genpd)
+{
+	return rcar_sysc_power_up(to_r8a7745_ch(genpd));
+}
+
+static bool pd_active_wakeup(struct device *dev)
+{
+	return true;
+}
+
+static struct notifier_block platform_nb;
+
+static void r8a7745_init_pm_domain(struct r8a7745_pm_domain *r8a7745_pd)
+{
+	struct generic_pm_domain *genpd = &r8a7745_pd->genpd;
+
+	pm_genpd_init(genpd, NULL, true);
+	genpd->dev_ops.stop = pm_clk_suspend;
+	genpd->dev_ops.start = pm_clk_resume;
+	genpd->dev_ops.active_wakeup = pd_active_wakeup;
+	genpd->dev_irq_safe = true;
+	genpd->power_off = pd_power_down;
+	genpd->power_on = pd_power_up;
+
+	bus_register_notifier(&platform_bus_type, &platform_nb);
+}
+
+static struct r8a7745_pm_domain r8a7745_pm_domains[] = {
+	{
+		.genpd.name = "pvrsrvkm",
+		.ch = {
+			.chan_offs = 0xc0, /* PWRSR2 .. PWRER2 */
+			.isr_bit = 20, /* RGX */
+		},
+	},
+};
+
+void __init r8a7745_init_pm_domains(void)
+{
+	int j;
+
+	for (j = 0; j < ARRAY_SIZE(r8a7745_pm_domains); j++)
+		r8a7745_init_pm_domain(&r8a7745_pm_domains[j]);
+}
+
+static int r8a7745_pm_notifier_call(struct notifier_block *nb,
+				    unsigned long event, void *data)
+{
+	struct device *dev = data;
+	struct r8a7745_pm_domain *pd;
+	int j;
+
+	switch (event) {
+	case BUS_NOTIFY_BIND_DRIVER:
+		for (j = 0; j < ARRAY_SIZE(r8a7745_pm_domains); j++) {
+			pd = &r8a7745_pm_domains[j];
+			if (!strcmp(pd->genpd.name, dev_name(dev))) {
+				pm_genpd_add_device(&pd->genpd, dev);
+				if (pm_clk_no_clocks(dev))
+					pm_clk_add(dev, NULL);
+			}
+		}
+		break;
+
+	case BUS_NOTIFY_UNBOUND_DRIVER:
+		for (j = 0; j < ARRAY_SIZE(r8a7745_pm_domains); j++) {
+			pd = &r8a7745_pm_domains[j];
+			if (!strcmp(pd->genpd.name, dev_name(dev)))
+				pm_genpd_remove_device(&pd->genpd, dev);
+
+		}
+		break;
+	}
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block platform_nb = {
+	.notifier_call = r8a7745_pm_notifier_call,
+};
+
+#endif /* CONFIG_PM */
+
+void __init r8a7745_pm_init(void)
+{
+	void __iomem *p;
+	u32 bar;
+	static int once;
+
+	if (once++)
+		return;
+
+	/* RAM for jump stub, because BAR requires 256KB aligned address */
+	p = ioremap_nocache(RAM, shmobile_boot_size);
+	memcpy_toio(p, shmobile_boot_vector, shmobile_boot_size);
+	iounmap(p);
+
+	/* setup reset vectors */
+	p = ioremap_nocache(RST, 0x63);
+	bar = (RAM >> 8) & 0xfffffc00;
+	writel_relaxed(bar, p + CA7BAR);
+	writel_relaxed(bar | 0x10, p + CA7BAR);
+	iounmap(p);
+
+	r8a7745_sysc_init();
+	shmobile_smp_apmu_suspend_init();
+}
diff --git a/arch/arm/mach-shmobile/r8a7743.h b/arch/arm/mach-shmobile/r8a7743.h
new file mode 100644
index 0000000..7cfa7ad
--- /dev/null
+++ b/arch/arm/mach-shmobile/r8a7743.h
@@ -0,0 +1,142 @@
+#ifndef __ASM_R8A7743_H__
+#define __ASM_R8A7743_H__
+
+struct platform_device;
+
+/* DMA slave IDs */
+enum {
+	RCAR_DMA_SLAVE_INVALID,
+	AUDIO_DMAC_SLAVE_SCU0_TX,
+	AUDIO_DMAC_SLAVE_SCU0_RX,
+	AUDIO_DMAC_SLAVE_SCU1_TX,
+	AUDIO_DMAC_SLAVE_SCU1_RX,
+	AUDIO_DMAC_SLAVE_SCU2_TX,
+	AUDIO_DMAC_SLAVE_SCU2_RX,
+	AUDIO_DMAC_SLAVE_SCU3_TX,
+	AUDIO_DMAC_SLAVE_SCU3_RX,
+	AUDIO_DMAC_SLAVE_SCU4_TX,
+	AUDIO_DMAC_SLAVE_SCU4_RX,
+	AUDIO_DMAC_SLAVE_SCU5_TX,
+	AUDIO_DMAC_SLAVE_SCU5_RX,
+	AUDIO_DMAC_SLAVE_SCU6_TX,
+	AUDIO_DMAC_SLAVE_SCU6_RX,
+	AUDIO_DMAC_SLAVE_SCU7_TX,
+	AUDIO_DMAC_SLAVE_SCU7_RX,
+	AUDIO_DMAC_SLAVE_SCU8_TX,
+	AUDIO_DMAC_SLAVE_SCU8_RX,
+	AUDIO_DMAC_SLAVE_SCU9_TX,
+	AUDIO_DMAC_SLAVE_SCU9_RX,
+	AUDIO_DMAC_SLAVE_SSI0_TX,
+	AUDIO_DMAC_SLAVE_SSI0_RX,
+	AUDIO_DMAC_SLAVE_SSI1_TX,
+	AUDIO_DMAC_SLAVE_SSI1_RX,
+	AUDIO_DMAC_SLAVE_SSI2_TX,
+	AUDIO_DMAC_SLAVE_SSI2_RX,
+	AUDIO_DMAC_SLAVE_SSI3_TX,
+	AUDIO_DMAC_SLAVE_SSI3_RX,
+	AUDIO_DMAC_SLAVE_SSI4_TX,
+	AUDIO_DMAC_SLAVE_SSI4_RX,
+	AUDIO_DMAC_SLAVE_SSI5_TX,
+	AUDIO_DMAC_SLAVE_SSI5_RX,
+	AUDIO_DMAC_SLAVE_SSI6_TX,
+	AUDIO_DMAC_SLAVE_SSI6_RX,
+	AUDIO_DMAC_SLAVE_SSI7_TX,
+	AUDIO_DMAC_SLAVE_SSI7_RX,
+	AUDIO_DMAC_SLAVE_SSI8_TX,
+	AUDIO_DMAC_SLAVE_SSI8_RX,
+	AUDIO_DMAC_SLAVE_SSI9_TX,
+	AUDIO_DMAC_SLAVE_SSI9_RX,
+	AUDIO_DMAC_SLAVE_SSIU0_TX,
+	AUDIO_DMAC_SLAVE_SSIU0_RX,
+	AUDIO_DMAC_SLAVE_SSIU1_TX,
+	AUDIO_DMAC_SLAVE_SSIU1_RX,
+	AUDIO_DMAC_SLAVE_SSIU2_TX,
+	AUDIO_DMAC_SLAVE_SSIU2_RX,
+	AUDIO_DMAC_SLAVE_SSIU3_TX,
+	AUDIO_DMAC_SLAVE_SSIU3_RX,
+	AUDIO_DMAC_SLAVE_SSIU4_TX,
+	AUDIO_DMAC_SLAVE_SSIU4_RX,
+	AUDIO_DMAC_SLAVE_SSIU5_TX,
+	AUDIO_DMAC_SLAVE_SSIU5_RX,
+	AUDIO_DMAC_SLAVE_SSIU6_TX,
+	AUDIO_DMAC_SLAVE_SSIU6_RX,
+	AUDIO_DMAC_SLAVE_SSIU7_TX,
+	AUDIO_DMAC_SLAVE_SSIU7_RX,
+	AUDIO_DMAC_SLAVE_SSIU8_TX,
+	AUDIO_DMAC_SLAVE_SSIU8_RX,
+	AUDIO_DMAC_SLAVE_SSIU9_TX,
+	AUDIO_DMAC_SLAVE_SSIU9_RX,
+	AUDIO_DMAC_SLAVE_CMD1_TO_MEM,
+	AUDIOPP_DMAC_SLAVE_SCU0_TO_SSI0,
+	AUDIOPP_DMAC_SLAVE_SCU1_TO_SSI1,
+	AUDIOPP_DMAC_SLAVE_SCU2_TO_SSI2,
+	AUDIOPP_DMAC_SLAVE_SCU3_TO_SSI3,
+	AUDIOPP_DMAC_SLAVE_SCU4_TO_SSI4,
+	AUDIOPP_DMAC_SLAVE_SCU5_TO_SSI5,
+	AUDIOPP_DMAC_SLAVE_SCU6_TO_SSI6,
+	AUDIOPP_DMAC_SLAVE_SCU7_TO_SSI7,
+	AUDIOPP_DMAC_SLAVE_SCU8_TO_SSI8,
+	AUDIOPP_DMAC_SLAVE_SCU9_TO_SSI9,
+	AUDIOPP_DMAC_SLAVE_SSI0_TO_SCU0,
+	AUDIOPP_DMAC_SLAVE_SSI1_TO_SCU1,
+	AUDIOPP_DMAC_SLAVE_SSI2_TO_SCU2,
+	AUDIOPP_DMAC_SLAVE_SSI3_TO_SCU3,
+	AUDIOPP_DMAC_SLAVE_SSI4_TO_SCU4,
+	AUDIOPP_DMAC_SLAVE_SSI5_TO_SCU5,
+	AUDIOPP_DMAC_SLAVE_SSI6_TO_SCU6,
+	AUDIOPP_DMAC_SLAVE_SSI7_TO_SCU7,
+	AUDIOPP_DMAC_SLAVE_SSI8_TO_SCU8,
+	AUDIOPP_DMAC_SLAVE_SSI9_TO_SCU9,
+	AUDIOPP_DMAC_SLAVE_CMD0_TO_SSI0,
+	SYS_DMAC_SLAVE_SDHI0_TX,
+	SYS_DMAC_SLAVE_SDHI0_RX,
+	SYS_DMAC_SLAVE_SDHI1_TX,
+	SYS_DMAC_SLAVE_SDHI1_RX,
+	SYS_DMAC_SLAVE_SDHI2_TX,
+	SYS_DMAC_SLAVE_SDHI2_RX,
+	SYS_DMAC_SLAVE_SCIF0_TX,
+	SYS_DMAC_SLAVE_SCIF0_RX,
+	SYS_DMAC_SLAVE_SCIF1_TX,
+	SYS_DMAC_SLAVE_SCIF1_RX,
+	SYS_DMAC_SLAVE_SCIF2_TX,
+	SYS_DMAC_SLAVE_SCIF2_RX,
+	SYS_DMAC_SLAVE_SCIF3_TX,
+	SYS_DMAC_SLAVE_SCIF3_RX,
+	SYS_DMAC_SLAVE_SCIF4_TX,
+	SYS_DMAC_SLAVE_SCIF4_RX,
+	SYS_DMAC_SLAVE_SCIF5_TX,
+	SYS_DMAC_SLAVE_SCIF5_RX,
+	SYS_DMAC_SLAVE_HSCIF0_TX,
+	SYS_DMAC_SLAVE_HSCIF0_RX,
+	SYS_DMAC_SLAVE_HSCIF1_TX,
+	SYS_DMAC_SLAVE_HSCIF1_RX,
+	SYS_DMAC_SLAVE_HSCIF2_TX,
+	SYS_DMAC_SLAVE_HSCIF2_RX,
+	SYS_DMAC_SLAVE_MSIOF0_TX,
+	SYS_DMAC_SLAVE_MSIOF0_RX,
+	SYS_DMAC_SLAVE_MSIOF1_TX,
+	SYS_DMAC_SLAVE_MSIOF1_RX,
+	SYS_DMAC_SLAVE_MSIOF2_TX,
+	SYS_DMAC_SLAVE_MSIOF2_RX,
+	USB_DMAC_SLAVE_USBHS_TX,
+	USB_DMAC_SLAVE_USBHS_RX,
+	USB_DMAC1_SLAVE_USBHS_TX,
+	USB_DMAC1_SLAVE_USBHS_RX,
+};
+
+void r8a7743_add_standard_devices(void);
+void r8a7743_add_dt_devices(void);
+void r8a7743_clock_init(void);
+void r8a7743_pinmux_init(void);
+void r8a7743_pm_init(void);
+extern struct smp_operations r8a7743_smp_ops;
+
+#ifdef CONFIG_PM
+extern void __init r8a7743_init_pm_domains(void);
+#else
+static inline void r8a7743_init_pm_domains(void) {}
+#endif /* CONFIG_PM */
+
+void r8a7743_module_reset(unsigned int n, u32 bits, int usecs);
+
+#endif /* __ASM_R8A7743_H__ */
diff --git a/arch/arm/mach-shmobile/r8a7745.h b/arch/arm/mach-shmobile/r8a7745.h
new file mode 100644
index 0000000..dc08619
--- /dev/null
+++ b/arch/arm/mach-shmobile/r8a7745.h
@@ -0,0 +1,130 @@
+#ifndef __ASM_R8A7745_H__
+#define __ASM_R8A7745_H__
+
+struct platform_device;
+
+/* DMA slave IDs */
+enum {
+	RCAR_DMA_SLAVE_INVALID,
+	AUDIO_DMAC_SLAVE_SCU1_TX,
+	AUDIO_DMAC_SLAVE_SCU1_RX,
+	AUDIO_DMAC_SLAVE_SCU2_TX,
+	AUDIO_DMAC_SLAVE_SCU2_RX,
+	AUDIO_DMAC_SLAVE_SCU3_TX,
+	AUDIO_DMAC_SLAVE_SCU3_RX,
+	AUDIO_DMAC_SLAVE_SCU4_TX,
+	AUDIO_DMAC_SLAVE_SCU4_RX,
+	AUDIO_DMAC_SLAVE_SCU5_TX,
+	AUDIO_DMAC_SLAVE_SCU5_RX,
+	AUDIO_DMAC_SLAVE_SCU6_TX,
+	AUDIO_DMAC_SLAVE_SCU6_RX,
+	AUDIO_DMAC_SLAVE_SSI0_TX,
+	AUDIO_DMAC_SLAVE_SSI0_RX,
+	AUDIO_DMAC_SLAVE_SSI1_TX,
+	AUDIO_DMAC_SLAVE_SSI1_RX,
+	AUDIO_DMAC_SLAVE_SSI2_TX,
+	AUDIO_DMAC_SLAVE_SSI2_RX,
+	AUDIO_DMAC_SLAVE_SSI3_TX,
+	AUDIO_DMAC_SLAVE_SSI3_RX,
+	AUDIO_DMAC_SLAVE_SSI4_TX,
+	AUDIO_DMAC_SLAVE_SSI4_RX,
+	AUDIO_DMAC_SLAVE_SSI5_TX,
+	AUDIO_DMAC_SLAVE_SSI5_RX,
+	AUDIO_DMAC_SLAVE_SSI6_TX,
+	AUDIO_DMAC_SLAVE_SSI6_RX,
+	AUDIO_DMAC_SLAVE_SSI7_TX,
+	AUDIO_DMAC_SLAVE_SSI7_RX,
+	AUDIO_DMAC_SLAVE_SSI8_TX,
+	AUDIO_DMAC_SLAVE_SSI8_RX,
+	AUDIO_DMAC_SLAVE_SSI9_TX,
+	AUDIO_DMAC_SLAVE_SSI9_RX,
+	AUDIO_DMAC_SLAVE_CMD1_TO_MEM,
+	AUDIO_DMAC_SLAVE_SSIU0_TX,
+	AUDIO_DMAC_SLAVE_SSIU0_RX,
+	AUDIO_DMAC_SLAVE_SSIU1_TX,
+	AUDIO_DMAC_SLAVE_SSIU1_RX,
+	AUDIO_DMAC_SLAVE_SSIU2_TX,
+	AUDIO_DMAC_SLAVE_SSIU2_RX,
+	AUDIO_DMAC_SLAVE_SSIU3_TX,
+	AUDIO_DMAC_SLAVE_SSIU3_RX,
+	AUDIO_DMAC_SLAVE_SSIU4_TX,
+	AUDIO_DMAC_SLAVE_SSIU4_RX,
+	AUDIO_DMAC_SLAVE_SSIU5_TX,
+	AUDIO_DMAC_SLAVE_SSIU5_RX,
+	AUDIO_DMAC_SLAVE_SSIU6_TX,
+	AUDIO_DMAC_SLAVE_SSIU6_RX,
+	AUDIO_DMAC_SLAVE_SSIU7_TX,
+	AUDIO_DMAC_SLAVE_SSIU7_RX,
+	AUDIO_DMAC_SLAVE_SSIU8_TX,
+	AUDIO_DMAC_SLAVE_SSIU8_RX,
+	AUDIO_DMAC_SLAVE_SSIU9_TX,
+	AUDIO_DMAC_SLAVE_SSIU9_RX,
+	AUDIOPP_DMAC_SLAVE_SCU1_TO_SSI0,
+	AUDIOPP_DMAC_SLAVE_SCU1_TO_SSI1,
+	AUDIOPP_DMAC_SLAVE_SCU2_TO_SSI2,
+	AUDIOPP_DMAC_SLAVE_SCU3_TO_SSI3,
+	AUDIOPP_DMAC_SLAVE_SCU4_TO_SSI4,
+	AUDIOPP_DMAC_SLAVE_SCU5_TO_SSI5,
+	AUDIOPP_DMAC_SLAVE_SCU6_TO_SSI6,
+	AUDIOPP_DMAC_SLAVE_SSI1_TO_SCU1,
+	AUDIOPP_DMAC_SLAVE_SSI1_TO_SCU2,
+	AUDIOPP_DMAC_SLAVE_SSI2_TO_SCU2,
+	AUDIOPP_DMAC_SLAVE_SSI3_TO_SCU3,
+	AUDIOPP_DMAC_SLAVE_SSI4_TO_SCU4,
+	AUDIOPP_DMAC_SLAVE_SSI5_TO_SCU5,
+	AUDIOPP_DMAC_SLAVE_SSI6_TO_SCU6,
+	AUDIOPP_DMAC_SLAVE_CMD0_TO_SSI0,
+	SYS_DMAC_SLAVE_MMCIF0_TX,
+	SYS_DMAC_SLAVE_MMCIF0_RX,
+	SYS_DMAC_SLAVE_SDHI0_TX,
+	SYS_DMAC_SLAVE_SDHI0_RX,
+	SYS_DMAC_SLAVE_SDHI1_TX,
+	SYS_DMAC_SLAVE_SDHI1_RX,
+	SYS_DMAC_SLAVE_SCIF0_TX,
+	SYS_DMAC_SLAVE_SCIF0_RX,
+	SYS_DMAC_SLAVE_SCIF1_TX,
+	SYS_DMAC_SLAVE_SCIF1_RX,
+	SYS_DMAC_SLAVE_SCIF2_TX,
+	SYS_DMAC_SLAVE_SCIF2_RX,
+	SYS_DMAC_SLAVE_SCIF3_TX,
+	SYS_DMAC_SLAVE_SCIF3_RX,
+	SYS_DMAC_SLAVE_SCIF4_TX,
+	SYS_DMAC_SLAVE_SCIF4_RX,
+	SYS_DMAC_SLAVE_SCIF5_TX,
+	SYS_DMAC_SLAVE_SCIF5_RX,
+	SYS_DMAC_SLAVE_HSCIF0_TX,
+	SYS_DMAC_SLAVE_HSCIF0_RX,
+	SYS_DMAC_SLAVE_HSCIF1_TX,
+	SYS_DMAC_SLAVE_HSCIF1_RX,
+	SYS_DMAC_SLAVE_HSCIF2_TX,
+	SYS_DMAC_SLAVE_HSCIF2_RX,
+	SYS_DMAC_SLAVE_MSIOF0_TX,
+	SYS_DMAC_SLAVE_MSIOF0_RX,
+	SYS_DMAC_SLAVE_MSIOF1_TX,
+	SYS_DMAC_SLAVE_MSIOF1_RX,
+	SYS_DMAC_SLAVE_MSIOF2_TX,
+	SYS_DMAC_SLAVE_MSIOF2_RX,
+	USB_DMAC_SLAVE_USBHS_TX,
+	USB_DMAC_SLAVE_USBHS_RX,
+	USB_DMAC1_SLAVE_USBHS_TX,
+	USB_DMAC1_SLAVE_USBHS_RX,
+};
+
+void r8a7745_add_standard_devices(void);
+void r8a7745_add_dt_devices(void);
+void r8a7745_clock_init(void);
+void r8a7745_pinmux_init(void);
+void r8a7745_pm_init(void);
+void r8a7745_init_early(void);
+void r8a7745_timer_init(void);
+extern struct smp_operations r8a7745_smp_ops;
+
+#ifdef CONFIG_PM
+extern void __init r8a7745_init_pm_domains(void);
+#else
+static inline void r8a7745_init_pm_domains(void) {}
+#endif /* CONFIG_PM */
+
+void r8a7745_module_reset(unsigned int n, u32 bits, int usecs);
+
+#endif /* __ASM_R8A7745_H__ */
diff --git a/arch/arm/mach-shmobile/setup-r8a7743.c b/arch/arm/mach-shmobile/setup-r8a7743.c
new file mode 100644
index 0000000..ace8ada
--- /dev/null
+++ b/arch/arm/mach-shmobile/setup-r8a7743.c
@@ -0,0 +1,290 @@
+/*
+ * r8a7743 processor support
+ *
+ * Copyright (C) 2013-2015  Renesas Electronics Corporation
+ * Copyright (C) 2013  Renesas Solutions Corp.
+ * Copyright (C) 2013  Magnus Damm
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/of_platform.h>
+#include <linux/platform_data/gpio-rcar.h>
+#include <linux/platform_data/irq-renesas-irqc.h>
+#include <linux/serial_sci.h>
+#include <linux/sh_dma.h>
+#include <linux/sh_timer.h>
+#include <linux/spi/sh_msiof.h>
+#include <asm/mach/arch.h>
+
+#include "common.h"
+#include "dma-register.h"
+#include "irqs.h"
+#include "r8a7743.h"
+#include "rcar-gen2.h"
+
+static const struct resource pfc_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe6060000, 0x250),
+};
+
+#define r8a7743_register_pfc()						\
+	platform_device_register_simple("pfc-r8a7743", -1, pfc_resources, \
+					ARRAY_SIZE(pfc_resources))
+
+#define r8a7743_GPIO(idx, base, nr)					\
+static const struct resource r8a7743_gpio##idx##_resources[] __initconst = { \
+	DEFINE_RES_MEM((base), 0x50),					\
+	DEFINE_RES_IRQ(gic_spi(4 + (idx))),				\
+};									\
+									\
+static const struct gpio_rcar_config					\
+r8a7743_gpio##idx##_platform_data __initconst = {			\
+	.gpio_base	= 32 * (idx),					\
+	.irq_base	= 0,						\
+	.number_of_pins	= (nr),						\
+	.pctl_name	= "pfc-r8a7743",				\
+	.has_both_edge_trigger = 1,					\
+};									\
+
+r8a7743_GPIO(0, 0xe6050000, 32);
+r8a7743_GPIO(1, 0xe6051000, 32);
+r8a7743_GPIO(2, 0xe6052000, 32);
+r8a7743_GPIO(3, 0xe6053000, 32);
+r8a7743_GPIO(4, 0xe6054000, 32);
+r8a7743_GPIO(5, 0xe6055000, 32);
+r8a7743_GPIO(6, 0xe6055400, 32);
+r8a7743_GPIO(7, 0xe6055800, 26);
+
+#define r8a7743_register_gpio(idx)					\
+	platform_device_register_resndata(&platform_bus, "gpio_rcar", idx, \
+		r8a7743_gpio##idx##_resources,				\
+		ARRAY_SIZE(r8a7743_gpio##idx##_resources),		\
+		&r8a7743_gpio##idx##_platform_data,			\
+		sizeof(r8a7743_gpio##idx##_platform_data))
+
+void __init r8a7743_pinmux_init(void)
+{
+	r8a7743_register_pfc();
+	r8a7743_register_gpio(0);
+	r8a7743_register_gpio(1);
+	r8a7743_register_gpio(2);
+	r8a7743_register_gpio(3);
+	r8a7743_register_gpio(4);
+	r8a7743_register_gpio(5);
+	r8a7743_register_gpio(6);
+	r8a7743_register_gpio(7);
+}
+
+#define __r8a7743_SCIF(scif_type, index, baseaddr, irq)			\
+static struct plat_sci_port scif##index##_platform_data = {		\
+	.type		= scif_type,					\
+	.flags		= UPF_BOOT_AUTOCONF | UPF_IOREMAP,		\
+	.scscr		= SCSCR_RE | SCSCR_TE,				\
+};									\
+									\
+static struct resource scif##index##_resources[] = {			\
+	DEFINE_RES_MEM(baseaddr, 0x100),				\
+	DEFINE_RES_IRQ(irq),						\
+}
+
+#define r8a7743_SCIF(index, baseaddr, irq)				\
+	__r8a7743_SCIF(PORT_SCIF, index, baseaddr, irq)
+
+#define r8a7743_HSCIF(index, baseaddr, irq)				\
+	__r8a7743_SCIF(PORT_HSCIF, index, baseaddr, irq)
+
+
+r8a7743_SCIF(0,   0xe6e60000, gic_spi(152)); /* SCIF0 */
+r8a7743_SCIF(1,   0xe6e68000, gic_spi(153)); /* SCIF1 */
+r8a7743_HSCIF(2,  0xe62c0000, gic_spi(154)); /* HSCIF0 */
+r8a7743_HSCIF(3,  0xe62c8000, gic_spi(155)); /* HSCIF1 */
+r8a7743_SCIF(4,  0xe6e58000, gic_spi(22)); /* SCIF2 */
+r8a7743_SCIF(5,  0xe6ea8000, gic_spi(23)); /* SCIF3 */
+r8a7743_SCIF(6,  0xe6ee0000, gic_spi(24)); /* SCIF4 */
+r8a7743_SCIF(7,  0xe6ee8000, gic_spi(25)); /* SCIF5 */
+r8a7743_HSCIF(8, 0xe62d0000, gic_spi(21)); /* HSCIF2 */
+
+#define r8a7743_register_scif(index)					       \
+	platform_device_register_resndata(&platform_bus, "sh-sci", index,      \
+					  scif##index##_resources,	       \
+					  ARRAY_SIZE(scif##index##_resources), \
+					  &scif##index##_platform_data,	       \
+					  sizeof(scif##index##_platform_data))
+
+static const struct sh_timer_config cmt00_platform_data __initconst = {
+	.name = "CMT00",
+	.timer_bit = 0,
+	.clockevent_rating = 80,
+};
+
+static const struct resource cmt00_resources[] __initconst = {
+	DEFINE_RES_MEM(0xffca0510, 0x0c),
+	DEFINE_RES_MEM(0xffca0500, 0x04),
+	DEFINE_RES_IRQ(gic_spi(142)), /* CMT0_0 */
+};
+
+#define r8a7743_register_cmt(idx)					\
+	platform_device_register_resndata(&platform_bus, "sh_cmt",	\
+					  idx, cmt##idx##_resources,	\
+					  ARRAY_SIZE(cmt##idx##_resources), \
+					  &cmt##idx##_platform_data,	\
+					  sizeof(struct sh_timer_config))
+
+static struct renesas_irqc_config irqc0_data = {
+	.irq_base = irq_pin(0), /* IRQ0 -> IRQ9 */
+};
+
+static struct resource irqc0_resources[] = {
+	DEFINE_RES_MEM(0xe61c0000, 0x200), /* IRQC Event Detector Block_0 */
+	DEFINE_RES_IRQ(gic_spi(0)), /* IRQ0 */
+	DEFINE_RES_IRQ(gic_spi(1)), /* IRQ1 */
+	DEFINE_RES_IRQ(gic_spi(2)), /* IRQ2 */
+	DEFINE_RES_IRQ(gic_spi(3)), /* IRQ3 */
+	DEFINE_RES_IRQ(gic_spi(12)), /* IRQ4 */
+	DEFINE_RES_IRQ(gic_spi(13)), /* IRQ5 */
+	DEFINE_RES_IRQ(gic_spi(14)), /* IRQ6 */
+	DEFINE_RES_IRQ(gic_spi(15)), /* IRQ7 */
+	DEFINE_RES_IRQ(gic_spi(16)), /* IRQ8 */
+	DEFINE_RES_IRQ(gic_spi(17)), /* IRQ9 */
+};
+
+#define r8a7743_register_irqc(idx)					\
+	platform_device_register_resndata(&platform_bus, "renesas_irqc", \
+					  idx, irqc##idx##_resources,	\
+					  ARRAY_SIZE(irqc##idx##_resources), \
+					  &irqc##idx##_data,		\
+					  sizeof(struct renesas_irqc_config))
+
+static const struct resource thermal_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe61f0000, 0x14),
+	DEFINE_RES_MEM(0xe61f0100, 0x38),
+	DEFINE_RES_IRQ(gic_spi(69)),
+};
+
+#define r8a7743_register_thermal()					\
+	platform_device_register_simple("rcar_thermal", -1,		\
+					thermal_resources,		\
+					ARRAY_SIZE(thermal_resources))
+
+/* MSIOF */
+#define MSIOF_COMMON				\
+	.rx_fifo_override	= 256,			\
+	.num_chipselect		= 1
+
+static const struct sh_msiof_spi_info sh_msiof_info[] __initconst = {
+	{
+		MSIOF_COMMON,
+	},
+	{
+		MSIOF_COMMON,
+	},
+	{
+		MSIOF_COMMON,
+	},
+};
+
+static const struct resource sh_msiof0_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe6e20000, 0x0064),
+	DEFINE_RES_IRQ(gic_spi(156)),
+};
+
+static const struct resource sh_msiof1_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe6e10000, 0x0064),
+	DEFINE_RES_IRQ(gic_spi(157)),
+};
+
+static const struct resource sh_msiof2_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe6e00000, 0x0064),
+	DEFINE_RES_IRQ(gic_spi(158)),
+};
+
+#define r8a7743_register_msiof(idx)					\
+	platform_device_register_resndata(&platform_bus, "spi_sh_msiof", \
+				  (idx+1), sh_msiof##idx##_resources,	\
+				  ARRAY_SIZE(sh_msiof##idx##_resources), \
+				  &sh_msiof_info[idx],		\
+				  sizeof(struct sh_msiof_spi_info))
+
+/* POWERVR */
+static const struct resource powervr_resources[] __initconst = {
+	DEFINE_RES_MEM(0xfd800000, 0x10000),
+	DEFINE_RES_IRQ(gic_spi(119)),
+};
+
+#define __r8a7743_register_pvrsrvkm()					\
+	platform_device_register_simple("pvrsrvkm", -1,			\
+					powervr_resources,		\
+					ARRAY_SIZE(powervr_resources))
+
+#define CPG_BASE	0xe6150000
+#define CPG_LEN		0x1000
+#define RGXCR		0x0B4
+
+void __init r8a7743_register_pvrsrvkm(void)
+{
+	void __iomem *cpg_base;
+	unsigned int val;
+
+	cpg_base = ioremap(CPG_BASE, CPG_LEN);
+	val = ioread32(cpg_base + RGXCR);
+	iowrite32(val | (1 << 16), cpg_base + RGXCR);
+	iounmap(cpg_base);
+	__r8a7743_register_pvrsrvkm();
+}
+
+void __init r8a7743_add_dt_devices(void)
+{
+	r8a7743_pm_init();
+	r8a7743_init_pm_domains();
+	r8a7743_register_cmt(00);
+	r8a7743_register_pvrsrvkm();
+}
+
+void __init r8a7743_add_standard_devices(void)
+{
+	r8a7743_register_scif(0);
+	r8a7743_register_scif(1);
+	r8a7743_register_scif(2);
+	r8a7743_register_scif(3);
+	r8a7743_register_scif(4);
+	r8a7743_register_scif(5);
+	r8a7743_register_scif(6);
+	r8a7743_register_scif(7);
+	r8a7743_register_scif(8);
+
+	r8a7743_add_dt_devices();
+	r8a7743_register_irqc(0);
+	r8a7743_register_thermal();
+	r8a7743_register_msiof(0);
+	r8a7743_register_msiof(1);
+	r8a7743_register_msiof(2);
+}
+
+#ifdef CONFIG_USE_OF
+static const char *r8a7743_boards_compat_dt[] __initdata = {
+	"renesas,r8a7743",
+	NULL,
+};
+
+DT_MACHINE_START(r8a7743_DT, "Generic r8a7743 (Flattened Device Tree)")
+	.smp		= smp_ops(r8a7743_smp_ops),
+	.init_early	= shmobile_init_delay,
+	.init_time	= rcar_gen2_timer_init,
+	.init_late	= shmobile_init_late,
+	.reserve	= rcar_gen2_reserve,
+	.dt_compat	= r8a7743_boards_compat_dt,
+MACHINE_END
+#endif /* CONFIG_USE_OF */
diff --git a/arch/arm/mach-shmobile/setup-r8a7745.c b/arch/arm/mach-shmobile/setup-r8a7745.c
new file mode 100644
index 0000000..b7bf2d1
--- /dev/null
+++ b/arch/arm/mach-shmobile/setup-r8a7745.c
@@ -0,0 +1,293 @@
+/*
+ * r8a7745 processor support
+ *
+ * Copyright (C) 2014-2015  Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <linux/clk/shmobile.h>
+#include <linux/clocksource.h>
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/of_platform.h>
+#include <linux/platform_data/gpio-rcar.h>
+#include <linux/platform_data/irq-renesas-irqc.h>
+#include <linux/serial_sci.h>
+#include <linux/sh_dma.h>
+#include <linux/sh_timer.h>
+#include <linux/spi/sh_msiof.h>
+
+#include <asm/mach/arch.h>
+
+#include "common.h"
+#include "dma-register.h"
+#include "irqs.h"
+#include "r8a7745.h"
+#include "rcar-gen2.h"
+
+static const struct resource pfc_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe6060000, 0x250),
+};
+
+#define r8a7745_register_pfc()						\
+	platform_device_register_simple("pfc-r8a7745", -1, pfc_resources, \
+					ARRAY_SIZE(pfc_resources))
+
+#define r8a7745_GPIO(idx)						\
+static const struct resource r8a7745_gpio##idx##_resources[] __initconst = { \
+	DEFINE_RES_MEM(0xe6050000 + 0x1000 * (idx), 0x50),		\
+	DEFINE_RES_IRQ(gic_spi(4 + (idx))),				\
+};									\
+									\
+static const struct gpio_rcar_config					\
+r8a7745_gpio##idx##_platform_data __initconst = {			\
+	.gpio_base	= 32 * (idx),					\
+	.irq_base	= 0,						\
+	.number_of_pins	= 32,						\
+	.pctl_name	= "pfc-r8a7745",				\
+	.has_both_edge_trigger = 1,					\
+};									\
+
+r8a7745_GPIO(0);
+r8a7745_GPIO(1);
+r8a7745_GPIO(2);
+r8a7745_GPIO(3);
+r8a7745_GPIO(4);
+r8a7745_GPIO(5);
+r8a7745_GPIO(6);
+
+#define r8a7745_register_gpio(idx)					\
+	platform_device_register_resndata(&platform_bus, "gpio_rcar", idx, \
+		r8a7745_gpio##idx##_resources,				\
+		ARRAY_SIZE(r8a7745_gpio##idx##_resources),		\
+		&r8a7745_gpio##idx##_platform_data,			\
+		sizeof(r8a7745_gpio##idx##_platform_data))
+
+void __init r8a7745_pinmux_init(void)
+{
+	r8a7745_register_pfc();
+	r8a7745_register_gpio(0);
+	r8a7745_register_gpio(1);
+	r8a7745_register_gpio(2);
+	r8a7745_register_gpio(3);
+	r8a7745_register_gpio(4);
+	r8a7745_register_gpio(5);
+	r8a7745_register_gpio(6);
+}
+
+#define __r8a7745_SCIF(scif_type, _scscr, index, baseaddr, irq)		\
+static struct plat_sci_port scif##index##_platform_data = {		\
+	.type		= scif_type,					\
+	.flags		= UPF_BOOT_AUTOCONF | UPF_IOREMAP,		\
+	.scscr		= _scscr,					\
+};									\
+									\
+static struct resource scif##index##_resources[] = {			\
+	DEFINE_RES_MEM(baseaddr, 0x100),				\
+	DEFINE_RES_IRQ(irq),						\
+}
+
+#define r8a7745_SCIF(index, baseaddr, irq)				\
+	__r8a7745_SCIF(PORT_SCIF, SCSCR_RE | SCSCR_TE,			\
+		       index, baseaddr, irq)
+
+#define r8a7745_HSCIF(index, baseaddr, irq)				\
+	__r8a7745_SCIF(PORT_HSCIF, SCSCR_RE | SCSCR_TE,			\
+		       index, baseaddr, irq)
+
+
+r8a7745_SCIF(0,  0xe6e60000, gic_spi(152)); /* SCIF0 */
+r8a7745_SCIF(1,  0xe6e68000, gic_spi(153)); /* SCIF1 */
+r8a7745_HSCIF(2, 0xe62c0000, gic_spi(154)); /* HSCIF0 */
+r8a7745_HSCIF(3, 0xe62c8000, gic_spi(155)); /* HSCIF1 */
+r8a7745_SCIF(4,  0xe6e58000, gic_spi(22)); /* SCIF2 */
+
+#define r8a7745_register_scif(index)					       \
+	platform_device_register_resndata(&platform_bus, "sh-sci", index,      \
+					  scif##index##_resources,	       \
+					  ARRAY_SIZE(scif##index##_resources), \
+					  &scif##index##_platform_data,	       \
+					  sizeof(scif##index##_platform_data))
+
+static const struct renesas_irqc_config irqc0_data __initconst = {
+	.irq_base = irq_pin(0), /* IRQ0 -> IRQ3 */
+};
+
+static const struct resource irqc0_resources[] __initconst = {
+	DEFINE_RES_MEM(0xe61c0000, 0x200), /* IRQC Event Detector Block_0 */
+	DEFINE_RES_IRQ(gic_spi(0)), /* IRQ0 */
+	DEFINE_RES_IRQ(gic_spi(1)), /* IRQ1 */
+	DEFINE_RES_IRQ(gic_spi(2)), /* IRQ2 */
+	DEFINE_RES_IRQ(gic_spi(3)), /* IRQ3 */
+};
+
+#define r8a7745_register_irqc(idx)					\
+	platform_device_register_resndata(&platform_bus, "renesas_irqc", \
+					  idx, irqc##idx##_resources,	\
+					  ARRAY_SIZE(irqc##idx##_resources), \
+					  &irqc##idx##_data,		\
+					  sizeof(struct renesas_irqc_config))
+
+
+static const struct sh_timer_config cmt00_platform_data __initconst = {
+	.name = "CMT00",
+	.timer_bit = 0,
+	.clockevent_rating = 80,
+};
+
+static const struct resource cmt00_resources[] __initconst = {
+	DEFINE_RES_MEM(0xffca0510, 0x0c),
+	DEFINE_RES_MEM(0xffca0500, 0x04),
+	DEFINE_RES_IRQ(gic_spi(142)), /* CMT0_0 */
+};
+
+#define r8a7745_register_cmt(idx)					\
+	platform_device_register_resndata(&platform_bus, "sh_cmt",	\
+					  idx, cmt##idx##_resources,	\
+					  ARRAY_SIZE(cmt##idx##_resources), \
+					  &cmt##idx##_platform_data,	\
+					  sizeof(struct sh_timer_config))
+
+/* POWERVR */
+static const struct resource powervr_resources[] __initconst = {
+	DEFINE_RES_MEM(0xfd800000, 0x10000),
+	DEFINE_RES_IRQ(gic_spi(119)),
+};
+
+#define __r8a7745_register_pvrsrvkm()					\
+	platform_device_register_simple("pvrsrvkm", -1,			\
+					powervr_resources,		\
+					ARRAY_SIZE(powervr_resources))
+
+#define CPG_BASE	0xe6150000
+#define CPG_LEN		0x1000
+#define RGXCR		0x0B4
+
+void __init r8a7745_register_pvrsrvkm(void)
+{
+	void __iomem *cpg_base;
+	unsigned int val;
+
+	cpg_base = ioremap(CPG_BASE, CPG_LEN);
+	val = ioread32(cpg_base + RGXCR);
+	iowrite32(val | (1 << 16), cpg_base + RGXCR);
+	iounmap(cpg_base);
+	__r8a7745_register_pvrsrvkm();
+}
+
+void __init r8a7745_add_dt_devices(void)
+{
+	r8a7745_pm_init();
+	r8a7745_init_pm_domains();
+	r8a7745_register_cmt(00);
+	r8a7745_register_pvrsrvkm();
+}
+
+void __init r8a7745_add_standard_devices(void)
+{
+	r8a7745_register_scif(0);
+	r8a7745_register_scif(1);
+	r8a7745_register_scif(2);
+	r8a7745_register_scif(3);
+	r8a7745_register_scif(4);
+
+	r8a7745_add_dt_devices();
+	r8a7745_register_irqc(0);
+}
+
+void __init r8a7745_init_early(void)
+{
+#ifndef CONFIG_ARM_ARCH_TIMER
+	shmobile_setup_delay(1000, 2, 4); /* Cortex-A7 @ 1000MHz */
+#endif
+}
+
+#define CNTCR 0
+#define CNTFID0 0x20
+
+void __init r8a7745_timer_init(void)
+{
+#if defined(CONFIG_ARM_ARCH_TIMER) || defined(CONFIG_COMMON_CLK)
+	u32 mode = rcar_gen2_read_mode_pins();
+#endif
+#ifdef CONFIG_ARM_ARCH_TIMER
+	void __iomem *base;
+	u32 freq;
+
+	/* CNTVOFF has to be initialized either from non-secure Hypervisor
+	 * mode or secure Monitor mode with SCR.NS==1. If TrustZone is enabled
+	 * then it should be handled by the secure code
+	 */
+	asm volatile(
+	"	cps	0x16\n"
+	"	mrc	p15, 0, r1, c1, c1, 0\n"
+	"	orr	r0, r1, #1\n"
+	"	mcr	p15, 0, r0, c1, c1, 0\n"
+	"	isb\n"
+	"	mov	r0, #0\n"
+	"	mcrr	p15, 4, r0, r0, c14\n"
+	"	isb\n"
+	"	mcr	p15, 0, r1, c1, c1, 0\n"
+	"	isb\n"
+	"	cps	0x13\n"
+		: : : "r0", "r1");
+
+	/* The arch timer frequency equals ZS / 8 */
+	freq = 260000000 / 8;
+
+	/* Remap "armgcnt address map" space */
+	base = ioremap(0xe6080000, PAGE_SIZE);
+
+	/*
+	 * Update the timer if it is either not running, or is not at the
+	 * right frequency. The timer is only configurable in secure mode
+	 * so this avoids an abort if the loader started the timer and
+	 * entered the kernel in non-secure mode.
+	 */
+
+	if ((ioread32(base + CNTCR) & 1) == 0 ||
+	    ioread32(base + CNTFID0) != freq) {
+		/* Update registers with correct frequency */
+		iowrite32(freq, base + CNTFID0);
+		asm volatile("mcr p15, 0, %0, c14, c0, 0" : : "r" (freq));
+
+		/* make sure arch timer is started by setting bit 0 of CNTCR */
+		iowrite32(1, base + CNTCR);
+	}
+
+	iounmap(base);
+#endif /* CONFIG_ARM_ARCH_TIMER */
+
+#ifdef CONFIG_COMMON_CLK
+	rcar_gen2_clocks_init(mode);
+#endif
+	clocksource_of_init();
+}
+
+#ifdef CONFIG_USE_OF
+
+static const char * const r8a7745_boards_compat_dt[] __initconst = {
+	"renesas,r8a7745",
+	NULL,
+};
+
+DT_MACHINE_START(r8a7745_DT, "Generic r8a7745 (Flattened Device Tree)")
+	.smp		= smp_ops(r8a7745_smp_ops),
+	.init_early	= r8a7745_init_early,
+	.init_time	= r8a7745_timer_init,
+	.reserve	= rcar_gen2_reserve,
+	.dt_compat	= r8a7745_boards_compat_dt,
+MACHINE_END
+#endif /* CONFIG_USE_OF */
diff --git a/arch/arm/mach-shmobile/smp-r8a7743.c b/arch/arm/mach-shmobile/smp-r8a7743.c
new file mode 100644
index 0000000..8560207
--- /dev/null
+++ b/arch/arm/mach-shmobile/smp-r8a7743.c
@@ -0,0 +1,85 @@
+/*
+ * SMP support for r8a7743
+ *
+ * Copyright (C) 2014 Renesas Electronics Corporation
+ * Copyright (C) 2013 Renesas Solutions Corp.
+ * Copyright (C) 2013 Magnus Damm
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+
+#include <asm/smp_plat.h>
+#include <mach/platsmp-apmu.h>
+#include <mach/platsmp-rst.h>
+
+#include "common.h"
+#include "pm-rcar.h"
+#include "r8a7743.h"
+#include "rcar-gen2.h"
+
+#define APMU		0xe6151000
+#define CA15DBGRCR	0x1180
+
+#define CA15RESCNT	0x0040
+
+static struct rcar_apmu_config r8a7743_apmu_config[] = {
+	{
+		.iomem = DEFINE_RES_MEM(0xe6152000, 0x88),
+		.cpus = { 0, 1 },
+	}
+};
+
+static struct rcar_rst_config r8a7743_rst_config[] = {
+	{
+		.rescnt = CA15RESCNT,
+		.rescnt_magic = 0xa5a50000,
+	}
+};
+
+static void __init r8a7743_smp_prepare_cpus(unsigned int max_cpus)
+{
+	void __iomem *p;
+	u32 val;
+	unsigned int k;
+
+	/* let APMU code install data related to shmobile_boot_vector */
+	shmobile_smp_apmu_prepare_cpus(max_cpus,
+				       r8a7743_apmu_config,
+				       ARRAY_SIZE(r8a7743_apmu_config));
+
+	/* setup for debug mode */
+	if (rcar_gen2_read_mode_pins() & MD(21)) {
+		p = ioremap_nocache(APMU, 0x2000);
+		val = readl_relaxed(p + CA15DBGRCR);
+		writel_relaxed((val | 0x01f80000), p + CA15DBGRCR);
+		iounmap(p);
+	}
+
+	r8a7743_pm_init();
+
+	/* keep secondary CPU cores in reset */
+	r8a779x_init_reset(r8a7743_rst_config);
+	for (k = 1; k < max_cpus; k++)
+		r8a779x_assert_reset(k);
+}
+
+struct smp_operations r8a7743_smp_ops __initdata = {
+	.smp_prepare_cpus	= r8a7743_smp_prepare_cpus,
+	.smp_boot_secondary	= shmobile_smp_apmu_boot_secondary,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_disable		= shmobile_smp_cpu_disable,
+	.cpu_die		= shmobile_smp_apmu_cpu_die,
+	.cpu_kill		= shmobile_smp_apmu_cpu_kill,
+#endif
+};
diff --git a/arch/arm/mach-shmobile/smp-r8a7745.c b/arch/arm/mach-shmobile/smp-r8a7745.c
new file mode 100644
index 0000000..f75587ad
--- /dev/null
+++ b/arch/arm/mach-shmobile/smp-r8a7745.c
@@ -0,0 +1,90 @@
+/*
+ * SMP support for r8a7745
+ *
+ * Copyright (C) 2014  Renesas Electronics Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+
+#include <asm/smp_plat.h>
+#include <mach/platsmp-apmu.h>
+#include <mach/platsmp-rst.h>
+
+#include "common.h"
+#include "pm-rcar.h"
+#include "r8a7745.h"
+#include "rcar-gen2.h"
+
+#define APMU		0xe6151000
+#define CA7DBGRCR	0x0180
+
+#define CA7RESCNT	0x0044
+
+static struct rcar_sysc_ch r8a7745_ca7_scu = {
+	.chan_offs = 0x100, /* PWRSR3 .. PWRER3 */
+	.isr_bit = 21, /* CA7-SCU */
+};
+
+static struct rcar_apmu_config r8a7745_apmu_config[] = {
+	{
+		.iomem = DEFINE_RES_MEM(0xe6151000, 0x88),
+		.cpus = { 0, 1 },
+	}
+};
+
+static struct rcar_rst_config r8a7745_rst_config[] = {
+	{
+		.rescnt = CA7RESCNT,
+		.rescnt_magic = 0x5a5a0000,
+	}
+};
+
+static void __init r8a7745_smp_prepare_cpus(unsigned int max_cpus)
+{
+	void __iomem *p;
+	u32 val;
+	unsigned int k;
+
+	/* let APMU code install data related to shmobile_boot_vector */
+	shmobile_smp_apmu_prepare_cpus(max_cpus,
+				       r8a7745_apmu_config,
+				       ARRAY_SIZE(r8a7745_apmu_config));
+
+	/* setup for debug mode */
+	if (rcar_gen2_read_mode_pins() & MD(21)) {
+		p = ioremap_nocache(APMU, 0x1000);
+		val = readl_relaxed(p + CA7DBGRCR);
+		writel_relaxed((val | 0x01f83330), p + CA7DBGRCR);
+		iounmap(p);
+	}
+
+	/* turn on power to SCU */
+	r8a7745_pm_init();
+	rcar_sysc_power_up(&r8a7745_ca7_scu);
+
+	/* keep secondary CPU cores in reset */
+	r8a779x_init_reset(r8a7745_rst_config);
+	for (k = 1; k < max_cpus; k++)
+		r8a779x_assert_reset(k);
+}
+
+struct smp_operations r8a7745_smp_ops __initdata = {
+	.smp_prepare_cpus	= r8a7745_smp_prepare_cpus,
+	.smp_boot_secondary	= shmobile_smp_apmu_boot_secondary,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_disable		= shmobile_smp_cpu_disable,
+	.cpu_die		= shmobile_smp_apmu_cpu_die,
+	.cpu_kill		= shmobile_smp_apmu_cpu_kill,
+#endif
+};
diff --git a/drivers/media/platform/soc_camera/rcar_vin.c b/drivers/media/platform/soc_camera/rcar_vin.c
index 5435fd2..fb68ed0 100644
--- a/drivers/media/platform/soc_camera/rcar_vin.c
+++ b/drivers/media/platform/soc_camera/rcar_vin.c
@@ -126,6 +126,7 @@
 #define VNDMR2_VPS		(1 << 30)
 #define VNDMR2_HPS		(1 << 29)
 #define VNDMR2_FTEV		(1 << 17)
+#define VNDMR2_VLV_1	(1 << 12)

 #define VIN_MAX_WIDTH		2048
 #define VIN_MAX_HEIGHT		2048
@@ -636,6 +637,7 @@ static int rcar_vin_setup(struct rcar_vin_priv *priv)

 	/* output format */
 	switch (icd->current_fmt->host_fmt->fourcc) {
+	case V4L2_PIX_FMT_NV12: /*FIXME: capture NV16 data with NV12 format name*/
 	case V4L2_PIX_FMT_NV16:
 		iowrite32(ALIGN((cam->out_width * cam->out_height), 0x80),
 			  priv->base + VNUVAOF_REG);
@@ -1268,7 +1270,7 @@ static int rcar_vin_set_bus_param(struct soc_camera_device *icd)
 	if (ret < 0 && ret != -ENOIOCTLCMD)
 		return ret;

-	val = priv->field == V4L2_FIELD_NONE ? VNDMR2_FTEV : 0;
+	val = VNDMR2_FTEV | VNDMR2_VLV_1;
 	if (!(common_flags & V4L2_MBUS_VSYNC_ACTIVE_LOW))
 		val |= VNDMR2_VPS;
 	if (!(common_flags & V4L2_MBUS_HSYNC_ACTIVE_LOW))
@@ -1329,6 +1331,14 @@ static const struct soc_mbus_pixelfmt rcar_vin_formats[] = {
 		.layout			= SOC_MBUS_LAYOUT_PLANAR_Y_C,
 	},
 	{
+		.fourcc			= V4L2_PIX_FMT_NV12,
+		.name			= "NV12",
+		.bits_per_sample	= 8,
+		.packing		= SOC_MBUS_PACKING_2X8_PADHI,
+		.order			= SOC_MBUS_ORDER_LE,
+		.layout			= SOC_MBUS_LAYOUT_PLANAR_Y_C,
+	},
+	{
 		.fourcc			= V4L2_PIX_FMT_YUYV,
 		.name			= "YUYV",
 		.bits_per_sample	= 16,
@@ -1806,7 +1816,8 @@ static int rcar_vin_try_fmt(struct soc_camera_device *icd,
 	pix->field = mf.field;
 	pix->colorspace = mf.colorspace;

-	if (pixfmt == V4L2_PIX_FMT_NV16) {
+	/*FIXME: VIN capture NV16 data with NV12 format name*/
+	if (pixfmt == V4L2_PIX_FMT_NV16 || pixfmt == V4L2_PIX_FMT_NV12) {
 		/* FIXME: check against rect_max after converting soc-camera */
 		/* We can scale precisely, need a bigger image from camera */
 		if (pix->width < width || pix->height < height) {
diff --git a/drivers/media/v4l2-core/videobuf2-dma-contig.c b/drivers/media/v4l2-core/videobuf2-dma-contig.c
index fd56f25..ee89901 100644
--- a/drivers/media/v4l2-core/videobuf2-dma-contig.c
+++ b/drivers/media/v4l2-core/videobuf2-dma-contig.c
@@ -210,6 +210,7 @@ static int vb2_dc_mmap(void *buf_priv, struct vm_area_struct *vma)
 	vma->vm_flags		|= VM_DONTEXPAND | VM_DONTDUMP;
 	vma->vm_private_data	= &buf->handler;
 	vma->vm_ops		= &vb2_common_vm_ops;
+	vma->vm_pgoff = buf->dma_addr >> PAGE_SHIFT;

 	vma->vm_ops->open(vma);

diff --git a/include/dt-bindings/clock/r8a7743-clock.h b/include/dt-bindings/clock/r8a7743-clock.h
new file mode 100644
index 0000000..15168c9
--- /dev/null
+++ b/include/dt-bindings/clock/r8a7743-clock.h
@@ -0,0 +1,137 @@
+/*
+ * Copyright 2013 Ideas On Board SPRL
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __DT_BINDINGS_CLOCK_R8A7743_H__
+#define __DT_BINDINGS_CLOCK_R8A7743_H__
+
+/* CPG */
+#define R8A7743_CLK_MAIN		0
+#define R8A7743_CLK_PLL0		1
+#define R8A7743_CLK_PLL1		2
+#define R8A7743_CLK_PLL3		3
+#define R8A7743_CLK_LB			4
+#define R8A7743_CLK_QSPI		5
+#define R8A7743_CLK_SDH			6
+#define R8A7743_CLK_SD0			7
+#define R8A7743_CLK_Z			8
+
+/* MSTP0 */
+#define R8A7743_CLK_MSIOF0		0
+
+/* MSTP1 */
+#define R8A7743_CLK_VCP0		1
+#define R8A7743_CLK_VPC0		3
+#define R8A7743_CLK_TMU1		11
+#define R8A7743_CLK_PVRSRVKM		12
+#define R8A7743_CLK_2DDMAC		15
+#define R8A7743_CLK_FDP1		18
+#define R8A7743_CLK_FDP0		19
+#define R8A7743_CLK_TMU3		21
+#define R8A7743_CLK_TMU2		22
+#define R8A7743_CLK_CMT0		24
+#define R8A7743_CLK_VSP1_DU1		27
+#define R8A7743_CLK_VSP1_DU0		28
+#define R8A7743_CLK_VSP1_S		31
+
+/* MSTP2 */
+#define R8A7743_CLK_MSIOF2		5
+#define R8A7743_CLK_MSIOF1		8
+#define R8A7743_CLK_SYS_DMAC1		18
+#define R8A7743_CLK_SYS_DMAC0		19
+
+/* MSTP3 */
+#define R8A7743_CLK_TPU0		4
+#define R8A7743_CLK_SDHI2		11
+#define R8A7743_CLK_SDHI1		12
+#define R8A7743_CLK_SDHI0		14
+#define R8A7743_CLK_MMCIF0		15
+#define R8A7743_CLK_PCIEC		19
+#define R8A7743_CLK_SSUSB		28
+#define R8A7743_CLK_CMT1		29
+#define R8A7743_CLK_USBDMAC0		30
+#define R8A7743_CLK_USBDMAC1		31
+
+/* MSTP5 */
+#define R8A7743_CLK_AUDIO_DMAC1		1
+#define R8A7743_CLK_AUDIO_DMAC0		2
+#define R8A7743_CLK_THERMAL		22
+#define R8A7743_CLK_PWM			23
+
+/* MSTP7 */
+#define R8A7743_CLK_EHCI		3
+#define R8A7743_CLK_HSUSB		4
+#define R8A7743_CLK_HSCIF2		13
+#define R8A7743_CLK_SCIF5		14
+#define R8A7743_CLK_SCIF4		15
+#define R8A7743_CLK_HSCIF1		16
+#define R8A7743_CLK_HSCIF0		17
+#define R8A7743_CLK_SCIF3		18
+#define R8A7743_CLK_SCIF2		19
+#define R8A7743_CLK_SCIF1		20
+#define R8A7743_CLK_SCIF0		21
+#define R8A7743_CLK_DU1			23
+#define R8A7743_CLK_DU0			24
+#define R8A7743_CLK_LVDS0		26
+
+/* MSTP8 */
+#define R8A7743_CLK_IPMMU_GP		0
+#define R8A7743_CLK_VIN2		9
+#define R8A7743_CLK_VIN1		10
+#define R8A7743_CLK_VIN0		11
+#define R8A7743_CLK_ETHER		13
+#define R8A7743_CLK_SATA1		14
+#define R8A7743_CLK_SATA0		15
+
+/* MSTP9 */
+#define R8A7743_CLK_GPIO7		4
+#define R8A7743_CLK_GPIO6		5
+#define R8A7743_CLK_GPIO5		7
+#define R8A7743_CLK_GPIO4		8
+#define R8A7743_CLK_GPIO3		9
+#define R8A7743_CLK_GPIO2		10
+#define R8A7743_CLK_GPIO1		11
+#define R8A7743_CLK_GPIO0		12
+#define R8A7743_CLK_RCAN1		15
+#define R8A7743_CLK_RCAN0		16
+#define R8A7743_CLK_QSPI_MOD		17
+#define R8A7743_CLK_I2C5		25
+#define R8A7743_CLK_I2C4		27
+#define R8A7743_CLK_I2C3		28
+#define R8A7743_CLK_I2C2		29
+#define R8A7743_CLK_I2C1		30
+#define R8A7743_CLK_I2C0		31
+
+/* MSTP10 */
+#define R8A7743_CLK_SSI			5
+#define R8A7743_CLK_SSI9		6
+#define R8A7743_CLK_SSI8		7
+#define R8A7743_CLK_SSI7		8
+#define R8A7743_CLK_SSI6		9
+#define R8A7743_CLK_SSI5		10
+#define R8A7743_CLK_SSI4		11
+#define R8A7743_CLK_SSI3		12
+#define R8A7743_CLK_SSI2		13
+#define R8A7743_CLK_SSI1		14
+#define R8A7743_CLK_SSI0		15
+#define R8A7743_CLK_SCU			17
+#define R8A7743_CLK_DVC1		18
+#define R8A7743_CLK_DVC0		19
+#define R8A7743_CLK_SRC9		22
+#define R8A7743_CLK_SRC8		23
+#define R8A7743_CLK_SRC7		24
+#define R8A7743_CLK_SRC6		25
+#define R8A7743_CLK_SRC5		26
+#define R8A7743_CLK_SRC4		27
+#define R8A7743_CLK_SRC3		28
+#define R8A7743_CLK_SRC2		29
+#define R8A7743_CLK_SRC1		30
+#define R8A7743_CLK_SRC0		31
+
+
+#endif /* __DT_BINDINGS_CLOCK_R8A7743_H__ */
diff --git a/include/dt-bindings/clock/r8a7745-clock.h b/include/dt-bindings/clock/r8a7745-clock.h
new file mode 100644
index 0000000..383f7fa
--- /dev/null
+++ b/include/dt-bindings/clock/r8a7745-clock.h
@@ -0,0 +1,128 @@
+/*
+ * Copyright 2013 Ideas On Board SPRL
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __DT_BINDINGS_CLOCK_R8A7745_H__
+#define __DT_BINDINGS_CLOCK_R8A7745_H__
+
+/* CPG */
+#define R8A7745_CLK_MAIN		0
+#define R8A7745_CLK_PLL0		1
+#define R8A7745_CLK_PLL1		2
+#define R8A7745_CLK_PLL3		3
+#define R8A7745_CLK_LB			4
+#define R8A7745_CLK_QSPI		5
+#define R8A7745_CLK_SDH			6
+#define R8A7745_CLK_SD0			7
+#define R8A7745_CLK_Z			8
+
+/* MSTP0 */
+#define R8A7745_CLK_MSIOF0		0
+
+/* MSTP1 */
+#define R8A7745_CLK_VCP0		1
+#define R8A7745_CLK_VPC0		3
+#define R8A7745_CLK_TMU1		11
+#define R8A7745_CLK_PVRSRVKM		12
+#define R8A7745_CLK_2DDMAC		15
+#define R8A7745_CLK_FDP0		19
+#define R8A7745_CLK_TMU3		21
+#define R8A7745_CLK_TMU2		22
+#define R8A7745_CLK_CMT0		24
+#define R8A7745_CLK_VSP1_DU0		28
+#define R8A7745_CLK_VSP1_S		31
+
+/* MSTP2 */
+#define R8A7745_CLK_MSIOF2		5
+#define R8A7745_CLK_MSIOF1		8
+#define R8A7745_CLK_SYS_DMAC1		18
+#define R8A7745_CLK_SYS_DMAC0		19
+
+/* MSTP3 */
+#define R8A7745_CLK_TPU0		4
+#define R8A7745_CLK_SDHI2		11
+#define R8A7745_CLK_SDHI1		12
+#define R8A7745_CLK_SDHI0		14
+#define R8A7745_CLK_MMCIF0		15
+#define R8A7745_CLK_CMT1		29
+#define R8A7745_CLK_USBDMAC0		30
+#define R8A7745_CLK_USBDMAC1		31
+
+/* MSTP5 */
+#define R8A7745_CLK_AUDIO_DMAC0		2
+#define R8A7745_CLK_PWM			23
+
+/* MSTP7 */
+#define R8A7745_CLK_EHCI		3
+#define R8A7745_CLK_HSUSB		4
+#define R8A7745_CLK_HSCIF2		13
+#define R8A7745_CLK_SCIF5		14
+#define R8A7745_CLK_SCIF4		15
+#define R8A7745_CLK_HSCIF1		16
+#define R8A7745_CLK_HSCIF0		17
+#define R8A7745_CLK_SCIF3		18
+#define R8A7745_CLK_SCIF2		19
+#define R8A7745_CLK_SCIF1		20
+#define R8A7745_CLK_SCIF0		21
+#define R8A7745_CLK_DU1			23
+#define R8A7745_CLK_DU0			24
+
+/* MSTP8 */
+#define R8A7745_CLK_IPMMU_GP		0
+#define R8A7745_CLK_VIN1		10
+#define R8A7745_CLK_VIN0		11
+#define R8A7745_CLK_AVB			12
+#define R8A7745_CLK_ETHER		13
+
+
+/* MSTP9 */
+#define R8A7745_CLK_GPIO6		5
+#define R8A7745_CLK_GPIO5		7
+#define R8A7745_CLK_GPIO4		8
+#define R8A7745_CLK_GPIO3		9
+#define R8A7745_CLK_GPIO2		10
+#define R8A7745_CLK_GPIO1		11
+#define R8A7745_CLK_GPIO0		12
+#define R8A7745_CLK_RCAN1		15
+#define R8A7745_CLK_RCAN0		16
+#define R8A7745_CLK_QSPI_MOD		17
+#define R8A7745_CLK_I2C5		25
+#define R8A7745_CLK_I2C4		27
+#define R8A7745_CLK_I2C3		28
+#define R8A7745_CLK_I2C2		29
+#define R8A7745_CLK_I2C1		30
+#define R8A7745_CLK_I2C0		31
+
+/* MSTP10 */
+#define R8A7745_CLK_SSI			5
+#define R8A7745_CLK_SSI9		6
+#define R8A7745_CLK_SSI8		7
+#define R8A7745_CLK_SSI7		8
+#define R8A7745_CLK_SSI6		9
+#define R8A7745_CLK_SSI5		10
+#define R8A7745_CLK_SSI4		11
+#define R8A7745_CLK_SSI3		12
+#define R8A7745_CLK_SSI2		13
+#define R8A7745_CLK_SSI1		14
+#define R8A7745_CLK_SSI0		15
+#define R8A7745_CLK_SCU			17
+#define R8A7745_CLK_DVC1		18
+#define R8A7745_CLK_DVC0		19
+#define R8A7745_CLK_SRC9		22
+#define R8A7745_CLK_SRC8		23
+#define R8A7745_CLK_SRC7		24
+#define R8A7745_CLK_SRC6		25
+#define R8A7745_CLK_SRC5		26
+#define R8A7745_CLK_SRC4		27
+#define R8A7745_CLK_SRC3		28
+#define R8A7745_CLK_SRC2		29
+#define R8A7745_CLK_SRC1		30
+#define R8A7745_CLK_SRC0		31
+
+
+#endif /* __DT_BINDINGS_CLOCK_R8A7745_H__ */
--
1.9.1

