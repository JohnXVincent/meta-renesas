From 15f69c2b7bf6b808095ed86203e0f8d3dc23c837 Mon Sep 17 00:00:00 2001
From: "Nguyen Van Linh [FGA.BU13.RZG]" <LinhNV25@fsoft.com.vn>
Date: Sun, 16 Apr 2017 14:30:09 +0700
Subject: [PATCH 13/15] iwg23s: usb: Add usb driver support.
 Signed-off-by: Nguyen Van Linh [FGA.BU13.RZG]
 <LinhNV25@fsoft.com.vn>

---
 drivers/usb/host/ohci-platform.c    |   16 ++-
 drivers/usb/phy/Kconfig             |    8 +-
 drivers/usb/phy/phy-rcar-gen2-usb.c |  213 ++++++++++++++++++++++++++++++++++-
 drivers/usb/renesas_usbhs/common.c  |   15 ++-
 drivers/usb/renesas_usbhs/common.h  |   18 +++
 drivers/usb/renesas_usbhs/fifo.c    |  102 ++++++++++++++++-
 drivers/usb/renesas_usbhs/mod.c     |   22 ++++
 7 files changed, 384 insertions(+), 10 deletions(-)

diff --git a/drivers/usb/host/ohci-platform.c b/drivers/usb/host/ohci-platform.c
index c3e7287..e7ced88 100644
--- a/drivers/usb/host/ohci-platform.c
+++ b/drivers/usb/host/ohci-platform.c
@@ -84,6 +84,8 @@ static const struct hc_driver ohci_platform_hc_driver = {
 	.start_port_reset	= ohci_start_port_reset,
 };
 
+static struct usb_ohci_pdata ohci_platform_defaults;
+
 static int ohci_platform_probe(struct platform_device *dev)
 {
 	struct usb_hcd *hcd;
@@ -92,14 +94,18 @@ static int ohci_platform_probe(struct platform_device *dev)
 	int irq;
 	int err = -ENOMEM;
 
-	if (!pdata) {
-		WARN_ON(1);
-		return -ENODEV;
-	}
-
 	if (usb_disabled())
 		return -ENODEV;
 
+	/*
+	 * Use reasonable defaults so platforms don't have to provide these
+	 * with DT probing on ARM.
+	 */
+	if (!pdata) {
+		pdata = &ohci_platform_defaults;
+		dev->dev.platform_data = pdata;
+	}
+
 	irq = platform_get_irq(dev, 0);
 	if (irq < 0) {
 		dev_err(&dev->dev, "no irq provided");
diff --git a/drivers/usb/phy/Kconfig b/drivers/usb/phy/Kconfig
index bbefdf2..14ceb7d 100644
--- a/drivers/usb/phy/Kconfig
+++ b/drivers/usb/phy/Kconfig
@@ -202,7 +202,7 @@ config USB_RCAR_PHY
 
 config USB_RCAR_GEN2_PHY
 	tristate "Renesas R-Car Gen2 USB PHY support"
-	depends on ARCH_R8A7790 || ARCH_R8A7791 || ARCH_R8A7793 || ARCH_R8A7794 || ARCH_R8A7743 || ARCH_R8A7745 || COMPILE_TEST
+	depends on ARCH_R8A7747X || ARCH_R8A7790 || ARCH_R8A7791 || ARCH_R8A7793 || ARCH_R8A7794 || ARCH_R8A7743 || ARCH_R8A7745 || COMPILE_TEST
 	select USB_PHY
 	help
 	  Say Y here to add support for the Renesas R-Car Gen2 USB PHY driver.
@@ -239,4 +239,10 @@ config USB_ZYNQ_PHY
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called xilinx_usbps_otg.
+
+config USB_ALEX
+	tristate "ALE4 and ALE6 support"
+	help
+	  Enable this to support ALE4 and ALE6.
+
 endmenu
diff --git a/drivers/usb/phy/phy-rcar-gen2-usb.c b/drivers/usb/phy/phy-rcar-gen2-usb.c
index 9e7205d..54f8071 100644
--- a/drivers/usb/phy/phy-rcar-gen2-usb.c
+++ b/drivers/usb/phy/phy-rcar-gen2-usb.c
@@ -24,8 +24,9 @@
 
 struct rcar_gen2_usb_phy_priv {
 	struct usb_phy phy;
-	void __iomem *base;
-	struct clk *clk;
+	void __iomem *base;		/* USBHS  */
+	void __iomem *usb2_base;	/* USB2.0 */
+	struct clk *clk;		/* USBHS  */
 	spinlock_t lock;
 	int usecount;
 	u32 ugctrl2;
@@ -49,15 +50,126 @@ struct rcar_gen2_usb_phy_priv {
 
 /* USB General control register 2 */
 #define USBHS_UGCTRL2_REG		0x84
+#define USBHS_UGCTRL2_USB0		(3 << 4)
 #define USBHS_UGCTRL2_USB0_PCI		(1 << 4)
+#ifdef CONFIG_USB_ALEX
+#define USBHS_UGCTRL2_USB0_HS		(2 << 4)
+#else
 #define USBHS_UGCTRL2_USB0_HS		(3 << 4)
+#endif
 #define USBHS_UGCTRL2_USB2_PCI		(0 << 31)
 #define USBHS_UGCTRL2_USB2_SS		(1 << 31)
+#define USBHS_UGCTRL2_USB0_HOST		USBHS_UGCTRL2_USB0_PCI
+#define USBHS_UGCTRL2_MASK		0x00000031 /* bit[31:6] should be 0 */
 
 /* USB General status register */
 #define USBHS_UGSTS_REG			0x88
 #define USBHS_UGSTS_LOCK		(1 << 8)
 
+/* USB Control register */
+#define USB2_USBCTR_REG			0x00c
+#define USB2_USBCTR_DIRPD		(1 << 2)
+#define USB2_USBCTR_PLL_RST		(1 << 1)
+
+/* Overcurrent Detection Timer Setting register */
+#define USB2_OC_TIMSET_REG		0x110
+#define USB2_OC_TIMSET_INIT		0x000209ab
+
+/* Suspend/Resume Timer Setting register */
+#define USB2_SPD_RSM_TIMSET_REG		0x10c
+#define USB2_SPD_RSM_TIMSET_INIT	0x014e029b
+
+#define USB2_INT_ENABLE_REG		0x000
+#define USB2_INT_ENABLE_USBH_INTB_EN	(1 << 2)
+#define USB2_INT_ENABLE_USBH_INTA_EN	(1 << 1)
+#define USB2_INT_ENABLE_INIT		(USB2_INT_ENABLE_USBH_INTB_EN | \
+					 USB2_INT_ENABLE_USBH_INTA_EN)
+
+#ifdef CONFIG_USB_ALEX
+/* Enable USBHS internal phy */
+static int __rcar_gen2_usbhs_phy_enable(void __iomem *base,
+					void __iomem *usb2_base)
+{
+	u32 val;
+
+	/* USBHS PHY power on */
+	val = ioread32(base + USBHS_UGCTRL_REG);
+	val &= ~USBHS_UGCTRL_PLLRESET;
+	iowrite32(val, base + USBHS_UGCTRL_REG);
+
+	val = readl(usb2_base + USB2_USBCTR_REG);
+	val |= USB2_USBCTR_PLL_RST;
+	writel(val, usb2_base + USB2_USBCTR_REG);
+	val &= ~USB2_USBCTR_PLL_RST;
+	writel(val, usb2_base + USB2_USBCTR_REG);
+
+	/* Power on HSUSB PHY */
+	val = readw(base + USBHS_LPSTS_REG);
+	val |= USBHS_LPSTS_SUSPM;
+	writew(val, base + USBHS_LPSTS_REG);
+
+	return 0;
+}
+
+/* Disable USBHS internal phy */
+static int __rcar_gen2_usbhs_phy_disable(void __iomem *base)
+{
+	u32 val;
+
+	/* Power off HSUSB PHY */
+	val = readw(base + USBHS_LPSTS_REG);
+	val &= ~USBHS_LPSTS_SUSPM;
+	writew(val, base + USBHS_LPSTS_REG);
+
+	return 0;
+}
+
+/* Setup USB channels */
+static void __rcar_gen2_usb_phy_init(struct rcar_gen2_usb_phy_priv *priv)
+{
+	void __iomem *usb2_base = priv->usb2_base;
+	void __iomem *hsusb_base = priv->base;
+	u32 val;
+	struct platform_device *pdev = priv->pdev;
+
+	/* Since ops->init() is called once, this driver enables both clocks */
+	clk_prepare_enable(priv->clk);
+
+	/* Initialize USB2 part */
+	writel(USB2_INT_ENABLE_INIT, usb2_base + USB2_INT_ENABLE_REG);
+	writel(USB2_SPD_RSM_TIMSET_INIT, usb2_base + USB2_SPD_RSM_TIMSET_REG);
+	writel(USB2_OC_TIMSET_INIT, usb2_base + USB2_OC_TIMSET_REG);
+
+	/* Initialize HSUSB part */
+	val = readl(hsusb_base + USBHS_UGCTRL2_REG);
+	if (pdev->id == 0) {
+#if IS_ENABLED(CONFIG_USB_RENESAS_USBHS_UDC)
+		val = (val & ~USBHS_UGCTRL2_USB0) |
+				USBHS_UGCTRL2_USB0_HS;
+#else
+		val = (val & ~USBHS_UGCTRL2_USB0) |
+			USBHS_UGCTRL2_USB0_HOST;
+#endif
+	} else {
+		val = (val & ~USBHS_UGCTRL2_USB0) |
+			USBHS_UGCTRL2_USB0_HOST;
+	}
+	writel(val & USBHS_UGCTRL2_MASK, hsusb_base + USBHS_UGCTRL2_REG);
+}
+
+/* Shutdown USB channels */
+static void __rcar_gen2_usb_phy_shutdown(struct rcar_gen2_usb_phy_priv *priv)
+{
+	u32 val;
+
+	__rcar_gen2_usbhs_phy_disable(priv->base);
+	writel(0, priv->usb2_base + USB2_INT_ENABLE_REG);
+
+	val = readw(priv->base + USBHS_LPSTS_REG);
+	if (val & USBHS_LPSTS_SUSPM)
+		clk_disable_unprepare(priv->clk);
+}
+#else
 /* Enable USBHS internal phy */
 static int __rcar_gen2_usbhs_phy_enable(void __iomem *base)
 {
@@ -128,6 +240,7 @@ static void __rcar_gen2_usb_phy_shutdown(struct rcar_gen2_usb_phy_priv *priv)
 	__rcar_gen2_usbhs_phy_disable(priv->base);
 	clk_disable_unprepare(priv->clk);
 }
+#endif
 
 static int rcar_gen2_usb_phy_set_suspend(struct usb_phy *phy, int suspend)
 {
@@ -136,18 +249,40 @@ static int rcar_gen2_usb_phy_set_suspend(struct usb_phy *phy, int suspend)
 	int retval;
 	struct platform_device *pdev = priv->pdev;
 	struct resource *res;
+#ifdef CONFIG_USB_ALEX
+	struct resource *usb2_res;
+#endif
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	priv->base = devm_ioremap_resource(&pdev->dev, res);
 	if (IS_ERR(priv->base))
 		return PTR_ERR(priv->base);
 
+#ifdef CONFIG_USB_ALEX
+	usb2_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	priv->usb2_base = devm_ioremap_resource(&pdev->dev, usb2_res);
+	if (IS_ERR(priv->usb2_base))
+		return PTR_ERR(priv->usb2_base);
+#endif
+
 	spin_lock_irqsave(&priv->lock, flags);
+
+#ifdef CONFIG_USB_ALEX
+	retval = suspend ? __rcar_gen2_usbhs_phy_disable(priv->base) :
+			   __rcar_gen2_usbhs_phy_enable(priv->base,
+							priv->usb2_base);
+#else
 	retval = suspend ? __rcar_gen2_usbhs_phy_disable(priv->base) :
 			   __rcar_gen2_usbhs_phy_enable(priv->base);
+#endif
 
 	devm_release_mem_region(&pdev->dev, res->start, resource_size(res));
 	devm_iounmap(&pdev->dev, priv->base);
+#ifdef CONFIG_USB_ALEX
+	devm_release_mem_region(&pdev->dev, usb2_res->start,
+				resource_size(usb2_res));
+	devm_iounmap(&pdev->dev, priv->usb2_base);
+#endif
 
 	spin_unlock_irqrestore(&priv->lock, flags);
 
@@ -166,11 +301,20 @@ static int rcar_gen2_usb_phy_init(struct usb_phy *phy)
 	if (!priv->usecount++) {
 		struct platform_device *pdev = priv->pdev;
 		struct resource *res;
+#ifdef CONFIG_USB_ALEX
+		struct resource *usb2_res;
+#endif
 
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 		priv->base = devm_ioremap_resource(&pdev->dev, res);
 		if (IS_ERR(priv->base))
 			return PTR_ERR(priv->base);
+#ifdef CONFIG_USB_ALEX
+		usb2_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+		priv->usb2_base = devm_ioremap_resource(&pdev->dev, usb2_res);
+		if (IS_ERR(priv->usb2_base))
+			return PTR_ERR(priv->usb2_base);
+#endif
 
 		spin_lock_irqsave(&priv->lock, flags);
 		__rcar_gen2_usb_phy_init(priv);
@@ -178,6 +322,11 @@ static int rcar_gen2_usb_phy_init(struct usb_phy *phy)
 		devm_release_mem_region(&pdev->dev, res->start,
 							resource_size(res));
 		devm_iounmap(&pdev->dev, priv->base);
+#ifdef CONFIG_USB_ALEX
+		devm_release_mem_region(&pdev->dev, usb2_res->start,
+					resource_size(usb2_res));
+		devm_iounmap(&pdev->dev, priv->usb2_base);
+#endif
 		spin_unlock_irqrestore(&priv->lock, flags);
 	}
 	return 0;
@@ -198,17 +347,32 @@ static void rcar_gen2_usb_phy_shutdown(struct usb_phy *phy)
 	if (!--priv->usecount) {
 		struct platform_device *pdev = priv->pdev;
 		struct resource *res;
+#ifdef CONFIG_USB_ALEX
+		struct resource *usb2_res;
+#endif
 
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 		priv->base = devm_ioremap_resource(&pdev->dev, res);
 		if (IS_ERR(priv->base))
 			dev_err(phy->dev, "ioremap failed\n");
 
+#ifdef CONFIG_USB_ALEX
+		usb2_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+		priv->usb2_base = devm_ioremap_resource(&pdev->dev, usb2_res);
+		if (IS_ERR(priv->usb2_base))
+			dev_err(phy->dev, "ioremap failed\n");
+#endif
+
 		__rcar_gen2_usb_phy_shutdown(priv);
 
 		devm_release_mem_region(&pdev->dev, res->start,
 							resource_size(res));
 		devm_iounmap(&pdev->dev, priv->base);
+#ifdef CONFIG_USB_ALEX
+		devm_release_mem_region(&pdev->dev, usb2_res->start,
+					resource_size(usb2_res));
+		devm_iounmap(&pdev->dev, priv->usb2_base);
+#endif
 	}
 out:
 	spin_unlock_irqrestore(&priv->lock, flags);
@@ -263,8 +427,10 @@ static int rcar_gen2_usbhs_set_peripheral(struct usb_otg *otg,
 		dev_dbg(&pdev->dev, "unregistering gadget '%s'\n",
 			otg->gadget->name);
 
+#ifndef CONFIG_USB_ALEX
 		usb_gadget_vbus_disconnect(otg->gadget);
 		otg->phy->state = OTG_STATE_UNDEFINED;
+#endif
 
 		otg->gadget = NULL;
 		return 0;
@@ -273,8 +439,11 @@ static int rcar_gen2_usbhs_set_peripheral(struct usb_otg *otg,
 	otg->gadget = gadget;
 	dev_dbg(&pdev->dev, "registered gadget '%s'\n", gadget->name);
 
+#ifndef CONFIG_USB_ALEX
 	/* initialize connection state */
 	rcar_gen2_usbhs_gpio_wakeup_isr(priv->irq, priv);
+#endif
+
 	return 0;
 }
 
@@ -284,6 +453,9 @@ static int rcar_gen2_usb_phy_probe(struct platform_device *pdev)
 	struct rcar_gen2_phy_platform_data *pdata;
 	struct rcar_gen2_usb_phy_priv *priv;
 	struct clk *clk;
+#ifdef CONFIG_USB_ALEX
+	char *clk_id;
+#endif
 	int retval;
 	int gpio, irq;
 	struct workqueue_struct *work_queue;
@@ -294,7 +466,12 @@ static int rcar_gen2_usb_phy_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_USB_ALEX
+	clk_id = (pdev->id == 0) ? "hsusb0" : "hsusb1";
+	clk = devm_clk_get(&pdev->dev, clk_id);
+#else
 	clk = devm_clk_get(&pdev->dev, "usbhs");
+#endif
 	if (IS_ERR(clk)) {
 		dev_err(&pdev->dev, "Can't get the clock\n");
 		return PTR_ERR(clk);
@@ -316,10 +493,12 @@ static int rcar_gen2_usb_phy_probe(struct platform_device *pdev)
 	priv->clk = clk;
 	priv->pdev = pdev;
 
+#ifndef CONFIG_USB_ALEX
 	priv->ugctrl2 = pdata->chan0_pci ?
 			USBHS_UGCTRL2_USB0_PCI : USBHS_UGCTRL2_USB0_HS;
 	priv->ugctrl2 |= pdata->chan2_pci ?
 			USBHS_UGCTRL2_USB2_PCI : USBHS_UGCTRL2_USB2_SS;
+#endif
 	priv->phy.dev = dev;
 	priv->phy.label = dev_name(dev);
 	priv->phy.init = rcar_gen2_usb_phy_init;
@@ -381,6 +560,22 @@ static int rcar_gen2_usb_phy_probe(struct platform_device *pdev)
 	}
 	platform_set_drvdata(pdev, priv);
 
+#ifdef CONFIG_USB_ALEX
+	if (pdev->id == 0) {
+#if !IS_ENABLED(CONFIG_USB_RENESAS_USBHS_UDC)
+		retval = usb_phy_init(&priv->phy);
+
+		if (!retval)
+			retval = usb_phy_set_suspend(&priv->phy, 0);
+#endif
+	} else {
+		retval = usb_phy_init(&priv->phy);
+
+		if (!retval)
+			retval = usb_phy_set_suspend(&priv->phy, 0);
+	}
+#endif
+
 	return retval;
 
 err_otg:
@@ -448,7 +643,21 @@ static struct platform_driver rcar_gen2_usb_phy_driver = {
 	.remove = rcar_gen2_usb_phy_remove,
 };
 
+#ifdef CONFIG_USB_ALEX
+static int __init phy_rcar_gen2_platform_init(void)
+{
+	return platform_driver_register(&rcar_gen2_usb_phy_driver);
+}
+subsys_initcall(phy_rcar_gen2_platform_init);
+
+static void __exit phy_rcar_gen2_platform_cleanup(void)
+{
+	platform_driver_unregister(&rcar_gen2_usb_phy_driver);
+}
+module_exit(phy_rcar_gen2_platform_cleanup);
+#else
 module_platform_driver(rcar_gen2_usb_phy_driver);
+#endif
 
 MODULE_LICENSE("GPL v2");
 MODULE_DESCRIPTION("Renesas R-Car Gen2 USB phy");
diff --git a/drivers/usb/renesas_usbhs/common.c b/drivers/usb/renesas_usbhs/common.c
index 4ed01a2..5cee1a7 100644
--- a/drivers/usb/renesas_usbhs/common.c
+++ b/drivers/usb/renesas_usbhs/common.c
@@ -726,8 +726,21 @@ static int usbhsc_resume(struct device *dev)
 	struct usbhs_priv *priv = dev_get_drvdata(dev);
 	struct platform_device *pdev = usbhs_priv_to_pdev(priv);
 
-	if (!usbhsc_flags_has(priv, USBHSF_RUNTIME_PWCTRL))
+#ifdef CONFIG_USB_ALEX
+	u16 intenb0 = 0;
+	struct usbhs_mod_info *info = &priv->mod_info;
+#endif
+
+	if (!usbhsc_flags_has(priv, USBHSF_RUNTIME_PWCTRL)) {
 		usbhsc_power_ctrl(priv, 1);
+#ifdef CONFIG_USB_ALEX
+		if (info->irq_vbus) {
+			intenb0 = usbhs_read(priv, INTENB0);
+			intenb0 |= VBSE;
+			usbhs_write(priv, INTENB0, intenb0);
+		}
+#endif
+	}
 
 	usbhs_platform_call(priv, phy_reset, pdev);
 
diff --git a/drivers/usb/renesas_usbhs/common.h b/drivers/usb/renesas_usbhs/common.h
index 81cb9a8..dc9031c 100644
--- a/drivers/usb/renesas_usbhs/common.h
+++ b/drivers/usb/renesas_usbhs/common.h
@@ -107,6 +107,21 @@ struct usbhs_priv;
 #define D2FIFOCTR	0x00F2	/* for R-Car Gen2 */
 #define D3FIFOSEL	0x00F4	/* for R-Car Gen2 */
 #define D3FIFOCTR	0x00F6	/* for R-Car Gen2 */
+#define LPSTS		0x0102
+
+#ifdef CONFIG_USB_ALEX
+#define CFIFO_WA				0x0016
+/* Product Registers */
+#define PRR_ADDRESS				0xFF000044
+#define PRR_CUT_MASK			0x000000FF
+#define PRR_CUT_ES10			0x00000000
+#define PRR_CUT_ES20			0x00000010
+#define PRR_CUT_ES30			0x00000020
+/* size of register */
+#define REG_SIZE				0x04
+#define HS_USB_CH0_BASE_ADDR	0xE6590000
+#define HS_USB_CH1_BASE_ADDR	0xE6598000
+#endif
 
 /* SYSCFG */
 #define SCKE	(1 << 10)	/* USB Module Clock Enable */
@@ -242,6 +257,9 @@ struct usbhs_priv;
 #define USBSPD_SPEED_FULL	0x2
 #define USBSPD_SPEED_HIGH	0x3
 
+/* LPSTS */
+#define LPSTS_SUSPM	(1 << 14)	/* SuspendM control */
+
 /*
  *		struct
  */
diff --git a/drivers/usb/renesas_usbhs/fifo.c b/drivers/usb/renesas_usbhs/fifo.c
index 805464e..9d719db 100644
--- a/drivers/usb/renesas_usbhs/fifo.c
+++ b/drivers/usb/renesas_usbhs/fifo.c
@@ -1,7 +1,7 @@
 /*
  * Renesas USB driver
  *
- * Copyright (C) 2011 Renesas Solutions Corp.
+ * Copyright (C) 2011-2016 Renesas Solutions Corp.
  * Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  *
  * This program is distributed in the hope that it will be useful,
@@ -535,6 +535,39 @@ static int usbhsf_pio_try_push(struct usbhs_pkt *pkt, int *is_done)
 	total_len	= len;
 	is_short	= total_len < maxp;
 
+#ifdef CONFIG_USB_ALEX
+	if (fifo->port == CFIFO_WA) {
+		/*
+		 * FIXME
+		 *
+		 * 16-bit access only
+		 */
+		if (len >= 2 && !((unsigned long)buf & 0x01)) {
+			iowrite16_rep(addr, buf, len / 2);
+			len %= 2;
+			buf += total_len - len;
+		}
+
+		/* the rest operation */
+		for (i = 0; i < len; i++)
+			iowrite8(buf[i], addr + (0x01 - (i & 0x01)));
+	} else {
+		/*
+		 * FIXME
+		 *
+		 * 32-bit access only
+		 */
+		if (len >= 4 && !((unsigned long)buf & 0x03)) {
+			iowrite32_rep(addr, buf, len / 4);
+			len %= 4;
+			buf += total_len - len;
+		}
+
+		/* the rest operation */
+		for (i = 0; i < len; i++)
+			iowrite8(buf[i], addr + (0x03 - (i & 0x03)));
+	}
+#else
 	/*
 	 * FIXME
 	 *
@@ -549,6 +582,7 @@ static int usbhsf_pio_try_push(struct usbhs_pkt *pkt, int *is_done)
 	/* the rest operation */
 	for (i = 0; i < len; i++)
 		iowrite8(buf[i], addr + (0x03 - (i & 0x03)));
+#endif
 
 	/*
 	 * variable update
@@ -701,6 +735,47 @@ static int usbhsf_pio_try_pop(struct usbhs_pkt *pkt, int *is_done)
 		goto usbhs_fifo_read_end;
 	}
 
+#ifdef CONFIG_USB_ALEX
+	if (fifo->port == CFIFO_WA) {
+		/*
+		 * FIXME
+		 *
+		 * 16-bit access only
+		 */
+		if (len >= 2 && !((unsigned long)buf & 0x01)) {
+			ioread16_rep(addr, buf, len / 2);
+			len %= 2;
+			buf += total_len - len;
+		}
+
+		/* the rest operation */
+		for (i = 0; i < len; i++) {
+			if (!(i & 0x01))
+				data = ioread16(addr);
+
+			buf[i] = (data >> ((i & 0x01) * 8)) & 0xff;
+		}
+	} else {
+		/*
+		 * FIXME
+		 *
+		 * 32-bit access only
+		 */
+		if (len >= 4 && !((unsigned long)buf & 0x03)) {
+			ioread32_rep(addr, buf, len / 4);
+			len %= 4;
+			buf += total_len - len;
+		}
+
+		/* the rest operation */
+		for (i = 0; i < len; i++) {
+			if (!(i & 0x03))
+				data = ioread32(addr);
+
+			buf[i] = (data >> ((i & 0x03) * 8)) & 0xff;
+		}
+	}
+#else
 	/*
 	 * FIXME
 	 *
@@ -719,6 +794,7 @@ static int usbhsf_pio_try_pop(struct usbhs_pkt *pkt, int *is_done)
 
 		buf[i] = (data >> ((i & 0x03) * 8)) & 0xff;
 	}
+#endif
 
 usbhs_fifo_read_end:
 	dev_dbg(dev, "  recv %d (%d/ %d/ %d/ %d)\n",
@@ -1421,10 +1497,34 @@ int usbhs_fifo_probe(struct usbhs_priv *priv)
 {
 	struct usbhs_fifo *fifo;
 
+#ifdef CONFIG_USB_ALEX
+	u32					cut;
+	void __iomem		*prr;
+	struct resource		*res;
+#endif
+
 	/* CFIFO */
 	fifo = usbhsf_get_cfifo(priv);
 	fifo->name	= "CFIFO";
+
+#ifdef CONFIG_USB_ALEX
+
+	prr = ioremap_nocache(PRR_ADDRESS, REG_SIZE);
+
+	cut = ioread32(prr) & PRR_CUT_MASK;
+	iounmap(prr);
+
+	/* platform data */
+	res = platform_get_resource(priv->pdev, IORESOURCE_MEM, 0);
+
+	if ((cut == PRR_CUT_ES10) && (res->start == HS_USB_CH1_BASE_ADDR))
+		fifo->port	= CFIFO_WA;
+	else
+		fifo->port	= CFIFO;
+#else
 	fifo->port	= CFIFO;
+#endif
+
 	fifo->sel	= CFIFOSEL;
 	fifo->ctr	= CFIFOCTR;
 
diff --git a/drivers/usb/renesas_usbhs/mod.c b/drivers/usb/renesas_usbhs/mod.c
index 28965ef..9d594db 100644
--- a/drivers/usb/renesas_usbhs/mod.c
+++ b/drivers/usb/renesas_usbhs/mod.c
@@ -264,9 +264,31 @@ static irqreturn_t usbhs_interrupt(int irq, void *data)
 	struct usbhs_priv *priv = data;
 	struct usbhs_irq_state irq_state;
 
+#ifdef CONFIG_USB_ALEX
+	u16 lpsts = 0;
+	u16 intenb0 = 0;
+	struct usbhs_mod_info *info = usbhs_priv_to_modinfo(priv);
+#endif
 	if (usbhs_status_get_each_irq(priv, &irq_state) < 0)
 		return IRQ_NONE;
 
+#ifdef CONFIG_USB_ALEX
+	lpsts = usbhs_read(priv, LPSTS);
+	if ((!(lpsts & LPSTS_SUSPM)) && (info->irq_vbus)) {
+		lpsts |= LPSTS_SUSPM;
+		usbhs_write(priv, LPSTS, lpsts);
+
+		intenb0 = usbhs_read(priv, INTENB0);
+		intenb0 &= ~VBSE;
+		usbhs_write(priv, INTENB0, intenb0);
+
+		lpsts &= ~LPSTS_SUSPM;
+		usbhs_write(priv, LPSTS, lpsts);
+
+		return IRQ_NONE;
+	}
+#endif
+
 	/*
 	 * clear interrupt
 	 *
-- 
1.7.9.5

