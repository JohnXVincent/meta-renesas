From 499c57d8746df0dd76b005280fa439d4cdbf3e5b Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Fri, 11 Dec 2020 08:49:15 +0700
Subject: [PATCH 015/135] pinctrl: sh-pfc: pinctrl-rzg2l: add new driver for
 RZ/G2L SoCs

This commit adds support RZ/G2L pinctrl and gpio driver.

Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 drivers/pinctrl/Makefile               |   1 +
 drivers/pinctrl/sh-pfc/Kconfig         |   9 +
 drivers/pinctrl/sh-pfc/Makefile        |   1 +
 drivers/pinctrl/sh-pfc/pinctrl-rzg2l.c | 830 +++++++++++++++++++++++++++++++++
 drivers/pinctrl/sh-pfc/pinctrl-rzg2l.h | 174 +++++++
 5 files changed, 1015 insertions(+)
 create mode 100644 drivers/pinctrl/sh-pfc/pinctrl-rzg2l.c
 create mode 100644 drivers/pinctrl/sh-pfc/pinctrl-rzg2l.h

diff --git a/drivers/pinctrl/Makefile b/drivers/pinctrl/Makefile
index 46ef9bd..da082c5 100644
--- a/drivers/pinctrl/Makefile
+++ b/drivers/pinctrl/Makefile
@@ -55,6 +55,7 @@ obj-$(CONFIG_PINCTRL_PXA)	+= pxa/
 obj-$(CONFIG_ARCH_QCOM)		+= qcom/
 obj-$(CONFIG_PINCTRL_SAMSUNG)	+= samsung/
 obj-$(CONFIG_PINCTRL_SH_PFC)	+= sh-pfc/
+obj-$(CONFIG_PINCTRL_PFC_RZG2L)	+= sh-pfc/
 obj-$(CONFIG_PINCTRL_SPEAR)	+= spear/
 obj-y				+= sprd/
 obj-$(CONFIG_PINCTRL_STM32)	+= stm32/
diff --git a/drivers/pinctrl/sh-pfc/Kconfig b/drivers/pinctrl/sh-pfc/Kconfig
index 2b82f52..39ccdde 100644
--- a/drivers/pinctrl/sh-pfc/Kconfig
+++ b/drivers/pinctrl/sh-pfc/Kconfig
@@ -134,6 +134,15 @@ config PINCTRL_PFC_R8A77995
         depends on ARCH_R8A77995
         select PINCTRL_SH_PFC
 
+config PINCTRL_PFC_RZG2L
+	select GPIOLIB
+	select GENERIC_PINCTRL_GROUPS
+	select GENERIC_PINMUX_FUNCTIONS
+	select GENERIC_PINCONF
+	def_bool y
+	help
+	 This enables pin control and gpio drivers for Renesas RZ/G2L platforms
+
 config PINCTRL_PFC_SH7203
 	def_bool y
 	depends on CPU_SUBTYPE_SH7203
diff --git a/drivers/pinctrl/sh-pfc/Makefile b/drivers/pinctrl/sh-pfc/Makefile
index 95142f6..f9dc5ed 100644
--- a/drivers/pinctrl/sh-pfc/Makefile
+++ b/drivers/pinctrl/sh-pfc/Makefile
@@ -38,3 +38,4 @@ obj-$(CONFIG_PINCTRL_PFC_SH7757)	+= pfc-sh7757.o
 obj-$(CONFIG_PINCTRL_PFC_SH7785)	+= pfc-sh7785.o
 obj-$(CONFIG_PINCTRL_PFC_SH7786)	+= pfc-sh7786.o
 obj-$(CONFIG_PINCTRL_PFC_SHX3)		+= pfc-shx3.o
+obj-$(CONFIG_PINCTRL_PFC_RZG2L)		+= pinctrl-rzg2l.o
diff --git a/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.c b/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.c
new file mode 100644
index 0000000..2fd63ec
--- /dev/null
+++ b/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.c
@@ -0,0 +1,830 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Renesas RZ/G2L Pin controller and GPIO drivers
+ *
+ * Copyright (C) 2020 Renesas Electronics Corporation.
+ *
+ */
+
+#include <linux/io.h>
+#include <linux/init.h>
+#include <linux/mfd/syscon.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+
+#include "pinctrl-rzg2l.h"
+
+#define DRV_NAME "rzg2l-pinctrl"
+
+static void rzg2l_pinctrl_set_pfc_mode(struct rzg2l_pinctrl *pctrl,
+				       int pins, unsigned long pfc_mode)
+{
+	u32 port = RZG2L_PIN_ID_TO_PORT(pins);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(pins);
+	u32 mask32;
+	u16 mask16;
+	u32 reg32;
+	u16 reg16;
+	u8 reg8;
+	unsigned long flags;
+
+	spin_lock_irqsave(&pctrl->lock, flags);
+
+	/* Set pin to 'Non-use (Hi-z input protection)'  */
+	reg16 = readw(pctrl->base + PM(port));
+	mask16 = PM_MASK << (bit * 2);
+	reg16 = reg16 & ~mask16;
+	writew(reg16, pctrl->base + PM(port));
+
+	/* Temporarily switch to GPIO mode with PMC register */
+	reg8 = readb(pctrl->base + PMC(port));
+	writeb(reg8 & ~BIT(bit), pctrl->base + PMC(port));
+
+	/* Set the PWPR register to allow PFC register to write */
+	writel(0x00, pctrl->base + PWPR);        /* B0WI=0, PFCWE=0 */
+	writel(PWPR_PFCWE, pctrl->base + PWPR);  /* B0WI=0, PFCWE=1 */
+
+	/* Select Pin function mode with PFC register */
+	reg32 = readl(pctrl->base + PFC(port));
+	mask32 = PFC_MASK << (bit * 4);
+	reg32 = reg32 & ~mask32;
+	pfc_mode = pfc_mode << (bit * 4);
+	writel(reg32 | pfc_mode, pctrl->base + PFC(port));
+
+	/* SEt the PWPR register to be write-protected */
+	writel(0x00, pctrl->base + PWPR);        /* B0WI=0, PFCWE=0 */
+	writel(PWPR_B0WI, pctrl->base + PWPR);  /* B0WI=1, PFCWE=0 */
+
+	/* Switch to Peripheral pin function with PMC register */
+	reg8 = readb(pctrl->base + PMC(port));
+	writeb(reg8 | BIT(bit), pctrl->base + PMC(port));
+
+	spin_unlock_irqrestore(&pctrl->lock, flags);
+};
+
+static int rzg2l_pinctrl_set_mux(struct pinctrl_dev *pctldev,
+				 unsigned int func_selector,
+				 unsigned int group_selector)
+{
+	struct rzg2l_pinctrl *pctrl = pinctrl_dev_get_drvdata(pctldev);
+	struct function_desc *func;
+	struct group_desc *group;
+	int i;
+	int *pins;
+	unsigned long data;
+
+	func = pinmux_generic_get_function(pctldev, func_selector);
+	if (!func)
+		return -EINVAL;
+	group = pinctrl_generic_get_group(pctldev, group_selector);
+	if (!group)
+		return -EINVAL;
+
+	pins = group->pins;
+	data = (unsigned long) group->data;
+
+	dev_dbg(pctldev->dev, "enable function %s group %s\n",
+		func->name, group->name);
+
+	for (i = 0; i < group->num_pins; i++) {
+		rzg2l_pinctrl_set_pfc_mode(pctrl, *(pins + i), data);
+	};
+
+	return 0;
+};
+
+/* Check whether the requested parameter is supported for a pin. */
+static bool rzg2l_pinctrl_validate_pinconf(u32 configs,
+					   enum pin_config_param param)
+{
+	switch (param) {
+	case PIN_CONFIG_BIAS_DISABLE:
+	case PIN_CONFIG_BIAS_PULL_UP:
+	case PIN_CONFIG_BIAS_PULL_DOWN:
+		return configs & PIN_CFG_PULL_UP_DOWN;
+	case PIN_CONFIG_DRIVE_STRENGTH:
+		return configs & PIN_CFG_DRIVE_STRENGTH;
+	case PIN_CONFIG_SLEW_RATE:
+		return configs & PIN_CFG_SLEW_RATE;
+	case PIN_CONFIG_INPUT_ENABLE:
+		return configs & PIN_CFG_INPUT_ENABLE;
+	case PIN_CONFIG_POWER_SOURCE:
+		return configs & PIN_CFG_IO_VOLTAGE;
+	default:
+		return false;
+	}
+};
+
+static int rzg2l_pinctrl_pinconf_get(struct pinctrl_dev *pctldev,
+				     unsigned int _pin,
+				     unsigned long *config)
+{
+	struct rzg2l_pinctrl *pctrl = pinctrl_dev_get_drvdata(pctldev);
+	enum pin_config_param param = pinconf_to_config_param(*config);
+	const struct pinctrl_pin_desc *pin = &pctrl->pctrl_desc.pins[_pin];
+	unsigned int arg = 0;
+	u64 reg;
+	u32 port;
+	u64 bit;
+	void __iomem *addr;
+	u32 configs;
+	unsigned long flags;
+
+
+	if (_pin < pctrl->nports * 8) {
+		port = RZG2L_PIN_ID_TO_PORT(_pin);
+		bit = RZG2L_PIN_ID_TO_PIN(_pin);
+		configs = (uintptr_t) (pin->drv_data);
+		addr = pctrl->base + 0x80;
+	} else {
+		struct pin_data *pin_data =
+				(struct pin_data *) pin->drv_data;
+		port = pin_data->port;
+		bit  = pin_data->bit;
+		configs = pin_data->configs;
+		addr = pctrl->base;
+	}
+
+	if (!rzg2l_pinctrl_validate_pinconf(configs, param))
+		return -ENOTSUPP;
+
+	switch (param) {
+	case PIN_CONFIG_BIAS_DISABLE:
+	case PIN_CONFIG_BIAS_PULL_UP:
+	case PIN_CONFIG_BIAS_PULL_DOWN: {
+		spin_lock_irqsave(&pctrl->lock, flags);
+
+		reg = readq(addr + PUPD(port)) & (PUPD_MASK << (bit * 8));
+		reg = reg >> (bit * 8);
+
+		spin_unlock_irqrestore(&pctrl->lock, flags);
+
+		if ((reg == 0 && param != PIN_CONFIG_BIAS_DISABLE) ||
+		    (reg == 0x1 && param != PIN_CONFIG_BIAS_PULL_UP) ||
+		    (reg == 0x2 && param != PIN_CONFIG_BIAS_PULL_DOWN))
+			return -EINVAL;
+
+		break;
+	}
+
+	case PIN_CONFIG_DRIVE_STRENGTH: {
+		spin_lock_irqsave(&pctrl->lock, flags);
+
+		reg = readq(addr + IOLH(port)) & (IOLH_MASK << (bit * 8));
+		reg = reg >> (bit * 8);
+		arg = (reg == 0) ? 2 : reg * 4;
+
+		spin_unlock_irqrestore(&pctrl->lock, flags);
+		break;
+	}
+
+	case PIN_CONFIG_SLEW_RATE: {
+		spin_lock_irqsave(&pctrl->lock, flags);
+
+		reg = readq(addr + SR(port)) & (SR_MASK << (bit * 8));
+		reg = reg >> (bit * 8);
+		arg = reg;
+
+		spin_unlock_irqrestore(&pctrl->lock, flags);
+		break;
+	}
+
+	case PIN_CONFIG_INPUT_ENABLE: {
+		spin_lock_irqsave(&pctrl->lock, flags);
+
+		reg = readq(addr + IEN(port)) & (IEN_MASK << (bit * 8));
+		reg = reg >> (bit * 8);
+		arg = reg;
+
+		spin_unlock_irqrestore(&pctrl->lock, flags);
+		break;
+	}
+
+	case PIN_CONFIG_POWER_SOURCE: {
+		u32 io_reg;
+
+		spin_lock_irqsave(&pctrl->lock, flags);
+
+		addr = pctrl->base;
+
+		configs = configs & PIN_CFG_IO_VOLTAGE;
+		switch (configs) {
+		case PIN_CFG_IO_VOLTAGE_SD0:
+		case PIN_CFG_IO_VOLTAGE_SD1:
+		case PIN_CFG_IO_VOLTAGE_QSPI: {
+			if (configs == PIN_CFG_IO_VOLTAGE_SD0)
+				io_reg = readl(addr + SD_CH(0)) & PVDD_MASK;
+			else if (configs == PIN_CFG_IO_VOLTAGE_SD1)
+				io_reg = readl(addr + SD_CH(1)) & PVDD_MASK;
+			else
+				io_reg = readl(addr + QSPI) & PVDD_MASK;
+
+			arg = io_reg ? 1800 : 3300;
+
+			break;
+		}
+
+		case PIN_CFG_IO_VOLTAGE_ETH0:
+		case PIN_CFG_IO_VOLTAGE_ETH1: {
+			if (configs == PIN_CFG_IO_VOLTAGE_ETH0)
+				io_reg = readl(addr + ETH_CH(0))
+					& ETH_PVDD_MASK;
+			else
+				io_reg = readl(addr + ETH_CH(1))
+					& ETH_PVDD_MASK;
+			arg = io_reg ? ((io_reg == ETH_PVDD_1800) ? 1800
+								  : 2500)
+								  : 3300;
+			break;
+		}
+
+		default:
+			break;
+		}
+
+		spin_unlock_irqrestore(&pctrl->lock, flags);
+		break;
+	}
+
+	default:
+		return -ENOTSUPP;
+	}
+
+	*config = pinconf_to_config_packed(param, arg);
+
+	return 0;
+};
+
+static int rzg2l_pinctrl_pinconf_set(struct pinctrl_dev *pctldev,
+				     unsigned int _pin,
+				     unsigned long *_configs,
+				     unsigned int num_configs)
+{
+	struct rzg2l_pinctrl *pctrl = pinctrl_dev_get_drvdata(pctldev);
+	enum pin_config_param param;
+	const struct pinctrl_pin_desc *pin = &pctrl->pctrl_desc.pins[_pin];
+	int i;
+	u64 reg, mask;
+	u32 port;
+	u64 bit;
+	void __iomem *addr;
+	u32 configs;
+	unsigned long flags;
+
+	if (_pin < pctrl->nports * 8) {
+		port = RZG2L_PIN_ID_TO_PORT(_pin);
+		bit = RZG2L_PIN_ID_TO_PIN(_pin);
+		configs = (uintptr_t) (pin->drv_data);
+		addr = pctrl->base + 0x80;
+	} else {
+		struct pin_data *pin_data = (struct pin_data *) pin->drv_data;
+
+		port = pin_data->port;
+		bit  = pin_data->bit;
+		configs = pin_data->configs;
+		addr = pctrl->base;
+	}
+
+	for (i = 0; i < num_configs; i++) {
+		param = pinconf_to_config_param(_configs[i]);
+		if (!rzg2l_pinctrl_validate_pinconf(configs, param))
+			return -ENOTSUPP;
+
+		switch (param) {
+		case PIN_CONFIG_BIAS_DISABLE:
+		case PIN_CONFIG_BIAS_PULL_UP:
+		case PIN_CONFIG_BIAS_PULL_DOWN: {
+			spin_lock_irqsave(&pctrl->lock, flags);
+
+			reg = readq(addr + PUPD(port));
+			mask = PUPD_MASK << (bit * 8);
+			reg = reg & ~mask;
+			if (param == PIN_CONFIG_BIAS_DISABLE)
+				writeq(reg | (0x0 << (bit * 8)),
+					addr + PUPD(port));
+			else if (param == PIN_CONFIG_BIAS_PULL_UP)
+				writeq(reg | (0x1 << (bit * 8)),
+					addr + PUPD(port));
+			else
+				writeq(reg | (0x2 << (bit * 8)),
+					addr + PUPD(port));
+
+			spin_unlock_irqrestore(&pctrl->lock, flags);
+			break;
+		}
+
+		case PIN_CONFIG_DRIVE_STRENGTH: {
+			unsigned int arg =
+					pinconf_to_config_argument(_configs[i]);
+			unsigned int mA[4] = {2, 4, 8, 12};
+			u64 val;
+
+			if ((arg != mA[0]) && (arg != mA[1]) && (arg != mA[2])
+				&& (arg != mA[3]))
+				return -EINVAL;
+
+			spin_lock_irqsave(&pctrl->lock, flags);
+
+			reg = readq(addr + IOLH(port));
+			mask = IOLH_MASK << (bit * 8);
+			reg = reg & ~mask;
+			val = arg == 2 ? 0 : arg/4;
+			writeq(reg | (val << (bit * 8)), addr + IOLH(port));
+
+			spin_unlock_irqrestore(&pctrl->lock, flags);
+			break;
+		}
+
+		case PIN_CONFIG_SLEW_RATE: {
+			unsigned int arg =
+					pinconf_to_config_argument(_configs[i]);
+			if (arg > 1)
+				return -EINVAL;
+
+			spin_lock_irqsave(&pctrl->lock, flags);
+
+			reg = readq(addr + SR(port));
+			mask = SR_MASK << (bit * 8);
+			reg = reg & ~mask;
+
+			writeq(reg | (arg << (bit * 8)), addr + SR(port));
+
+			spin_unlock_irqrestore(&pctrl->lock, flags);
+			break;
+		}
+
+		case PIN_CONFIG_INPUT_ENABLE: {
+			unsigned int arg =
+					pinconf_to_config_argument(_configs[i]);
+
+			spin_lock_irqsave(&pctrl->lock, flags);
+
+			reg = readq(addr + IEN(port));
+			mask = IEN_MASK << (bit * 8);
+			reg = reg & ~mask;
+			writeq(reg | (arg << (bit * 8)), addr + IEN(port));
+
+			spin_unlock_irqrestore(&pctrl->lock, flags);
+			break;
+		}
+
+		case PIN_CONFIG_POWER_SOURCE: {
+			u32 io_reg;
+			unsigned int mV =
+					pinconf_to_config_argument(_configs[i]);
+
+			addr = pctrl->base;
+
+			configs = configs & PIN_CFG_IO_VOLTAGE;
+
+			if (mV != 1800 && mV != 3300) {
+				if ((configs != PIN_CFG_IO_VOLTAGE_ETH0) &&
+				    (configs != PIN_CFG_IO_VOLTAGE_ETH1))
+					return -EINVAL;
+				else if (mV != 2500)
+					return -EINVAL;
+			}
+
+			spin_lock_irqsave(&pctrl->lock, flags);
+
+			switch (configs) {
+			case PIN_CFG_IO_VOLTAGE_SD0:
+			case PIN_CFG_IO_VOLTAGE_SD1:
+			case PIN_CFG_IO_VOLTAGE_QSPI: {
+				io_reg = (mV == 1800) ? PVDD_1800 : PVDD_3300;
+				if (configs == PIN_CFG_IO_VOLTAGE_SD0)
+					writel(io_reg, addr + SD_CH(0));
+				else if (configs == PIN_CFG_IO_VOLTAGE_SD1)
+					writel(io_reg, addr + SD_CH(1));
+				else
+					writel(io_reg, addr + QSPI);
+				break;
+			}
+
+			case PIN_CFG_IO_VOLTAGE_ETH0:
+			case PIN_CFG_IO_VOLTAGE_ETH1: {
+				io_reg = (mV == 3300) ? ETH_PVDD_3300 :
+					((mV == 2500) ? ETH_PVDD_2500 :
+							ETH_PVDD_1800);
+				if (configs == PIN_CFG_IO_VOLTAGE_ETH0)
+					writel(io_reg, addr + ETH_CH(0));
+				else
+					writel(io_reg, addr + ETH_CH(1));
+
+				break;
+			}
+
+			default:
+				break;
+			}
+
+			spin_unlock_irqrestore(&pctrl->lock, flags);
+
+			break;
+		}
+		default:
+			return -ENOTSUPP;
+		}
+	}
+
+	return 0;
+};
+
+static int rzg2l_pinctrl_pinconf_group_set(struct pinctrl_dev *pctldev,
+					  unsigned int group,
+					  unsigned long *configs,
+					  unsigned int num_configs)
+{
+	const unsigned int *pins;
+	unsigned int i, npins;
+	int ret;
+
+	ret = pinctrl_generic_get_group_pins(pctldev, group, &pins, &npins);
+	if (ret)
+		return ret;
+
+	for (i = 0; i < npins; i++) {
+		ret = rzg2l_pinctrl_pinconf_set(pctldev, pins[i], configs,
+						num_configs);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+};
+
+static int rzg2l_pinctrl_pinconf_group_get(struct pinctrl_dev *pctldev,
+					   unsigned int group,
+					   unsigned long *config)
+{
+	const unsigned int *pins;
+	unsigned int i, npins, prev_config = 0;
+	int ret;
+
+	ret = pinctrl_generic_get_group_pins(pctldev, group, &pins, &npins);
+	if (ret)
+		return ret;
+
+	for (i = 0; i < npins; i++) {
+		ret = rzg2l_pinctrl_pinconf_get(pctldev, pins[i], config);
+		if (ret)
+			return ret;
+
+
+		/* Check config matching between to pin  */
+		if (i && prev_config != *config)
+			return -ENOTSUPP;
+
+		prev_config = *config;
+	}
+
+	return 0;
+};
+
+static const struct pinctrl_ops rzg2l_pinctrl_pctlops = {
+	.get_groups_count = pinctrl_generic_get_group_count,
+	.get_group_name = pinctrl_generic_get_group_name,
+	.get_group_pins = pinctrl_generic_get_group_pins,
+	.dt_node_to_map = pinconf_generic_dt_node_to_map_all,
+	.dt_free_map = pinconf_generic_dt_free_map,
+};
+
+static const struct pinmux_ops rzg2l_pinctrl_pmxops = {
+	.get_functions_count = pinmux_generic_get_function_count,
+	.get_function_name = pinmux_generic_get_function_name,
+	.get_function_groups = pinmux_generic_get_function_groups,
+	.set_mux = rzg2l_pinctrl_set_mux,
+	.strict = true,
+};
+
+static const struct pinconf_ops rzg2l_pinctrl_confops = {
+	.is_generic = true,
+	.pin_config_get = rzg2l_pinctrl_pinconf_get,
+	.pin_config_set = rzg2l_pinctrl_pinconf_set,
+	.pin_config_group_set = rzg2l_pinctrl_pinconf_group_set,
+	.pin_config_group_get = rzg2l_pinctrl_pinconf_group_get,
+	.pin_config_config_dbg_show = pinconf_generic_dump_config,
+};
+
+static int rzg2l_pinctrl_add_groups(struct rzg2l_pinctrl *pctrl)
+{
+	int ret, i;
+
+	for (i = 0; i < pctrl->psoc->ngroups; i++) {
+		const struct group_desc *group = pctrl->psoc->groups + i;
+
+		ret = pinctrl_generic_add_group(pctrl->pctrl_dev, group->name,
+						group->pins, group->num_pins,
+						group->data);
+		if (ret < 0) {
+			dev_err(pctrl->dev, "Failed to register group %s\n",
+				group->name);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int rzg2l_pinctrl_add_functions(struct rzg2l_pinctrl *pctrl)
+{
+	int ret, i;
+
+	for (i = 0; i < pctrl->psoc->nfuncs; i++) {
+		const struct function_desc *func = pctrl->psoc->funcs + i;
+
+		ret = pinmux_generic_add_function(pctrl->pctrl_dev, func->name,
+						   func->group_names,
+						   func->num_group_names,
+						   func->data);
+		if (ret < 0) {
+			dev_err(pctrl->dev, "Failed to register function %s\n",
+				func->name);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int rzg2l_gpio_request(struct gpio_chip *chip, unsigned int offset)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+	u8 reg8;
+	unsigned long flags;
+	int ret;
+
+	ret = pinctrl_gpio_request(chip->base + offset);
+	if (ret)
+		return ret;
+
+	spin_lock_irqsave(&pctrl->lock, flags);
+
+	/* Select GPIO mode in PMC Register */
+	reg8 = readb(pctrl->base + PMC(port));
+	reg8 &= ~BIT(bit);
+	writeb(reg8, pctrl->base + PMC(port));
+
+	spin_unlock_irqrestore(&pctrl->lock, flags);
+
+	return 0;
+}
+
+static void rzg2l_gpio_set_direction(struct rzg2l_pinctrl *pctrl, u32 port,
+				     u8 bit, bool output)
+{
+	u16 reg16;
+	unsigned long flags;
+
+	spin_lock_irqsave(&pctrl->lock, flags);
+
+	reg16 = readw(pctrl->base + PM(port));
+	reg16 = reg16 & ~(PM_MASK << (bit * 2));
+
+	if (output)
+		writew(reg16 | (PM_OUTPUT << (bit * 2)),
+		       pctrl->base + PM(port));
+	else
+		writew(reg16 | (PM_INPUT << (bit * 2)),
+		       pctrl->base + PM(port));
+
+	spin_unlock_irqrestore(&pctrl->lock, flags);
+}
+
+static int rzg2l_gpio_get_direction(struct gpio_chip *chip, unsigned int offset)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+
+	if (!(readb(pctrl->base + PMC(port)) & BIT(bit))) {
+		u16 reg16;
+
+		reg16 = readw(pctrl->base + PM(port));
+		reg16 = (reg16 >> (bit * 2)) & PM_MASK;
+		if (reg16 == PM_OUTPUT || reg16 == PM_OUTPUT_INPUT)
+			return GPIOF_OUTPUT;
+		else if (reg16 == PM_INPUT)
+			return GPIOF_INPUT;
+		else
+			return -EINVAL;
+	} else {
+		return -EINVAL;
+	}
+}
+
+static int rzg2l_gpio_direction_input(struct gpio_chip *chip,
+				      unsigned int offset)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+
+	rzg2l_gpio_set_direction(pctrl, port, bit, false);
+
+	return 0;
+}
+
+static void rzg2l_gpio_set(struct gpio_chip *chip, unsigned int offset,
+			   int value)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+	u8 reg8;
+	unsigned long flags;
+
+	spin_lock_irqsave(&pctrl->lock, flags);
+
+	reg8 = readb(pctrl->base + P(port));
+
+	if (value)
+		writeb(reg8 | BIT(bit), pctrl->base + P(port));
+	else
+		writeb(reg8 & ~BIT(bit), pctrl->base + P(port));
+
+	spin_unlock_irqrestore(&pctrl->lock, flags);
+}
+
+static int rzg2l_gpio_direction_output(struct gpio_chip *chip,
+				       unsigned int offset, int value)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+
+
+	rzg2l_gpio_set_direction(pctrl, port, bit, true);
+	rzg2l_gpio_set(chip, offset, value);
+
+	return 0;
+}
+
+static int rzg2l_gpio_get(struct gpio_chip *chip, unsigned int offset)
+{
+	struct rzg2l_pinctrl *pctrl = gpiochip_get_data(chip);
+	u32 port = RZG2L_PIN_ID_TO_PORT(offset);
+	u8 bit = RZG2L_PIN_ID_TO_PIN(offset);
+	u16 reg16;
+
+	reg16 = readw(pctrl->base + PM(port));
+	reg16 = (reg16 >> (bit * 2)) & PM_MASK;
+
+	if (reg16 == PM_INPUT || reg16 == PM_OUTPUT_INPUT)
+		return !!(readb(pctrl->base + PIN(port)) & BIT(bit));
+	else if (reg16 == PM_OUTPUT)
+		return !!(readb(pctrl->base + P(port)) & BIT(bit));
+	else
+		return -EINVAL;
+}
+
+static void rzg2l_gpio_free(struct gpio_chip *chip, unsigned int offset)
+{
+	pinctrl_gpio_free(chip->base + offset);
+
+	/*
+	 * Set the GPIO as an input to ensure that the next GPIO request won't
+	 * drive the GPIO pin as an output.
+	 */
+	rzg2l_gpio_direction_input(chip, offset);
+}
+
+static int rzg2l_pinctrl_add_gpiochip(struct rzg2l_pinctrl *pctrl)
+{
+	struct gpio_chip *chip = &pctrl->gpio_chip;
+	struct device_node *np = pctrl->dev->of_node;
+	struct of_phandle_args args;
+	int ret;
+	unsigned int npins;
+
+	ret = of_parse_phandle_with_fixed_args(np, "gpio-ranges", 3, 0, &args);
+	if (ret) {
+		dev_err(pctrl->dev, "Unable to parse gpio-ranges\n");
+		return ret;
+	}
+
+	npins = args.args[2];
+
+	chip->label = dev_name(pctrl->dev);
+	chip->parent = pctrl->dev;
+	chip->base = -1;
+	chip->ngpio = npins;
+	chip->request = rzg2l_gpio_request;
+	chip->get_direction = rzg2l_gpio_get_direction;
+	chip->direction_input = rzg2l_gpio_direction_input;
+	chip->get = rzg2l_gpio_get;
+	chip->direction_output = rzg2l_gpio_direction_output;
+	chip->set = rzg2l_gpio_set;
+	chip->free = rzg2l_gpio_free;
+	chip->owner = THIS_MODULE;
+
+	ret = devm_gpiochip_add_data(pctrl->dev, chip, pctrl);
+	if (ret) {
+		dev_err(pctrl->dev, "failed to add GPIO controller\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int rzg2l_pinctrl_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct rzg2l_pinctrl *pctrl;
+	const struct rzg2l_pin_soc *psoc;
+	int ret;
+
+	psoc = of_device_get_match_data(&pdev->dev);
+
+	pctrl = devm_kzalloc(&pdev->dev, sizeof(*pctrl), GFP_KERNEL);
+	if (pctrl == NULL)
+		return -ENOMEM;
+
+	pctrl->psoc = psoc;
+	pctrl->nports = psoc->nports;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "missing IO resource\n");
+		return -ENXIO;
+	}
+
+	pctrl->dev = &pdev->dev;
+	pctrl->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(pctrl->base))
+		return PTR_ERR(pctrl->base);
+
+	spin_lock_init(&pctrl->lock);
+
+	pctrl->pctrl_desc.name = DRV_NAME;
+	pctrl->pctrl_desc.pins = pctrl->psoc->pins;
+	pctrl->pctrl_desc.npins = pctrl->psoc->npins;
+	pctrl->pctrl_desc.pctlops = &rzg2l_pinctrl_pctlops;
+	pctrl->pctrl_desc.pmxops = &rzg2l_pinctrl_pmxops;
+	pctrl->pctrl_desc.confops = &rzg2l_pinctrl_confops;
+	pctrl->pctrl_desc.owner = THIS_MODULE;
+
+	ret = devm_pinctrl_register_and_init(pctrl->dev, &pctrl->pctrl_desc,
+					     pctrl, &pctrl->pctrl_dev);
+	if (ret) {
+		dev_err(pctrl->dev, "could not register: %i\n", ret);
+		return ret;
+	};
+
+	ret = rzg2l_pinctrl_add_groups(pctrl);
+	if (ret)
+		return ret;
+
+	ret = rzg2l_pinctrl_add_functions(pctrl);
+	if (ret)
+		return ret;
+
+	ret = pinctrl_enable(pctrl->pctrl_dev);
+	if (ret)
+		return ret;
+
+	ret = rzg2l_pinctrl_add_gpiochip(pctrl);
+	if (ret) {
+		dev_err(pctrl->dev, "failed to add GPIO chip: %i\n", ret);
+		return ret;
+	};
+
+	pctrl->clk = devm_clk_get(pctrl->dev, NULL);
+	if (IS_ERR(pctrl->clk)) {
+		ret = PTR_ERR(pctrl->clk);
+		dev_err(pctrl->dev, "failed to get GPIO clk : %i\n", ret);
+		return ret;
+	};
+
+	ret = clk_prepare_enable(pctrl->clk);
+	if (ret) {
+		dev_err(pctrl->dev, "failed to enable GPIO clk: %i\n", ret);
+		return ret;
+	};
+
+	platform_set_drvdata(pdev, pctrl);
+
+	dev_info(pctrl->dev, "%s support registered\n", DRV_NAME);
+	return 0;
+}
+
+static const struct of_device_id rzg2l_pinctrl_of_table[] = {
+	{},
+};
+
+static struct platform_driver rzg2l_pinctrl_driver = {
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(rzg2l_pinctrl_of_table),
+	},
+	.probe = rzg2l_pinctrl_probe,
+};
+
+static int __init rzg2l_pinctrl_init(void)
+{
+	return platform_driver_register(&rzg2l_pinctrl_driver);
+}
+subsys_initcall_sync(rzg2l_pinctrl_init);
diff --git a/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.h b/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.h
new file mode 100644
index 0000000..8089818
--- /dev/null
+++ b/drivers/pinctrl/sh-pfc/pinctrl-rzg2l.h
@@ -0,0 +1,174 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Renesas RZ/G2L Pin Function Controller and GPIO support
+ *
+ * Copyright (C) 2020 Renesas Electronics Corp.
+ */
+
+#ifndef _RZG2L_PINCTRL_
+#define _RZG2L_PINCTRL_
+
+#include <linux/gpio.h>
+#include <linux/gpio/driver.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/pinctrl/pinconf.h>
+#include <linux/pinctrl/pinconf-generic.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/clk.h>
+
+#include "../core.h"
+#include "../pinconf.h"
+#include "../pinmux.h"
+
+#define P(n)	(0x0000 + 0x10 + (n))     /* Port Register */
+#define PM(n)	(0x0100 + 0x20 + (n) * 2) /* Port Mode Register */
+#define PMC(n)	(0x0200 + 0x10 + (n))     /* Port Mode Control Register */
+#define PFC(n)	(0x0400 + 0x40 + (n) * 4) /* Port Function Control Register */
+#define PIN(n)	(0x0800 + 0x10 + (n))     /* Port Input Register */
+#define PFC(n)	(0x0400 + 0x40 + (n) * 4) /* Port Function Control Register */
+#define PWPR	(0x3014)                  /* Port Write Protection Register */
+
+#define IOLH(n) (0x1000 + (n) * 8)	/* IOLH Switch Register */
+#define SR(n)   (0x1400 + (n) * 8)	/* Slew Rate Switch Register */
+#define IEN(n)  (0x1800 + (n) * 8)	/* Input Enable Switch Register */
+#define PUPD(n) (0x1C00 + (n) * 8)	/* Pull up/Pull down Switch Register */
+#define SD_CH(n) (0x3000 + (n) * 4)	/* SD IO Voltage Control Register */
+#define QSPI	(0x3008)		/* QSPI IO Voltage Control Register */
+#define ETH_CH(n) (0x300C + (n) * 4)	/* Ether Voltage Control Register */
+
+#define PWPR_B0WI		BIT(7)	/* Bit Write Disable */
+#define PWPR_PFCWE		BIT(6)	/* PFC Register Write Enable */
+#define PVDD_1800		1	/* I/O domain voltage <= 1.8V */
+#define PVDD_3300		0	/* I/O domain voltage >= 3.3V */
+#define ETH_PVDD_2500		BIT(1)	/* Ether I/O voltage 2.5V */
+#define ETH_PVDD_1800		BIT(0)	/* Ether I/O voltage 1.8V */
+#define ETH_PVDD_3300		0	/* Ether I/O voltage 3.3V */
+
+#define PM_INPUT		0x1	/* Input Mode */
+#define PM_OUTPUT		0x2	/* Output Mode (disable Input) */
+#define PM_OUTPUT_INPUT		0x3	/* Output Mode (enable Input) */
+
+#define PM_MASK			0x03
+#define PFC_MASK		0x07
+#define PUPD_MASK		0x03
+#define IOLH_MASK		0x03
+#define IEN_MASK		0x01
+#define SR_MASK			0x01
+#define PVDD_MASK		0x01
+#define ETH_PVDD_MASK		0x03
+
+#define RZG2L_MAX_PINS_PER_PORT		8
+#define RZG2L_PIN_ID_TO_PORT(id)	((id) / RZG2L_MAX_PINS_PER_PORT)
+#define RZG2L_PIN_ID_TO_PIN(id)		((id) % RZG2L_MAX_PINS_PER_PORT)
+
+#define PIN_CFG_DRIVE_STRENGTH		BIT(0)
+#define PIN_CFG_SLEW_RATE		BIT(1)
+#define PIN_CFG_INPUT_ENABLE		BIT(2)
+#define PIN_CFG_PULL_UP_DOWN		BIT(3)
+#define PIN_CFG_IO_VOLTAGE_SD0		BIT(4)
+#define PIN_CFG_IO_VOLTAGE_SD1		BIT(5)
+#define PIN_CFG_IO_VOLTAGE_QSPI		BIT(6)
+#define PIN_CFG_IO_VOLTAGE_ETH0		BIT(7)
+#define PIN_CFG_IO_VOLTAGE_ETH1		BIT(8)
+#define PIN_CFG_IO_VOLTAGE		GENMASK(8, 4)
+
+#define GPIOF_OUTPUT			0
+#define GPIOF_INPUT			1
+
+struct rzg2l_pin_soc {
+	const struct pinctrl_pin_desc	*pins;
+	unsigned int			npins;
+	const struct group_desc		*groups;
+	unsigned int			ngroups;
+	const struct function_desc	*funcs;
+	unsigned int			nfuncs;
+
+	unsigned int			nports;
+};
+
+struct pin_data {
+	u32 port;
+	u64 bit;
+	u32 configs;
+};
+
+struct rzg2l_pinctrl {
+	struct pinctrl_dev		*pctrl_dev;
+	struct pinctrl_desc		pctrl_desc;
+
+	void __iomem			*base;
+	struct device			*dev;
+	struct clk			*clk;
+
+	struct gpio_chip		gpio_chip;
+
+	const struct rzg2l_pin_soc	*psoc;
+
+	spinlock_t			lock;
+
+	unsigned int			nports;
+};
+
+#define RZ_G2L_PINCTRL_PIN_GPIO(port, configs)			\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port),		\
+		__stringify(P##port##_0),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 1,		\
+		__stringify(P##port##_1),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 2,		\
+		__stringify(P##port##_2),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 3,		\
+		__stringify(P##port##_3),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 4,		\
+		__stringify(P##port##_4),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 5,		\
+		__stringify(P##port##_5),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 6,		\
+		__stringify(P##port##_6),			\
+		(void *) configs,				\
+	},							\
+	{							\
+		(RZG2L_MAX_PINS_PER_PORT) * (port) + 7,		\
+		__stringify(P##port##_7),			\
+		(void *) configs,				\
+	}
+
+#define RZ_G2L_PINCTRL_PIN_NO_GPIO(npin_gpios, id, name)	\
+	{							\
+		npin_gpios + id,				\
+		__stringify(name),				\
+		name##_data,					\
+	}
+
+#define RZ_G2L_PIN(port, bit)		(port * RZG2L_MAX_PINS_PER_PORT + bit)
+
+#define RZ_G2L_PINCTRL_PIN_GROUP(name, mode)			\
+	{							\
+		__stringify(name),				\
+		name##_pins,					\
+		ARRAY_SIZE(name##_pins),			\
+		(void *) mode,					\
+	}
+
+#endif
-- 
2.7.4

