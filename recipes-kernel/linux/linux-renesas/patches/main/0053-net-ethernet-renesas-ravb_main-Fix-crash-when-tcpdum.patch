From d8c953ffe66c2c96039f0e00969eac9f020fa063 Mon Sep 17 00:00:00 2001
From: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date: Tue, 9 Feb 2021 09:42:42 +0000
Subject: [PATCH 053/135] net: ethernet: renesas: ravb_main: Fix crash when
 tcpdump

Port further changes from ESPADA which fixes crash when tcpdump is run.

Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
---
 drivers/net/ethernet/renesas/ravb_main.c | 161 ++++++++++++++++++++++++++++---
 1 file changed, 146 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/renesas/ravb_main.c b/drivers/net/ethernet/renesas/ravb_main.c
index 31c0cae..4f1cd60 100644
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@ -85,6 +85,48 @@ static void ravb_set_duplex(struct net_device *ndev)
 	ravb_write(ndev, ecmr, ECMR);
 }
 
+#ifdef DUMP_REGS
+static void __dump_regs(struct net_device *ndev)
+{
+	netdev_warn(ndev, "CSR0: 0x%08x\n", ravb_read(ndev, 0x800));
+	netdev_warn(ndev, "CSR: 0x%08x\n", ravb_read(ndev, 0xc));
+	netdev_warn(ndev, "CXR35: 0x%08x\n", ravb_read(ndev, 0x540));
+	netdev_warn(ndev, "CXR31: 0x%08x\n", ravb_read(ndev, 0x530));
+	netdev_warn(ndev, "CXR2C: 0x%08x\n", ravb_read(ndev, 0x52c));
+	netdev_warn(ndev, "CXR2A: 0x%08x\n", ravb_read(ndev, 0x508));
+	netdev_warn(ndev, "CXR71: 0x%08x\n", ravb_read(ndev, 0x554));
+	netdev_warn(ndev, "CXR24: 0x%08x\n", ravb_read(ndev, 0x5c0));
+	netdev_warn(ndev, "CXR25: 0x%08x\n", ravb_read(ndev, 0x5c8));
+	netdev_warn(ndev, "CXR21: 0x%08x\n", ravb_read(ndev, 0x510));
+	netdev_warn(ndev, "CXR22: 0x%08x\n", ravb_read(ndev, 0x518));
+	netdev_warn(ndev, "CXRD2: 0x%08x\n", ravb_read(ndev, 0x5b0));
+	netdev_warn(ndev, "CXR2G: 0x%08x\n", ravb_read(ndev, 0x5bc));
+
+	netdev_warn(ndev, "TGC: 0x%08x\n", ravb_read(ndev, 0x300));
+	netdev_warn(ndev, "TIC: 0x%08x\n", ravb_read(ndev, 0x378));
+	netdev_warn(ndev, "TIE: 0x%08x\n", ravb_read(ndev, 0x478));
+	netdev_warn(ndev, "TIS: 0x%08x\n", ravb_read(ndev, 0x37C));
+	netdev_warn(ndev, "TID: 0x%08x\n", ravb_read(ndev, 0x47C));
+
+	netdev_warn(ndev, "RIC0: 0x%08x\n", ravb_read(ndev, RIC0));
+	netdev_warn(ndev, "RIE0: 0x%08x\n", ravb_read(ndev, RIE0));
+
+	netdev_warn(ndev, "DBAT: 0x%08x\n", ravb_read(ndev, 0x04));
+	netdev_warn(ndev, "RCR: 0x%08x\n", ravb_read(ndev, 0x090));
+	netdev_warn(ndev, "RTC: 0x%08x\n", ravb_read(ndev, 0x0b4));
+	netdev_warn(ndev, "CIE: 0x%08x\n", ravb_read(ndev, 0x384));
+	netdev_warn(ndev, "DIE: 0x%08x\n", ravb_read(ndev, 0x450));
+	netdev_warn(ndev, "EIE: 0x%08x\n", ravb_read(ndev, 0x458));
+	netdev_warn(ndev, "RIE0: 0x%08x\n", ravb_read(ndev, 0x460));
+	netdev_warn(ndev, "RIE1: 0x%08x\n", ravb_read(ndev, 0x468));
+	netdev_warn(ndev, "RIE2: 0x%08x\n", ravb_read(ndev, 0x470));
+	netdev_warn(ndev, "RIE3: 0x%08x\n", ravb_read(ndev, 0x488));
+	netdev_warn(ndev, "CCC: 0x%08x\n", ravb_read(ndev, 0x0));
+	netdev_warn(ndev, "CXR20: 0x%08x\n", ravb_read(ndev, 0x500));
+	netdev_warn(ndev, "TCCR: 0x%08x\n", ravb_read(ndev, 0x304));
+}
+#endif
+
 static void ravb_set_rate(struct net_device *ndev)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
@@ -1262,7 +1304,7 @@ static int ravb_poll(struct napi_struct *napi, int budget)
 static void ravb_adjust_link(struct net_device *ndev)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
-	struct phy_device *phydev = ndev->phydev;
+	struct phy_device *phydev = priv->phydev;
 	bool new_state = false;
 
 	if (phydev->link) {
@@ -1350,6 +1392,8 @@ static int ravb_phy_init(struct net_device *ndev)
 	phydev->supported &= ~PHY_10BT_FEATURES;
 #endif  /* CONFIG_ARCH_ESPADA */
 
+	priv->phydev = phydev;
+
 #if 0
 	/* near end loopback test */
 	phy_write_mmd(priv->phydev, 0x28, 0x15, 0xEEEE);
@@ -1371,8 +1415,6 @@ static int ravb_phy_init(struct net_device *ndev)
 
 	phy_attached_info(phydev);
 
-	priv->phydev = phydev;
-
 #if defined(CONFIG_ARCH_ESPADA)
 	if (priv->phy_interface == PHY_INTERFACE_MODE_RGMII_ID) {
 		ravb_write(ndev, ravb_read(ndev, CXR35)
@@ -1389,13 +1431,14 @@ static int ravb_phy_init(struct net_device *ndev)
 /* PHY control start function */
 static int ravb_phy_start(struct net_device *ndev)
 {
+	struct ravb_private *priv = netdev_priv(ndev);
 	int error;
 
 	error = ravb_phy_init(ndev);
 	if (error)
 		return error;
 
-	phy_start(ndev->phydev);
+	phy_start(priv->phydev);
 
 	return 0;
 }
@@ -1428,6 +1471,10 @@ static const char ravb_gstrings_stats[][ETH_GSTRING_LEN] = {
 	"rx_queue_0_crc_errors",
 	"rx_queue_0_frame_errors",
 	"rx_queue_0_length_errors",
+#if defined(CONFIG_ARCH_ESPADA)
+	"rx_queue_0_csum_offload_errors",
+	"rx_queue_0_over_errors",
+#else
 	"rx_queue_0_missed_errors",
 	"rx_queue_0_over_errors",
 
@@ -1446,6 +1493,7 @@ static const char ravb_gstrings_stats[][ETH_GSTRING_LEN] = {
 	"rx_queue_1_length_errors",
 	"rx_queue_1_missed_errors",
 	"rx_queue_1_over_errors",
+#endif /* CONFIG_ARCH_ESPADA */
 };
 
 #define RAVB_STATS_LEN	ARRAY_SIZE(ravb_gstrings_stats)
@@ -1468,7 +1516,11 @@ static void ravb_get_ethtool_stats(struct net_device *ndev,
 	int q;
 
 	/* Device-specific stats */
+#if defined(CONFIG_ARCH_ESPADA)
+	for (q = RAVB_BE; q < 1; q++) {
+#else
 	for (q = RAVB_BE; q < NUM_RX_QUEUE; q++) {
+#endif /* CONFIG_ARCH_ESPADA */
 		struct net_device_stats *stats = &priv->stats[q];
 
 		data[i++] = priv->cur_rx[q];
@@ -1570,7 +1622,10 @@ static int ravb_set_ringparam(struct net_device *ndev,
 static int ravb_get_ts_info(struct net_device *ndev,
 			    struct ethtool_ts_info *info)
 {
+#if defined(CONFIG_ARCH_ESPADA)
+#else /* CONFIG_ARCH_ESPADA */
 	struct ravb_private *priv = netdev_priv(ndev);
+#endif /* CONFIG_ARCH_ESPADA */
 
 	info->so_timestamping =
 		SOF_TIMESTAMPING_TX_SOFTWARE |
@@ -1584,7 +1639,10 @@ static int ravb_get_ts_info(struct net_device *ndev,
 		(1 << HWTSTAMP_FILTER_NONE) |
 		(1 << HWTSTAMP_FILTER_PTP_V2_L2_EVENT) |
 		(1 << HWTSTAMP_FILTER_ALL);
+#if defined(CONFIG_ARCH_ESPADA)
+#else /* CONFIG_ARCH_ESPADA */
 	info->phc_index = ptp_clock_index(priv->ptp.clock);
+#endif /* CONFIG_ARCH_ESPADA */
 
 	return 0;
 }
@@ -1593,20 +1651,25 @@ static void ravb_get_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
 
-	wol->supported = WAKE_MAGIC;
-	wol->wolopts = priv->wol_enabled ? WAKE_MAGIC : 0;
+	wol->supported = WAKE_MAGIC | WAKE_PHY;
+
+	wol->wolopts = 0;
+	if (priv->wol_ecspir & ECSIPR_MPDIP)
+		wol->wolopts |= WAKE_MAGIC;
+	if (priv->wol_ecspir & ECSIPR_LCHNGIP)
+		wol->wolopts |= WAKE_PHY;
 }
 
 static int ravb_set_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
 
-	if (wol->wolopts & ~WAKE_MAGIC)
-		return -EOPNOTSUPP;
-
-	priv->wol_enabled = !!(wol->wolopts & WAKE_MAGIC);
+	priv->wol_ecspir = 0;
+	if (wol->wolopts & WAKE_MAGIC)
+		priv->wol_ecspir |= ECSIPR_MPDIP;
 
-	device_set_wakeup_enable(&priv->pdev->dev, priv->wol_enabled);
+	if (wol->wolopts & WAKE_PHY)
+		priv->wol_ecspir |= ECSIPR_LCHNGIP;
 
 	return 0;
 }
@@ -1687,8 +1750,29 @@ static int ravb_set_eee(struct net_device *ndev, struct ethtool_eee *data)
 	return 0;
 }
 
+#if defined(CONFIG_ARCH_ESPADA)
+static int ravb_nway_reset(struct net_device *ndev)
+{
+	struct ravb_private *priv = netdev_priv(ndev);
+	int error = -ENODEV;
+	unsigned long flags;
+
+	if (priv->phydev) {
+		spin_lock_irqsave(&priv->lock, flags);
+		error = phy_start_aneg(priv->phydev);
+		spin_unlock_irqrestore(&priv->lock, flags);
+	}
+
+	return error;
+}
+#endif
+
 static const struct ethtool_ops ravb_ethtool_ops = {
+#if defined(CONFIG_ARCH_ESPADA)
+	.nway_reset		= ravb_nway_reset,
+#else
 	.nway_reset		= phy_ethtool_nway_reset,
+#endif
 	.get_msglevel		= ravb_get_msglevel,
 	.set_msglevel		= ravb_set_msglevel,
 	.get_link		= ethtool_op_get_link,
@@ -1949,6 +2033,9 @@ static netdev_tx_t ravb_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	desc--;
 	desc->die_dt = DT_FSTART;
 
+#ifdef DUMP_REGS
+	__dump_regs(ndev);
+#endif
 	ravb_write(ndev, ravb_read(ndev, TCCR) | (TCCR_TSRQ0 << q), TCCR);
 
 	priv->cur_tx[q] += NUM_TX_DESC;
@@ -2156,7 +2243,8 @@ static int ravb_hwtstamp_set(struct net_device *ndev, struct ifreq *req)
 /* ioctl to device function */
 static int ravb_do_ioctl(struct net_device *ndev, struct ifreq *req, int cmd)
 {
-	struct phy_device *phydev = ndev->phydev;
+	struct ravb_private *priv = netdev_priv(ndev);
+	struct phy_device *phydev = priv->phydev;
 
 	if (!netif_running(ndev))
 		return -EINVAL;
@@ -2174,6 +2262,7 @@ static int ravb_do_ioctl(struct net_device *ndev, struct ifreq *req, int cmd)
 	return phy_mii_ioctl(phydev, req, cmd);
 }
 
+#ifndef CONFIG_ARCH_ESPADA
 static int ravb_change_mtu(struct net_device *ndev, int new_mtu)
 {
 	if (netif_running(ndev))
@@ -2184,7 +2273,9 @@ static int ravb_change_mtu(struct net_device *ndev, int new_mtu)
 
 	return 0;
 }
+#endif
 
+#ifndef CONFIG_ARCH_ESPADA
 static void ravb_set_rx_csum(struct net_device *ndev, bool enable)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
@@ -2203,15 +2294,49 @@ static void ravb_set_rx_csum(struct net_device *ndev, bool enable)
 
 	spin_unlock_irqrestore(&priv->lock, flags);
 }
+#endif
 
 static int ravb_set_features(struct net_device *ndev,
 			     netdev_features_t features)
 {
+#ifdef CONFIG_ARCH_ESPADA
+	int error;
+	unsigned int reg = 0;
+
+	netdev_features_t changed = features ^ ndev->features;
+
+	reg = ravb_read(ndev, CSR0);
+
+	ravb_write(ndev, ravb_read(ndev, CSR0) & ~(CSR0_RPE | CSR0_TPE), CSR0);
+	error = ravb_wait(ndev, CSR0, CSR0_RPE | CSR0_TPE, 0);
+	if (error) {
+		ravb_write(ndev, reg, CSR0);
+		return error;
+	}
+
+	if (changed & NETIF_F_RXCSUM) {
+		if (features & NETIF_F_RXCSUM)
+			ravb_write(ndev, CSR2_ALL, CSR2);
+		else
+			ravb_write(ndev, 0, CSR2);
+	}
+
+	if (changed & NETIF_F_HW_CSUM) {
+		if (features & NETIF_F_HW_CSUM) {
+			ravb_write(ndev, CSR1_ALL, CSR1);
+			ndev->features |= NETIF_F_CSUM_MASK;
+		} else {
+			ravb_write(ndev, 0, CSR1);
+		}
+	}
+	ravb_write(ndev, reg, CSR0);
+
+#else
 	netdev_features_t changed = ndev->features ^ features;
 
 	if (changed & NETIF_F_RXCSUM)
 		ravb_set_rx_csum(ndev, features & NETIF_F_RXCSUM);
-
+#endif
 	ndev->features = features;
 
 	return 0;
@@ -2226,7 +2351,11 @@ static const struct net_device_ops ravb_netdev_ops = {
 	.ndo_set_rx_mode	= ravb_set_rx_mode,
 	.ndo_tx_timeout		= ravb_tx_timeout,
 	.ndo_do_ioctl		= ravb_do_ioctl,
+#ifdef CONFIG_ARCH_ESPADA
+	.ndo_change_mtu		= eth_change_mtu,
+#else
 	.ndo_change_mtu		= ravb_change_mtu,
+#endif
 	.ndo_validate_addr	= eth_validate_addr,
 	.ndo_set_mac_address	= eth_mac_addr,
 	.ndo_set_features	= ravb_set_features,
@@ -2458,8 +2587,10 @@ static int ravb_probe(struct platform_device *pdev)
 	ndev->ethtool_ops = &ravb_ethtool_ops;
 
 	/* Set AVB config mode */
-	ravb_write(ndev, (ravb_read(ndev, CCC) & ~CCC_OPC) | CCC_OPC_CONFIG,
-		   CCC);
+	if (ravb_config(ndev)) {
+		error = EINVAL;
+		goto out_release;
+	}
 
 #if defined(CONFIG_ARCH_ESPADA)
 	ndev->hw_features |= (NETIF_F_HW_CSUM | NETIF_F_RXCSUM);
-- 
2.7.4

