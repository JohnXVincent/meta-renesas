From 48804be4d5d2c08d5913c47f1bd4218a97318af8 Mon Sep 17 00:00:00 2001
From: Khoi Nguyen <khoi.nguyen.aj@renesas.com>
Date: Mon, 1 Feb 2021 13:29:47 +0700
Subject: [PATCH 051/135] net: ethernet: renesas: ravb_main: Add settings for
 E-MAC and DMAC for Ethernet

This patch adds the registers for E-MAC and DMAC initial
 configuration following set up procedure in HW Manual
 on G2L SMARC board.

Signed-off-by: Khoi Nguyen <khoi.nguyen.aj@renesas.com>
---
 drivers/net/ethernet/renesas/ravb.h      | 11 ++++
 drivers/net/ethernet/renesas/ravb_main.c | 89 +++++++++++++++++++++++---------
 2 files changed, 77 insertions(+), 23 deletions(-)

diff --git a/drivers/net/ethernet/renesas/ravb.h b/drivers/net/ethernet/renesas/ravb.h
index e1f6afd..e3cbbce 100644
--- a/drivers/net/ethernet/renesas/ravb.h
+++ b/drivers/net/ethernet/renesas/ravb.h
@@ -195,8 +195,19 @@ enum ravb_reg {
 	PSR	= 0x0528,
 	PIPR	= 0x052c,
 #ifdef CONFIG_ARCH_ESPADA
+	CXR20	= 0x0500,
 	CXR31	= 0x0530,
 	CXR35	= 0x0540,
+	CXR2C	= 0x052C,
+	CXR22	= 0x0518,
+	CXR2G	= 0x05BC,
+	CXR2A	= 0x0508,
+	CXR71	= 0x0554,
+	CXR21	= 0x0510,
+	DIE	= 0x0450,
+	EIE	= 0x0458,
+	RIE1	= 0x0468,
+	RIE3	= 0x0488,
 #endif /* CONFIG_ARCH_ESPADA */
 	MPR	= 0x0558,
 	PFTCR	= 0x055c,
diff --git a/drivers/net/ethernet/renesas/ravb_main.c b/drivers/net/ethernet/renesas/ravb_main.c
index 1174429..8ea93a5 100644
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@ -134,12 +134,18 @@ static void ravb_read_mac_address(struct net_device *ndev, const u8 *mac)
 		u32 mahr = ravb_read(ndev, MAHR);
 		u32 malr = ravb_read(ndev, MALR);
 
-		ndev->dev_addr[0] = (mahr >> 24) & 0xFF;
-		ndev->dev_addr[1] = (mahr >> 16) & 0xFF;
-		ndev->dev_addr[2] = (mahr >>  8) & 0xFF;
-		ndev->dev_addr[3] = (mahr >>  0) & 0xFF;
-		ndev->dev_addr[4] = (malr >>  8) & 0xFF;
-		ndev->dev_addr[5] = (malr >>  0) & 0xFF;
+	//	ndev->dev_addr[0] = (mahr >> 24) & 0xFF;
+	//	ndev->dev_addr[1] = (mahr >> 16) & 0xFF;
+	//	ndev->dev_addr[2] = (mahr >>  8) & 0xFF;
+	//	ndev->dev_addr[3] = (mahr >>  0) & 0xFF;
+	//	ndev->dev_addr[4] = (malr >>  8) & 0xFF;
+	//	ndev->dev_addr[5] = (malr >>  0) & 0xFF;
+		ndev->dev_addr[0] = 0x74;
+		ndev->dev_addr[1] = 0x90;
+		ndev->dev_addr[2] = 0x50;
+		ndev->dev_addr[3] = 0x00;
+		ndev->dev_addr[4] = 0x00;
+		ndev->dev_addr[5] = 0x61;
 	}
 }
 
@@ -484,6 +490,18 @@ static void ravb_emac_init(struct net_device *ndev)
 	                                 ECSR_RFRI, ECSR);
 	ravb_write(ndev, CSR0_TPE | CSR0_RPE, CSR0);
 
+	ravb_write(ndev, 0x3, CXR2C);
+
+	ravb_write(ndev, 0x1F40, CXR2A);
+
+	ravb_write(ndev, 0x1, CXR71);
+
+	ravb_write(ndev, 0, CXR21);
+
+	ravb_write(ndev, 0x1D, CXR22);
+
+	ravb_write(ndev, 0x8, CXR2G);
+
 	/* E-MAC interrupt enable register */
 	ravb_write(ndev, ECSIPR_ICDIP, ECSIPR);
 	
@@ -564,28 +582,52 @@ static int ravb_dmac_init(struct net_device *ndev)
 	/* Set Max Frame Length (RTC) */
 	ravb_write(ndev, 0x7ffc0000 | RAVB_RCV_BUFF_MAX, RTC);
 
-	/* Set FIFO size */
-	ravb_write(ndev, 0x00222200, TGC);
+	ravb_write(ndev, 0x101, CIE);
 
-	ravb_write(ndev, 0, TCCR);
+	ravb_write(ndev, 0xfffe, DIC);
 
-	/* Interrupt enable: */
-	/* Frame receive */
-	ravb_write(ndev, RIC0_FRE0, RIC0);
+	ravb_write(ndev, 0xfffe, DIE);
 
-	ravb_write(ndev, 0x0, RIC1);
+	ravb_write(ndev, 0xA07, EIE);
 
-	/* Receive FIFO full error, descriptor empty */
-	ravb_write(ndev, RIC2_QFE0 | RIC2_RFFE, RIC2);
+	ravb_write(ndev, 0x1, RIE0);
+
+	ravb_write(ndev, 0x80000000, RIE1);
+
+	ravb_write(ndev, 0x80000001, RIE2);
 
-	ravb_write(ndev, 0x0, RIC3);
+	ravb_write(ndev, 0x17C01, TIE);
 
-	ravb_write(ndev, TIC_FTE, TIC);
+	ravb_write(ndev, 0x1, RIE3);
+
+	/* Set FIFO size */
+	ravb_write(ndev, 0x00222200, TGC);
+
+//	ravb_write(ndev, 0, TCCR);
+
+	/* Interrupt enable: */
+	/* Frame receive */
+//	ravb_write(ndev, RIC0_FRE0, RIC0);
+//
+//	ravb_write(ndev, 0x0, RIC1);
+//
+//	/* Receive FIFO full error, descriptor empty */
+//	ravb_write(ndev, RIC2_QFE0 | RIC2_RFFE, RIC2);
+//
+//	ravb_write(ndev, 0x0, RIC3);
+
+//	ravb_write(ndev, TIC_FTE, TIC);
 #endif
 
 	/* Setting the control will start the AVB-DMAC process. */
 	ravb_modify(ndev, CCC, CCC_OPC, CCC_OPC_OPERATION);
 
+	ravb_write(ndev, 0x30, CSR0);
+
+	ravb_write(ndev, 0x2030273, CXR20);
+
+	ravb_write(ndev, 0x30001, TCCR);
+
 	return 0;
 }
 
@@ -1259,8 +1301,10 @@ static int ravb_poll(struct napi_struct *napi, int budget)
 		ravb_modify(ndev, RIC0, mask, mask);
 		ravb_modify(ndev, TIC,  mask, mask);
 	} else {
-		ravb_write(ndev, mask, RIE0);
-		ravb_write(ndev, mask, TIE);
+//		ravb_write(ndev, mask, RIE0);
+//		ravb_write(ndev, mask, TIE);
+		ravb_write(ndev, 0x1, RIE0);
+		ravb_write(ndev, 0x17C01, TIE);
 	}
 	mmiowb();
 	spin_unlock_irqrestore(&priv->lock, flags);
@@ -1406,9 +1450,8 @@ static int ravb_phy_init(struct net_device *ndev)
 #endif
 
 #ifdef CONFIG_ARCH_ESPADA
-	if (priv->phy_interface == PHY_INTERFACE_MODE_RGMII_ID) {
-		ravb_write(ndev, ravb_read(ndev, CXR35)
-			 | CXR35_SEL_MODIN, CXR35);
+	if (priv->phy_interface == PHY_INTERFACE_MODE_RGMII) {
+		ravb_write(ndev, 0x3E80000, CXR35);
 	}
 #endif  /* CONFIG_ARCH_ESPADA */
 
@@ -1729,11 +1772,11 @@ static int ravb_open(struct net_device *ndev)
 			goto out_free_irq_nc_rx;
 	}
 
+	ravb_emac_init(ndev);
 	/* Device init */
 	error = ravb_dmac_init(ndev);
 	if (error)
 		goto out_free_irq_nc_tx;
-	ravb_emac_init(ndev);
 
 #ifndef CONFIG_ARCH_ESPADA
 	/* Initialise PTP Clock driver */
-- 
2.7.4

