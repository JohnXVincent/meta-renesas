diff --git a/arch/arm64/boot/dts/renesas/r9a09g055ma3gbg.dtsi b/arch/arm64/boot/dts/renesas/r9a09g055ma3gbg.dtsi
index bffc08c..52ee9d5 100755
--- a/arch/arm64/boot/dts/renesas/r9a09g055ma3gbg.dtsi
+++ b/arch/arm64/boot/dts/renesas/r9a09g055ma3gbg.dtsi
@@ -269,9 +269,8 @@
            bus-range = <0x0 0xff>;
            linux,pci-domain = <0x0>;
            interrupts = <GIC_SPI 324 IRQ_TYPE_LEVEL_HIGH>;
-           ranges = <0x03000000 0x0 0xc0000000 0x0 0xc0000000 0x0 0x00200000
-				    0x03000000 0x0 0xc0300000 0x0 0xc0300000 0x0 0x08000000>;
-           dma-ranges = <0x03000000 0x0 0x28000000 0x0 0x28000000 0x0 0x58000000>;
+           ranges = <0x03000000 0x0 0xc0000000 0x0 0xc0000000 0x0 0x20000000>;
+           dma-ranges = <0x03000000 0x0 0x00000000 0x0 0x00000000 0x0 0x80000000>;
            #interrupt-cells = <0x1>;
            interrupt-map-mask = <0 0 0 0>;
            interrupt-map = <0 0 0 0 &gic GIC_SPI 324 IRQ_TYPE_LEVEL_HIGH>;
diff --git a/drivers/pci/controller/pcie-rzv2m-host.c b/drivers/pci/controller/pcie-rzv2m-host.c
index 1636a5e..8891e9b 100755
--- a/drivers/pci/controller/pcie-rzv2m-host.c
+++ b/drivers/pci/controller/pcie-rzv2m-host.c
@@ -1,14 +1,13 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * PCIe driver for Renesas RZ/V2MA SoCs
- *  Copyright (C) 2014-2020 Renesas Electronics Europe Ltd
+ * PCIe driver for Renesas RZ/V2M Series SoCs
+ *  Copyright (C) 2022 Renesas Electronics Ltd
  *
  * Based on:
  *  arch/sh/drivers/pci/pcie-sh7786.c
  *  arch/sh/drivers/pci/ops-sh7786.c
  *  Copyright (C) 2009 - 2011  Paul Mundt
  *
- * Author: Phil Edworthy <phil.edworthy@renesas.com>
  */
 
 #include <linux/bitops.h>
@@ -269,15 +268,7 @@ static int rzv2m_pcie_write_config_access(struct rzv2m_pcie_host *host,
 		if (dev != 0)
 			return PCIBIOS_DEVICE_NOT_FOUND;
 
-		if (reg==0x10)
-		{
-			r_configuration_space[0] = data;
-		}
-		else if (reg==0x14)
-		{
-			r_configuration_space[1] = data;
-		}
-		else if (reg==0x20)
+		if (reg==0x20)
 		{
 			r_configuration_space[2] = data;
 		}
@@ -486,78 +477,78 @@ static void rzv2m_pcie_setting_config(struct rzv2m_pcie *pcie)
 
 static int PCIE_phyInitialize_L0(struct rzv2m_pcie *pcie)
 {
-    rzv2m_sys_write_reg(SET_LANE0, SYS_PCI_LANE_SEL_REG);  // Set Lane0 reg
-
-    /* PHY Initialize setting for Setting of PMA Register */
-    rzv2m_pciphy_write_reg(0x0032, PCI_PHYA_PLLPMSSDIV_REG);			/* PCI_PHYA 0D8h */
-    rzv2m_pciphy_write_reg(0x0001, PCI_PHYA_RXCDRREFDIVSELPLL_REG);	/* PCI_PHYA 480h */
-    rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_RXCDRREFDIVSELDATA_REG);	/* PCI_PHYA 488h */
-    rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXDDESKEW_REG);			/* PCI_PHYA 6ECh */
-    rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXMISC_REG);				/* PCI_PHYA 73Ch */
-
-    /* PHY parameters for TX : Reference value for signal adjustment */
-    rzv2m_pciphy_write_reg(0x0011, PCI_PHYA_PLLALPFRSELFINE_REG);		/* PCI_PHYA 080h */
-    rzv2m_pciphy_write_reg(0x003F, PCI_PHYA_TXDRVLVCTLG1_REG);		/* PCI_PHYA 404h */
-    rzv2m_pciphy_write_reg(0x001D, PCI_PHYA_TXDRVLVLCTLG2_REG);		/* PCI_PHYA 408h */
-    rzv2m_pciphy_write_reg(0x002B, PCI_PHYA_TXDRVPOSTLVCTLG1_REG);	/* PCI_PHYA 414h */
-    rzv2m_pciphy_write_reg(0x000A, PCI_PHYA_TXDRVPOSTLVCTLG2_REG);	/* PCI_PHYA 418h */
-    rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_TXDRVIDRVEN_REG);			/* PCI_PHYA 42Ch */
-    rzv2m_pciphy_write_reg(0x00B7, PCI_PHYA_ATXDRVIDRVCTL_REG);		/* PCI_PHYA 430h */
-    rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_TXJEQEVENCTL_REG);		/* PCI_PHYA 44Ch */
-    rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_TXJEQODDCTL_REG);			/* PCI_PHYA 454h */
-    rzv2m_pciphy_write_reg(0x0057, PCI_PHYA_ATXDRVACCDRV_REG);		/* PCI_PHYA 7F0h */
-
-    /* PHY parameters for RX : Reference value for signal adjustment */
-    rzv2m_pciphy_write_reg(0x0073, PCI_PHYA_RXCTLEEN_REG);			/* PCI_PHYA 4B8h */
-    rzv2m_pciphy_write_reg(0x006F, PCI_PHYA_RXCTLEITAILCTLG1_REG);	/* PCI_PHYA 4C0h */
-    rzv2m_pciphy_write_reg(0x006C, PCI_PHYA_RXCTLEITAILCTLG2_REG);	/* PCI_PHYA 4C4h */
-    rzv2m_pciphy_write_reg(0x0013, PCI_PHYA_RXCTLERX1CTLG1_REG);		/* PCI_PHYA 4ECh */
-    rzv2m_pciphy_write_reg(0x00F2, PCI_PHYA_RXCTLERS1CTLG2_REG);		/* PCI_PHYA 4F0h */
-    rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_ARXCTLEIBLEEDCTL_REG);	/* PCI_PHYA 514h */
-    rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_RXRTERM_REG);				/* PCI_PHYA 5A0h */
-    rzv2m_pciphy_write_reg(0x00F8, PCI_PHYA_RXRTERMVCMEN_REG);		/* PCI_PHYA 5ACh */
-    rzv2m_pciphy_write_reg(0x0065, PCI_PHYA_RXCDRFBBCTL_REG);			/* PCI_PHYA 678h */
+	rzv2m_sys_write_reg(SET_LANE0, SYS_PCI_LANE_SEL_REG);				// Set Lane0 reg
+
+	/* PHY Initialize setting for Setting of PMA Register */
+	rzv2m_pciphy_write_reg(0x0032, PCI_PHYA_PLLPMSSDIV_REG);			/* PCI_PHYA 0D8h */
+	rzv2m_pciphy_write_reg(0x0001, PCI_PHYA_RXCDRREFDIVSELPLL_REG);		/* PCI_PHYA 480h */
+	rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_RXCDRREFDIVSELDATA_REG);	/* PCI_PHYA 488h */
+	rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXDDESKEW_REG);				/* PCI_PHYA 6ECh */
+	rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXMISC_REG);				/* PCI_PHYA 73Ch */
+
+	/* PHY parameters for TX : Reference value for signal adjustment */
+	rzv2m_pciphy_write_reg(0x0011, PCI_PHYA_PLLALPFRSELFINE_REG);		/* PCI_PHYA 080h */
+	rzv2m_pciphy_write_reg(0x003F, PCI_PHYA_TXDRVLVCTLG1_REG);			/* PCI_PHYA 404h */
+	rzv2m_pciphy_write_reg(0x001D, PCI_PHYA_TXDRVLVLCTLG2_REG);			/* PCI_PHYA 408h */
+	rzv2m_pciphy_write_reg(0x002B, PCI_PHYA_TXDRVPOSTLVCTLG1_REG);		/* PCI_PHYA 414h */
+	rzv2m_pciphy_write_reg(0x000A, PCI_PHYA_TXDRVPOSTLVCTLG2_REG);		/* PCI_PHYA 418h */
+	rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_TXDRVIDRVEN_REG);			/* PCI_PHYA 42Ch */
+	rzv2m_pciphy_write_reg(0x00B7, PCI_PHYA_ATXDRVIDRVCTL_REG);			/* PCI_PHYA 430h */
+	rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_TXJEQEVENCTL_REG);			/* PCI_PHYA 44Ch */
+	rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_TXJEQODDCTL_REG);			/* PCI_PHYA 454h */
+	rzv2m_pciphy_write_reg(0x0057, PCI_PHYA_ATXDRVACCDRV_REG);			/* PCI_PHYA 7F0h */
+
+	/* PHY parameters for RX : Reference value for signal adjustment */
+	rzv2m_pciphy_write_reg(0x0073, PCI_PHYA_RXCTLEEN_REG);				/* PCI_PHYA 4B8h */
+	rzv2m_pciphy_write_reg(0x006F, PCI_PHYA_RXCTLEITAILCTLG1_REG);		/* PCI_PHYA 4C0h */
+	rzv2m_pciphy_write_reg(0x006C, PCI_PHYA_RXCTLEITAILCTLG2_REG);		/* PCI_PHYA 4C4h */
+	rzv2m_pciphy_write_reg(0x0013, PCI_PHYA_RXCTLERX1CTLG1_REG);		/* PCI_PHYA 4ECh */
+	rzv2m_pciphy_write_reg(0x00F2, PCI_PHYA_RXCTLERS1CTLG2_REG);		/* PCI_PHYA 4F0h */
+	rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_ARXCTLEIBLEEDCTL_REG);		/* PCI_PHYA 514h */
+	rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_RXRTERM_REG);				/* PCI_PHYA 5A0h */
+	rzv2m_pciphy_write_reg(0x00F8, PCI_PHYA_RXRTERMVCMEN_REG);			/* PCI_PHYA 5ACh */
+	rzv2m_pciphy_write_reg(0x0065, PCI_PHYA_RXCDRFBBCTL_REG);			/* PCI_PHYA 678h */
 
-  return 0;
+	return 0;
 
 } /* End of function PCIE_phyInitialize_L0() */
 
 
 static int PCIE_phyInitialize_L1(struct rzv2m_pcie *pcie)
 {
-    rzv2m_sys_write_reg(SET_LANE1, SYS_PCI_LANE_SEL_REG);    // Set Lane1 reg
-
-    /* PHY Initialize setting for Setting of PMA Register */
-    rzv2m_pciphy_write_reg(0x0032, PCI_PHYA_PLLPMSSDIV_REG);			/* PCI_PHYA 0D8h */
-    rzv2m_pciphy_write_reg(0x0001, PCI_PHYA_RXCDRREFDIVSELPLL_REG);	/* PCI_PHYA 480h */
-    rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_RXCDRREFDIVSELDATA_REG);	/* PCI_PHYA 488h */
-    rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXDDESKEW_REG);			/* PCI_PHYA 6ECh */
-    rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXMISC_REG);				/* PCI_PHYA 73Ch */
-
-    /* PHY parameters for TX : Reference value for signal adjustment */
-    rzv2m_pciphy_write_reg(0x0011, PCI_PHYA_PLLALPFRSELFINE_REG);		/* PCI_PHYA 080h */
-    rzv2m_pciphy_write_reg(0x003F, PCI_PHYA_TXDRVLVCTLG1_REG);			/* PCI_PHYA 404h */
-    rzv2m_pciphy_write_reg(0x001D, PCI_PHYA_TXDRVLVLCTLG2_REG);		/* PCI_PHYA 408h */
-    rzv2m_pciphy_write_reg(0x002B, PCI_PHYA_TXDRVPOSTLVCTLG1_REG);		/* PCI_PHYA 414h */
-    rzv2m_pciphy_write_reg(0x000A, PCI_PHYA_TXDRVPOSTLVCTLG2_REG);		/* PCI_PHYA 418h */
-    rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_TXDRVIDRVEN_REG);			/* PCI_PHYA 42Ch */
-    rzv2m_pciphy_write_reg(0x00B7, PCI_PHYA_ATXDRVIDRVCTL_REG);		/* PCI_PHYA 430h */
-    rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_TXJEQEVENCTL_REG);			/* PCI_PHYA 44Ch */
-    rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_TXJEQODDCTL_REG);			/* PCI_PHYA 454h */
-    rzv2m_pciphy_write_reg(0x0057, PCI_PHYA_ATXDRVACCDRV_REG);			/* PCI_PHYA 7F0h */
-
-    /* PHY parameters for RX : Reference value for signal adjustment */
-    rzv2m_pciphy_write_reg(0x0073, PCI_PHYA_RXCTLEEN_REG);				/* PCI_PHYA 4B8h */
-    rzv2m_pciphy_write_reg(0x006F, PCI_PHYA_RXCTLEITAILCTLG1_REG);		/* PCI_PHYA 4C0h */
-    rzv2m_pciphy_write_reg(0x006C, PCI_PHYA_RXCTLEITAILCTLG2_REG);		/* PCI_PHYA 4C4h */
-    rzv2m_pciphy_write_reg(0x0013, PCI_PHYA_RXCTLERX1CTLG1_REG);		/* PCI_PHYA 4ECh */
-    rzv2m_pciphy_write_reg(0x00F2, PCI_PHYA_RXCTLERS1CTLG2_REG);		/* PCI_PHYA 4F0h */
-    rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_ARXCTLEIBLEEDCTL_REG);		/* PCI_PHYA 514h */
-    rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_RXRTERM_REG);				/* PCI_PHYA 5A0h */
-    rzv2m_pciphy_write_reg(0x00F8, PCI_PHYA_RXRTERMVCMEN_REG);			/* PCI_PHYA 5ACh */
-    rzv2m_pciphy_write_reg(0x0065, PCI_PHYA_RXCDRFBBCTL_REG);			/* PCI_PHYA 678h */
+	rzv2m_sys_write_reg(SET_LANE1, SYS_PCI_LANE_SEL_REG);				// Set Lane1 reg
+
+	/* PHY Initialize setting for Setting of PMA Register */
+	rzv2m_pciphy_write_reg(0x0032, PCI_PHYA_PLLPMSSDIV_REG);			/* PCI_PHYA 0D8h */
+	rzv2m_pciphy_write_reg(0x0001, PCI_PHYA_RXCDRREFDIVSELPLL_REG);		/* PCI_PHYA 480h */
+	rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_RXCDRREFDIVSELDATA_REG);	/* PCI_PHYA 488h */
+	rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXDDESKEW_REG);				/* PCI_PHYA 6ECh */
+	rzv2m_pciphy_write_reg(0x0004, PCI_PHYA_TXMISC_REG);				/* PCI_PHYA 73Ch */
+
+	/* PHY parameters for TX : Reference value for signal adjustment */
+	rzv2m_pciphy_write_reg(0x0011, PCI_PHYA_PLLALPFRSELFINE_REG);		/* PCI_PHYA 080h */
+	rzv2m_pciphy_write_reg(0x003F, PCI_PHYA_TXDRVLVCTLG1_REG);			/* PCI_PHYA 404h */
+	rzv2m_pciphy_write_reg(0x001D, PCI_PHYA_TXDRVLVLCTLG2_REG);			/* PCI_PHYA 408h */
+	rzv2m_pciphy_write_reg(0x002B, PCI_PHYA_TXDRVPOSTLVCTLG1_REG);		/* PCI_PHYA 414h */
+	rzv2m_pciphy_write_reg(0x000A, PCI_PHYA_TXDRVPOSTLVCTLG2_REG);		/* PCI_PHYA 418h */
+	rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_TXDRVIDRVEN_REG);			/* PCI_PHYA 42Ch */
+	rzv2m_pciphy_write_reg(0x00B7, PCI_PHYA_ATXDRVIDRVCTL_REG);			/* PCI_PHYA 430h */
+	rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_TXJEQEVENCTL_REG);			/* PCI_PHYA 44Ch */
+	rzv2m_pciphy_write_reg(0x0000, PCI_PHYA_TXJEQODDCTL_REG);			/* PCI_PHYA 454h */
+	rzv2m_pciphy_write_reg(0x0057, PCI_PHYA_ATXDRVACCDRV_REG);			/* PCI_PHYA 7F0h */
+
+	/* PHY parameters for RX : Reference value for signal adjustment */
+	rzv2m_pciphy_write_reg(0x0073, PCI_PHYA_RXCTLEEN_REG);				/* PCI_PHYA 4B8h */
+	rzv2m_pciphy_write_reg(0x006F, PCI_PHYA_RXCTLEITAILCTLG1_REG);		/* PCI_PHYA 4C0h */
+	rzv2m_pciphy_write_reg(0x006C, PCI_PHYA_RXCTLEITAILCTLG2_REG);		/* PCI_PHYA 4C4h */
+	rzv2m_pciphy_write_reg(0x0013, PCI_PHYA_RXCTLERX1CTLG1_REG);		/* PCI_PHYA 4ECh */
+	rzv2m_pciphy_write_reg(0x00F2, PCI_PHYA_RXCTLERS1CTLG2_REG);		/* PCI_PHYA 4F0h */
+	rzv2m_pciphy_write_reg(0x0007, PCI_PHYA_ARXCTLEIBLEEDCTL_REG);		/* PCI_PHYA 514h */
+	rzv2m_pciphy_write_reg(0x00FF, PCI_PHYA_RXRTERM_REG);				/* PCI_PHYA 5A0h */
+	rzv2m_pciphy_write_reg(0x00F8, PCI_PHYA_RXRTERMVCMEN_REG);			/* PCI_PHYA 5ACh */
+	rzv2m_pciphy_write_reg(0x0065, PCI_PHYA_RXCDRFBBCTL_REG);			/* PCI_PHYA 678h */
 
-  return 0;
+	return 0;
 
 } /* End of function PCIE_phyInitialize_L1() */
 
@@ -606,36 +597,36 @@ static int PCIE_CFG_Initialize(struct rzv2m_pcie *pcie)
 static int PCIE_INT_Initialize(struct rzv2m_pcie *pcie)
 {
 	/* Clear Event Interrupt Status 0 */
-	rzv2m_pci_write_reg(pcie, INT_ST0_CLR, PCI_RC_PEIS0_REG);       /* Set PCI_RC 0204h */
+	rzv2m_pci_write_reg(pcie, INT_ST0_CLR, PCI_RC_PEIS0_REG);		/* Set PCI_RC 0204h */
 
 	/* Set Event Interrupt Enable 0 */
-	rzv2m_pci_write_reg(pcie, INT_EN0_SET, PCI_RC_PEIE0_REG);       /* Set PCI_RC 0200h */
+	rzv2m_pci_write_reg(pcie, INT_EN0_SET, PCI_RC_PEIE0_REG);		/* Set PCI_RC 0200h */
 
 	/* Clear  Event Interrupt Status 1 */
-	rzv2m_pci_write_reg(pcie, INT_ST1_CLR, PCI_RC_PEIS1_REG);       /* Set PCI_RC 020ch */
+	rzv2m_pci_write_reg(pcie, INT_ST1_CLR, PCI_RC_PEIS1_REG);		/* Set PCI_RC 020ch */
 
 	/* Set Event Interrupt Enable 1 */
-	rzv2m_pci_write_reg(pcie, INT_EN1_SET, PCI_RC_PEIE1_REG);       /* Set PCI_RC 0208h */
+	rzv2m_pci_write_reg(pcie, INT_EN1_SET, PCI_RC_PEIE1_REG);		/* Set PCI_RC 0208h */
 
 	/* Clear AXI Master Error Interrupt Status */
-	rzv2m_pci_write_reg(pcie, INT_ST_AXIM_CLR, PCI_RC_AMEIS_REG);   /* Set PCI_RC 0214h */
+	rzv2m_pci_write_reg(pcie, INT_ST_AXIM_CLR, PCI_RC_AMEIS_REG);	/* Set PCI_RC 0214h */
 
 	/* Set AXI Master Error Interrupt Enable */
-	rzv2m_pci_write_reg(pcie, INT_EN_AXIM_SET, PCI_RC_AMEIE_REG);   /* Set PCI_RC 0210h */
+	rzv2m_pci_write_reg(pcie, INT_EN_AXIM_SET, PCI_RC_AMEIE_REG);	/* Set PCI_RC 0210h */
 
 	/* Clear AXI Slave Error Interrupt Status */
-	rzv2m_pci_write_reg(pcie, INT_ST_AXIS_CLR, PCI_RC_ASEIS1_REG);  /* Set PCI_RC 0224h */
+	rzv2m_pci_write_reg(pcie, INT_ST_AXIS_CLR, PCI_RC_ASEIS1_REG);	/* Set PCI_RC 0224h */
 
 	/* Set AXI Slave Error Interrupt Enable */
-	rzv2m_pci_write_reg(pcie, INT_EN_AXIS_SET, PCI_RC_ASEIE1_REG);  /* Set PCI_RC 0220h */
+	rzv2m_pci_write_reg(pcie, INT_EN_AXIS_SET, PCI_RC_ASEIE1_REG);	/* Set PCI_RC 0220h */
 
 	/* Clear Message Receive Interrupt Status */
-	rzv2m_pci_write_reg(pcie, INT_MR_CLR, PCI_RC_MSGRCVIS_REG);     /* Set PCI_RC 0124h */
+	rzv2m_pci_write_reg(pcie, INT_MR_CLR, PCI_RC_MSGRCVIS_REG);		/* Set PCI_RC 0124h */
 
 	/* Set Message Receive Interrupt Enable */
-	rzv2m_pci_write_reg(pcie, INT_MR_SET, PCI_RC_MSGRCVIE_REG);     /* Set PCI_RC 0120h */
+	rzv2m_pci_write_reg(pcie, INT_MR_SET, PCI_RC_MSGRCVIE_REG);		/* Set PCI_RC 0120h */
 
-  return 0;
+	return 0;
 }
 
 static int rzv2m_pcie_hw_init(struct rzv2m_pcie *pcie)
@@ -643,7 +634,7 @@ static int rzv2m_pcie_hw_init(struct rzv2m_pcie *pcie)
 	unsigned int timeout = 50;
 
 	/* Set to the PCIe reset state   : step6 */
-	rzv2m_pci_write_reg(pcie, RESET_ALL_ASSERT, PCI_RC_RESET_REG); /* Set PCI_RC 310h */
+	rzv2m_pci_write_reg(pcie, RESET_ALL_ASSERT, PCI_RC_RESET_REG);			/* Set PCI_RC 310h */
 
 	/* Set PMA and Phy Register for Lane0 : step7, 9 */
 	PCIE_phyInitialize_L0(pcie);
@@ -652,28 +643,28 @@ static int rzv2m_pcie_hw_init(struct rzv2m_pcie *pcie)
 	PCIE_phyInitialize_L1(pcie);
 
 	/* Release the PCIe reset : step10 : RST_LOAD_B, RST_CFG_B)*/
-	rzv2m_pci_write_reg(pcie, RESET_LOAD_CFG_RELEASE, PCI_RC_RESET_REG); /* Set PCI_RC 310h */
+	rzv2m_pci_write_reg(pcie, RESET_LOAD_CFG_RELEASE, PCI_RC_RESET_REG);	/* Set PCI_RC 310h */
 
 	/* Setting of HWINT related registers : step11 */
 	PCIE_CFG_Initialize(pcie);
 
 	/* Set L1 state                       : step12  */
-	rzv2m_sys_write_reg(SET_ASPM_L1_ST, SYS_PCI_ALLOW_ENTER_L1_REG);  /* Set SYS 064h */
+	rzv2m_sys_write_reg(SET_ASPM_L1_ST, SYS_PCI_ALLOW_ENTER_L1_REG);		/* Set SYS 064h */
 
 	/* Set Interrupt settings             : step13  */
 	PCIE_INT_Initialize(pcie);
 
 	/* Release the PCIe reset : step14 : RST_PS_B, RST_GP_B, RST_B */
-	rzv2m_pci_write_reg(pcie, RESET_PS_GP_RELEASE, PCI_RC_RESET_REG);     /* Set PCI_RC 310h */
+	rzv2m_pci_write_reg(pcie, RESET_PS_GP_RELEASE, PCI_RC_RESET_REG);		/* Set PCI_RC 310h */
 
    /* Wait 500us over : step 15*/
 	msleep(1);
 
    /* Release the PCIe reset : step16 : RST_OUT_B, RST_RSM_B) */
-	rzv2m_pci_write_reg(pcie, RESET_ALL_DEASSERT,  PCI_RC_RESET_REG);     /* Set PCI_RC 310h */
+	rzv2m_pci_write_reg(pcie, RESET_ALL_DEASSERT,  PCI_RC_RESET_REG);		/* Set PCI_RC 310h */
 
 
-	rzv2m_pci_write_reg(pcie, 0x3ff2,  MODE_SET_1_REG);     /* Set PCI_RC 318h */
+	rzv2m_pci_write_reg(pcie, 0x3ff2,  MODE_SET_1_REG);						/* Set PCI_RC 318h */
 
 	/* This will timeout if we don't have a link. */
 	while (timeout--) {
@@ -754,37 +745,39 @@ static irqreturn_t rzv2m_pcie_msi_irq(int irq, void *data)
 	struct rzv2m_msi *msi = &host->msi;
 	struct device *dev = pcie->dev;
 	unsigned long reg;
-	unsigned int index;
 	unsigned int irq_v;
+	unsigned int i = 0;
+	unsigned int hwirq;
+	irqreturn_t ret = IRQ_NONE;
 
 	reg = rzv2m_pci_read_reg(pcie, PCI_INTX_RCV_INTERRUPT_STATUS_REG);
 	/* clear the interrupt */
 	rzv2m_pci_write_reg(pcie, ALL_RECEIVE_INTERRUPT_STATUS, PCI_INTX_RCV_INTERRUPT_STATUS_REG);
 
-	// MSI
-	if( reg & MSI_RECEIVE_INTERRUPT_STATUS ) {
-		index = *(unsigned int *)msi->pages;
-	}
-	else {
-		//MSI Only
+	// MSI Only
+	if (!(reg & MSI_RECEIVE_INTERRUPT_STATUS))
 		return IRQ_NONE;
-	}
 
-	/* MSI & INTx share an interrupt */
-	irq_v = irq_find_mapping(msi->domain, index);
-	if (irq_v) {
-		if (test_bit(index, msi->used))
-			generic_handle_irq(irq_v);
-		else {
-			dev_info(pcie->dev, "unhandled MSI\n");
+	for (i = 0; i < MSI_RCV_NUM; i++) {
+		hwirq = *(unsigned int *)(msi->pages + i*0x4);
+		if (hwirq != MSI_RCV_WINDOW_INVALID) {
+			/* Invalidate MSI Window */
+			*(unsigned int *)(msi->pages + i*0x4) = MSI_RCV_WINDOW_INVALID;
+			irq_v = irq_find_mapping(msi->domain, hwirq);
+			if (irq_v) {
+				if (test_bit(hwirq, msi->used)) {
+					generic_handle_irq(irq_v);
+					ret = IRQ_HANDLED;
+				} else
+					dev_info(pcie->dev, "unhandled MSI\n");
+			} else {
+				/* Unknown MSI, just clear it */
+				dev_dbg(pcie->dev, "unexpected MSI\n");
+			}
 		}
-	} else {
-		/* Unknown MSI, just clear it */
-		dev_dbg(pcie->dev, "unexpected MSI\n");
-		return IRQ_NONE;
 	}
 
-	return IRQ_HANDLED;
+	return ret;
 }
 
 static int rzv2m_msi_setup_irq(struct msi_controller *chip, struct pci_dev *pdev,
@@ -797,6 +790,7 @@ static int rzv2m_msi_setup_irq(struct msi_controller *chip, struct pci_dev *pdev
 	struct msi_msg msg;
 	unsigned int irq;
 	int hwirq;
+	unsigned long msi_notice_addr;
 
 	hwirq = rzv2m_msi_alloc(msi);
 	if (hwirq < 0)
@@ -810,7 +804,8 @@ static int rzv2m_msi_setup_irq(struct msi_controller *chip, struct pci_dev *pdev
 
 	irq_set_msi_desc(irq, desc);
 
-	msg.address_lo = rzv2m_pci_read_reg(pcie, MSI_RCV_WINDOW_ADDR_REG) & ~MSI_RCV_WINDOW_ENABLE;
+	msi_notice_addr = (unsigned long)msi->virt_pages + (hwirq * sizeof(unsigned int));
+	msg.address_lo = lower_32_bits(msi_notice_addr);
 	msg.address_hi = 0x00;
 	msg.data = hwirq;
 
@@ -831,6 +826,7 @@ static int rzv2m_msi_setup_irqs(struct msi_controller *chip,
 	unsigned int irq;
 	int hwirq;
 	int i;
+	unsigned long msi_notice_addr;
 
 	/* MSI-X interrupts are not supported */
 	if (type == PCI_CAP_ID_MSIX)
@@ -864,7 +860,8 @@ static int rzv2m_msi_setup_irqs(struct msi_controller *chip,
 	desc->nvec_used = nvec;
 	desc->msi_attrib.multiple = order_base_2(nvec);
 
-	msg.address_lo = rzv2m_pci_read_reg(pcie, MSI_RCV_WINDOW_ADDR_REG) & ~MSI_RCV_WINDOW_ENABLE;
+	msi_notice_addr = (unsigned long)msi->virt_pages + (hwirq * sizeof(unsigned int));
+	msg.address_lo = lower_32_bits(msi_notice_addr);
 	msg.address_hi = 0x00;
 	msg.data = hwirq;
 
@@ -925,10 +922,15 @@ static void rzv2m_pcie_hw_enable_msi(struct rzv2m_pcie_host *host)
 	unsigned long pci_base;
 	unsigned long msi_base;
 	unsigned long msi_base_mask;
-	int err, i, idx;
+	int i, idx;
 
+#if 1 //RAMA
+	msi->pages = ioremap(RAMA_ADDRESS, RAMA_SIZE);
+	base = RAMA_ADDRESS;
+#else
 	msi->pages = __get_free_pages(GFP_KERNEL | GFP_DMA32, 0);
 	base = dma_map_single(pcie->dev, (void *)msi->pages, (MSI_RCV_WINDOW_MASK_MIN+1), DMA_BIDIRECTIONAL);
+#endif
 
 	msi_base = 0;
 	for(idx=0; idx < RZV2M_PCI_MAX_RESOURCES; idx++) {
@@ -949,17 +951,14 @@ static void rzv2m_pcie_hw_enable_msi(struct rzv2m_pcie_host *host)
 	}
 	if (!msi_base) {
 		dev_err(dev,"MSI Address setting failed (Address:0x%lx)\n",base);
-		err = -ENOMEM;
 		goto err;
 	}
 
+	for (idx = 0; idx < MSI_RCV_NUM; idx++)
+		*(unsigned int *)(msi->pages + idx*0x4) = MSI_RCV_WINDOW_INVALID;
+
 	rzv2m_pci_write_reg(pcie, msi_base, MSI_RCV_WINDOW_ADDR_REG);
 	rzv2m_pci_write_reg(pcie, MSI_RCV_WINDOW_MASK_MIN, MSI_RCV_WINDOW_MASK_REG);
-#if 1 //RAMA
-	rzv2m_pci_write_reg(pcie, RAMA_ADDRESS, MSI_RCV_WINDOW_ADDR_REG);
-	msi->pages = ioremap(RAMA_ADDRESS, 0x32000);
-	msi->virt_pages = RAMA_ADDRESS;
-#endif
 	rzv2m_rmw(pcie, MSI_RCV_WINDOW_ADDR_REG, MSI_RCV_WINDOW_ENABLE, MSI_RCV_WINDOW_ENABLE);
 
 	/* enable all MSI interrupts */
@@ -967,11 +966,10 @@ static void rzv2m_pcie_hw_enable_msi(struct rzv2m_pcie_host *host)
 					 MSI_RECEIVE_INTERRUPT_ENABLE,
 					 MSI_RECEIVE_INTERRUPT_ENABLE );
 
-	return 0;
+	return;
 
 err:
 	rzv2m_pcie_unmap_msi(host);
-	return err;
 }
 
 static int rzv2m_pcie_enable_msi(struct rzv2m_pcie_host *host)
@@ -1122,14 +1120,6 @@ static int rzv2m_pcie_inbound_ranges(struct rzv2m_pcie *pcie,
 			dev_err(pcie->dev, "Failed to map inbound regions!\n");
 			return -EINVAL;
 		}
-		/*
-		 * If the size of the range is larger than the alignment of
-		 * the start address, we have to use multiple entries to
-		 * perform the mapping.
-		 */
-		/* Hardware supports max 4GiB inbound region */
-		size = min(size, 1ULL << 32);
-
 		mask = size - 1;
 		mask &= ~0xf;
 
@@ -1368,3 +1358,6 @@ static int __init register_rzv2m_pcie_pci_notifier(void)
 }
 
 arch_initcall(register_rzv2m_pcie_pci_notifier);
+MODULE_AUTHOR("Phil Edworthy <phil.edworthy@renesas.com>");
+MODULE_DESCRIPTION("Renesas RZ/V2M Series PCIe driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pci/controller/pcie-rzv2m-window.c b/drivers/pci/controller/pcie-rzv2m-window.c
index d06e6f0..d7862d2 100755
--- a/drivers/pci/controller/pcie-rzv2m-window.c
+++ b/drivers/pci/controller/pcie-rzv2m-window.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * PCIe driver for Renesas RZ/V2MA SoCs
+ * PCIe driver for Renesas RZ/V2M Series SoCs
  *  Copyright (C) 2022 Renesas Electronics Europe Ltd
  */
 
@@ -57,11 +57,7 @@ void rzv2m_pcie_set_outbound(struct rzv2m_pcie *pcie, int win,
 	 * keeps things pretty simple.
 	 */
 	size = resource_size(res);
-
-	if (size > 128)
-		mask = (roundup_pow_of_two(size) / SZ_128) - 1;
-	else
-		mask = 0x0;
+	mask = size - 1;
 
 	if (res->flags & IORESOURCE_IO)
 		res_start = pci_pio_to_address(res->start) - window->offset;
@@ -84,15 +80,17 @@ void rzv2m_pcie_set_inbound(struct rzv2m_pcie *pcie, u64 cpu_addr,
 	 * Set up 64-bit inbound regions as the range parser doesn't
 	 * distinguish between 32 and 64-bit types.
 	 */
-	rzv2m_pci_write_reg(pcie, pci_addr, AXI_WINDOW_BASE_REG(idx));
-	rzv2m_pci_write_reg(pcie, cpu_addr, AXI_DESTINATION_REG(idx));
+	rzv2m_pci_write_reg(pcie, lower_32_bits(pci_addr), AXI_WINDOW_BASE_REG(idx));
+	pcie->save_reg.axi_window.base_u[idx] = upper_32_bits(pci_addr);
+	rzv2m_pci_write_reg(pcie, lower_32_bits(cpu_addr), AXI_DESTINATION_REG(idx));
+	pcie->save_reg.axi_window.dest_u[idx] = upper_32_bits(cpu_addr);
 	rzv2m_pci_write_reg(pcie, flags,    AXI_WINDOW_MASK_REG(idx));
 	rzv2m_rmw(pcie, AXI_WINDOW_BASE_REG(idx), AXI_WINDOW_ENABLE, AXI_WINDOW_ENABLE);
 
 #if 1 //RAMA
 	rzv2m_pci_write_reg(pcie, RAMA_ADDRESS, AXI_WINDOW_BASE_REG(1));
 	rzv2m_pci_write_reg(pcie, RAMA_ADDRESS, AXI_DESTINATION_REG(1));
-	rzv2m_pci_write_reg(pcie, 0x31fff,    AXI_WINDOW_MASK_REG(1));
+	rzv2m_pci_write_reg(pcie, RAMA_SIZE - 1,    AXI_WINDOW_MASK_REG(1));
 	rzv2m_rmw(pcie, AXI_WINDOW_BASE_REG(1), AXI_WINDOW_ENABLE, AXI_WINDOW_ENABLE);
 #endif
 }
diff --git a/drivers/pci/controller/pcie-rzv2m.h b/drivers/pci/controller/pcie-rzv2m.h
index ab1f5a6..5ac827a 100755
--- a/drivers/pci/controller/pcie-rzv2m.h
+++ b/drivers/pci/controller/pcie-rzv2m.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
- * PCIe driver for Renesas rzv2ma SoCs
- *  Copyright (C) 2022 Renesas Electronics Europe Ltd
+ * PCIe driver for Renesas RZ/V2M Series SoCs
+ *  Copyright (C) 2022 Renesas Electronics Ltd
  *
  */
 
@@ -15,18 +15,18 @@
 #define AXI_DESTINATION_REG(x)					(0x1008 + ((x) * 0x10))
 
 /* AXI to PCI Express Access */
-#define PCIE_WINDOW_BASE_REG(x)				(0x1100 + ((x) * 0x10))
+#define PCIE_WINDOW_BASE_REG(x)					(0x1100 + ((x) * 0x10))
 	#define PCIE_WINDOW_ENABLE					(0x00000001)
-#define PCIE_WINDOW_MASK_REG(x)				(0x1104 + ((x) * 0x10))
+#define PCIE_WINDOW_MASK_REG(x)					(0x1104 + ((x) * 0x10))
 #define PCIE_DESTINATION_LO_REG(x)				(0x1108 + ((x) * 0x10))
 #define PCIE_DESTINATION_HI_REG(x)				(0x110C + ((x) * 0x10))
 
 /* Request Issuing */
-#define REQUEST_DATA_REG(x)					(0x0080 + ((x) * 0x04))
+#define REQUEST_DATA_REG(x)						(0x0080 + ((x) * 0x04))
 #define REQUEST_RCV_DATA_REG					0x008C
 #define REQUEST_ADDR_1_REG						0x0090
 #define REQUEST_ADDR_2_REG						0x0094
-#define REQUEST_BYTE_ENABLE_REG				0x0098
+#define REQUEST_BYTE_ENABLE_REG					0x0098
 #define REQUEST_ISSUE_REG						0x009C
 	#define MOR_STATUS							0x00070000
 	#define TR_TYPE_CFREAD_TP0					0x00000400
@@ -37,11 +37,13 @@
 
 
 /* Interruption */
-#define MSI_RCV_WINDOW_ADDR_REG				0x0100
+#define MSI_RCV_WINDOW_ADDR_REG					0x0100
 		#define MSI_RCV_WINDOW_ENABLE			0x00000001
-#define MSI_RCV_WINDOW_MASK_REG				0x0108
-	#define MSI_RCV_WINDOW_MASK_MIN				0x00000003
-//	#define MSI_RCV_WINDOW_MASK_MIN				0x00000007
+#define MSI_RCV_WINDOW_MASK_REG					0x0108
+	#define MSI_RCV_NUM							32
+	#define MSI_RCV_WINDOW_SIZE					(MSI_RCV_NUM * sizeof(unsigned int))
+	#define MSI_RCV_WINDOW_MASK_MIN				((unsigned long)MSI_RCV_WINDOW_SIZE - 1)
+	#define MSI_RCV_WINDOW_INVALID				0xFFFFFFFF
 #define PCI_INTX_RCV_INTERRUPT_ENABLE_REG		0x0110
 	#define MSI_RECEIVE_INTERRUPT_ENABLE		0x00000010
 	#define INTX_RECEIVE_INTERRUPT_ENABLE		0x0000000F
@@ -49,7 +51,7 @@
 	#define MSI_RECEIVE_INTERRUPT_STATUS		0x00000010
 	#define INTX_RECEIVE_INTERRUPT_STATUS		0x0000000F
 	#define ALL_RECEIVE_INTERRUPT_STATUS		0x00000001F
-#define PCI_INTX_OUT_STATUS_REG				0x0118
+#define PCI_INTX_OUT_STATUS_REG					0x0118
 
 /* Message */
 #define MSG_RCV_INTERRUPT_ENABLE_REG			0x0120
@@ -61,13 +63,13 @@
 #define MSG_HEADER_4THDW_REG					0x013C
 
 /* Interrupt Table */
-#define INTERRUPT_TABLE_REG					0x0140
+#define INTERRUPT_TABLE_REG						0x0140
 
 /* Error Event */
 #define PCIE_EVENT_INTERRUPT_EANBLE_0_REG		0x0200
 #define PCIE_EVENT_INTERRUPT_STATUS_0_REG		0x0204
-#define AXI_MASTER_ERR_INTERRUPT_EANBLE_REG	0x0210
-#define AXI_MASTER_ERR_INTERRUPT_STATUS_REG	0x0214
+#define AXI_MASTER_ERR_INTERRUPT_EANBLE_REG		0x0210
+#define AXI_MASTER_ERR_INTERRUPT_STATUS_REG		0x0214
 #define AXI_SLAVE_ERR_INTERRUPT_EANBLE_1_REG	0x0210
 #define AXI_SLAVE_ERR_INTERRUPT_STATUS_1_REG	0x0214
 
@@ -78,144 +80,143 @@
 	#define RESET_ALL_DEASSERT					0x0000007F
 	#define RESET_CONFIG_DEASSERT				0x0000001C
 	#define RESET_ALL_ASSERT				    0x00000000
-   #define RESET_LOAD_CFG_RELEASE  		    0x00000018
-   #define RESET_PS_GP_RELEASE  		        0x0000003B
+	#define RESET_LOAD_CFG_RELEASE				0x00000018
+	#define RESET_PS_GP_RELEASE  				0x0000003B
 #define MODE_SET_0_REG							0x0314
 #define MODE_SET_1_REG							0x0318
 #define GENERAL_PURPOSE_OUTPUT_REG(x)			(0x0380 + ((x) * 0x04))
 #define GENERAL_PURPOSE_INPUT_REG(x)			(0x0390 + ((x) * 0x04))
 #define PCIE_CORE_MODE_SET_1_REG				0x0400
-#define PCIE_CORE_CONTROL_1_REG				0x0404
+#define PCIE_CORE_CONTROL_1_REG					0x0404
 #define PCIE_CORE_STATUS_1_REG					0x0408
 	#define DL_DOWN_STATUS						0x00000001
 #define PCIE_LOOPBACK_TEST_REG					0x040C
-#define PCIE_CORE_CONTROL_2_REG				0x0410
+#define PCIE_CORE_CONTROL_2_REG					0x0410
 #define PCIE_CORE_STATUS_2_REG					0x0414
 
 /* MODE & Lane Control */
-#define SYS_BASE_ADD                           0xA3F03000
-#define SYS_PCI_ALLOW_ENTER_L1_REG             0x064
-	#define SET_ASPM_L1_ST                      0x0001
-#define SYS_PCI_MODE_REG                       0x090
-	#define SET_RC                              0x0001
-#define SYS_PCI_MODE_EN_B_REG                  0x094
-	#define CNT_MOE                             0x0000
-#define SYS_PCI_LANE_SEL_REG                   0x0A0
-	#define SET_LANE0                           0x0000
-	#define SET_LANE1                           0x0002
+#define SYS_BASE_ADD							0xA3F03000
+#define SYS_PCI_ALLOW_ENTER_L1_REG				0x064
+	#define SET_ASPM_L1_ST						0x0001
+#define SYS_PCI_MODE_REG						0x090
+	#define SET_RC								0x0001
+#define SYS_PCI_MODE_EN_B_REG					0x094
+	#define CNT_MOE								0x0000
+#define SYS_PCI_LANE_SEL_REG					0x0A0
+	#define SET_LANE0							0x0000
+	#define SET_LANE1							0x0002
 
 
 /* PCIe Phy Control */
-#define PCI_PHY_BASE_ADD                       0xA3F70000
-#define PCI_PHYA_PLLALPFRSELFINE_REG           0x0080
-#define PCI_PHYA_PLLPMSSDIV_REG                0x00D8
-#define PCI_PHYA_TXDRVLVCTLG1_REG              0x0404
-#define PCI_PHYA_TXDRVLVLCTLG2_REG             0x0408
-#define PCI_PHYA_TXDRVPOSTLVCTLG1_REG          0x0414
-#define PCI_PHYA_TXDRVPOSTLVCTLG2_REG          0x0418
-#define PCI_PHYA_TXDRVIDRVEN_REG               0x042C
-#define PCI_PHYA_ATXDRVIDRVCTL_REG             0x0430
-#define PCI_PHYA_TXJEQEVENCTL_REG              0x044C
-#define PCI_PHYA_TXJEQODDCTL_REG               0x0454
-#define PCI_PHYA_RXCDRREFDIVSELPLL_REG         0x0480
-#define PCI_PHYA_RXCDRREFDIVSELDATA_REG        0x0488
-#define PCI_PHYA_RXCTLEEN_REG                  0x04B8
-#define PCI_PHYA_RXCTLEITAILCTLG1_REG          0x04C0
-#define PCI_PHYA_RXCTLEITAILCTLG2_REG          0x04C4
-#define PCI_PHYA_RXCTLERX1CTLG1_REG            0x04EC
-#define PCI_PHYA_RXCTLERS1CTLG2_REG            0x04F0
-#define PCI_PHYA_ARXCTLEIBLEEDCTL_REG          0x0514
-#define PCI_PHYA_RXRTERM_REG                   0x05A0
-#define PCI_PHYA_RXRTERMVCMEN_REG              0x05AC
-#define PCI_PHYA_RXCDRFBBCTL_REG               0x0678
-#define PCI_PHYA_TXDDESKEW_REG                 0x06EC
-#define PCI_PHYA_TXMISC_REG                    0x073C
-#define PCI_PHYA_ATXDRVACCDRV_REG              0x07F0
+#define PCI_PHY_BASE_ADD						0xA3F70000
+#define PCI_PHYA_PLLALPFRSELFINE_REG			0x0080
+#define PCI_PHYA_PLLPMSSDIV_REG					0x00D8
+#define PCI_PHYA_TXDRVLVCTLG1_REG				0x0404
+#define PCI_PHYA_TXDRVLVLCTLG2_REG				0x0408
+#define PCI_PHYA_TXDRVPOSTLVCTLG1_REG			0x0414
+#define PCI_PHYA_TXDRVPOSTLVCTLG2_REG			0x0418
+#define PCI_PHYA_TXDRVIDRVEN_REG				0x042C
+#define PCI_PHYA_ATXDRVIDRVCTL_REG				0x0430
+#define PCI_PHYA_TXJEQEVENCTL_REG				0x044C
+#define PCI_PHYA_TXJEQODDCTL_REG				0x0454
+#define PCI_PHYA_RXCDRREFDIVSELPLL_REG			0x0480
+#define PCI_PHYA_RXCDRREFDIVSELDATA_REG			0x0488
+#define PCI_PHYA_RXCTLEEN_REG					0x04B8
+#define PCI_PHYA_RXCTLEITAILCTLG1_REG			0x04C0
+#define PCI_PHYA_RXCTLEITAILCTLG2_REG			0x04C4
+#define PCI_PHYA_RXCTLERX1CTLG1_REG				0x04EC
+#define PCI_PHYA_RXCTLERS1CTLG2_REG				0x04F0
+#define PCI_PHYA_ARXCTLEIBLEEDCTL_REG			0x0514
+#define PCI_PHYA_RXRTERM_REG					0x05A0
+#define PCI_PHYA_RXRTERMVCMEN_REG				0x05AC
+#define PCI_PHYA_RXCDRFBBCTL_REG				0x0678
+#define PCI_PHYA_TXDDESKEW_REG					0x06EC
+#define PCI_PHYA_TXMISC_REG						0x073C
+#define PCI_PHYA_ATXDRVACCDRV_REG				0x07F0
 
 /* PCIe RC Control */
-#define PCI_RC_BASE_ADD                        0x85030000
-#define PCI_RC_MSGRCVIE_REG                    0x0120
-   #define  INT_MR_SET                         0x01050000
-#define PCI_RC_MSGRCVIS_REG                    0x0124
-   #define  INT_MR_CLR                         0x010F0000
-#define PCI_RC_PEIE0_REG                       0x0200
-   #define INT_EN0_SET                         0x00000000
-#define PCI_RC_PEIS0_REG                       0x0204
-   #define INT_ST0_CLR                         0x00001200
-#define PCI_RC_PEIE1_REG                       0x0208
-   #define INT_EN1_SET                         0x00000000
-#define PCI_RC_PEIS1_REG                       0x020c
-   #define INT_ST1_CLR                         0x00030303
-#define PCI_RC_AMEIE_REG                       0x0210
-   #define INT_EN_AXIM_SET                     0x00000F0F
-#define PCI_RC_AMEIS_REG                       0x0214
-   #define INT_ST_AXIM_CLR                     0x00000F0F
-#define PCI_RC_ASEIE1_REG                      0x0220
-   #define INT_EN_AXIS_SET                     0x00000F03
-#define PCI_RC_ASEIS1_REG                      0x0224
-   #define INT_ST_AXIS_CLR                     0x00000F03
-#define PCI_RC_PERM_REG                        0x0300
-#define PCI_RC_VID_REG                         0x6000
-#define PCI_RC_RID_CC_REG                      0x6008
-   #define  REVID_CLSCODE_INIT                 0xFFFFFFDF
-#define PCI_RC_BARMSK00L_REG                   0x60A0
-   #define  BASEADR_MKL_ALLM                   0xFFFFFFFF
-#define PCI_RC_BARMSK00U_REG     		        0x60A4
-   #define  BASEADR_MKU_ALLM                   0xFFFFFFFF
-#define PCI_RC_BSIZE00_01_REG     		        0x60C8
-   #define  BASESZ_INIT                        0x00000000
+#define PCI_RC_BASE_ADD							0x85030000
+#define PCI_RC_MSGRCVIE_REG						0x0120
+	#define  INT_MR_SET    						0x01050000
+#define PCI_RC_MSGRCVIS_REG						0x0124
+	#define  INT_MR_CLR							0x010F0000
+#define PCI_RC_PEIE0_REG						0x0200
+	#define INT_EN0_SET							0x00000000
+#define PCI_RC_PEIS0_REG						0x0204
+	#define INT_ST0_CLR							0x00001200
+#define PCI_RC_PEIE1_REG						0x0208
+	#define INT_EN1_SET							0x00000000
+#define PCI_RC_PEIS1_REG						0x020c
+	#define INT_ST1_CLR							0x00030303
+#define PCI_RC_AMEIE_REG						0x0210
+	#define INT_EN_AXIM_SET						0x00000F0F
+#define PCI_RC_AMEIS_REG						0x0214
+	#define INT_ST_AXIM_CLR						0x00000F0F
+#define PCI_RC_ASEIE1_REG						0x0220
+	#define INT_EN_AXIS_SET						0x00000F03
+#define PCI_RC_ASEIS1_REG						0x0224
+	#define INT_ST_AXIS_CLR						0x00000F03
+#define PCI_RC_PERM_REG							0x0300
+#define PCI_RC_VID_REG							0x6000
+#define PCI_RC_RID_CC_REG						0x6008
+	#define  REVID_CLSCODE_INIT					0xFFFFFFDF
+#define PCI_RC_BARMSK00L_REG					0x60A0
+	#define  BASEADR_MKL_ALLM					0xFFFFFFFF
+#define PCI_RC_BARMSK00U_REG	 				0x60A4
+	#define  BASEADR_MKU_ALLM					0xFFFFFFFF
+#define PCI_RC_BSIZE00_01_REG	 				0x60C8
+	#define  BASESZ_INIT						0x00000000
 
 /* DMAC Common Control */
-#define DMA_CONTROL_REG						0x0800
+#define DMA_CONTROL_REG							0x0800
 #define DMA_INTERRUPT_EANBLE_REG				0x0808
 #define DMA_INTERRUPT_STATUS_REG				0x080C
 
 /* DMAC Channel Control */
-#define DMA_CHANNEL_CONTROL_REG				0x0900
-#define QUE_ENTRY_LOWER_REG					0x0908
-#define QUE_ENTRY_UPPER_REG					0x090C
+#define DMA_CHANNEL_CONTROL_REG					0x0900
+#define QUE_ENTRY_LOWER_REG						0x0908
+#define QUE_ENTRY_UPPER_REG						0x090C
 
 /* DMAC DMA Setting */
 #define DMA_DESCRIPTOR_CONTROL_REG				0x0920
-#define DMA_SOURCE_ADDR_REG					0x0924
+#define DMA_SOURCE_ADDR_REG						0x0924
 #define DMA_DESTINATION_ADDR_REG				0x0928
 #define DMA_SIZE_REG							0x092C
-#define DMA_PCIE_UPPER_ADDR_REG				0x0930
-#define DMA_TRANSACTION_CONTROL_REG			0x0934
-#define DMA_DESCRIPTOR_LINK_POINTER_REG		0x093C
+#define DMA_PCIE_UPPER_ADDR_REG					0x0930
+#define DMA_TRANSACTION_CONTROL_REG				0x0934
+#define DMA_DESCRIPTOR_LINK_POINTER_REG			0x093C
 
 /* DMAC DMA Status */
 #define DMA_REST_SIZE_REG						0x0950
 #define AXI_REQUEST_ADDR_REG					0x0954
-#define PCIE_REQUEST_ADDR_LOWER_REG			0x0958
-#define PCIE_REQUEST_ADDR_UPPER_REG			0x095C
+#define PCIE_REQUEST_ADDR_LOWER_REG				0x0958
+#define PCIE_REQUEST_ADDR_UPPER_REG				0x095C
 #define QUE_STATUS_REG							0x0960
 #define DMAC_ERROR_STATUS_REG					0x0968
 
 /* PCIe Configuration Register */
 #define PCIE_CONFIGURATION_REG					0x6000
-   #define PCI_RC_VID_ADR                      0x00
-   #define PCI_RC_RID_CC_ADR                   0x08
-   #define PCI_PM_CAPABILITIES                 0x40
-       #define PM_CAPABILITIES_INIT            0x4803E001
-   #define PCI_RC_BARMSK00L_ADR                0xA0
-   #define PCI_RC_BARMSK00U_ADR     		    0xA4
-   #define PCI_RC_BSIZE00_01_ADR     		    0xC8
+	#define PCI_RC_VID_ADR						0x00
+	#define PCI_RC_RID_CC_ADR					0x08
+	#define PCI_PM_CAPABILITIES					0x40
+	#define PCI_RC_BARMSK00L_ADR				0xA0
+	#define PCI_RC_BARMSK00U_ADR				0xA4
+	#define PCI_RC_BSIZE00_01_ADR				0xC8
 
 /* PCIe Configuration Special Register offset */
 #define PCIE_CONF_OFFSET_BAR0_MASK_LO			0x00A0
 #define PCIE_CONF_OFFSET_BAR0_MASK_UP			0x00A4
 
 /* PCI/AXI Window alignment */
-#define RZV2M_WINDOW_SIZE_MIN				0x00001000
-#define RZV2M_WINDOW_SIZE_MAX				0xFFFFFFFF
-#define RZV2M_PCI_WINDOW_SIZE_MAX			0x40000000
+#define RZV2M_WINDOW_SIZE_MIN					0x00001000
+#define RZV2M_WINDOW_SIZE_MAX					0xFFFFFFFF
+#define RZV2M_PCI_WINDOW_SIZE_MAX				0x40000000
 
 #define INT_PCI_MSI_NR	32
 #define INT_PCI_INTX_NR	1
 
 #define RZV2M_PCI_MAX_RESOURCES 4
-#define MAX_NR_INBOUND_MAPS	6
+#define MAX_NR_INBOUND_MAPS		6
 
 #define PCIE_CONF_BUS(b)	(((b) & 0xff) << 24)
 #define PCIE_CONF_DEV(d)	(((d) & 0x1f) << 19)
@@ -235,6 +236,8 @@
 #define PCIE_CONF_SUB_CLASS						0x04
 #define PCIE_CONF_PROGRAMING_IF					0x00
 
+#define PM_CAPABILITIES_INIT					0x4803E001
+
 #define PCIE_CONF_PRIMARY_BUS					0x00
 #define PCIE_CONF_SECOUNDARY_BUS				0x01
 #define PCIE_CONF_SUBORDINATE_BUS				0x01
@@ -260,11 +263,14 @@
   RAMA Area
 -------------------------------------------------------*/
 #define RAMA_ADDRESS			 				0x80100000
+#define RAMA_SIZE				 				0x32000
 
 struct rzv2m_axi_window_set {
 	u32	base[RZV2M_PCI_MAX_RESOURCES];
+	u32	base_u[RZV2M_PCI_MAX_RESOURCES];
 	u32	mask[RZV2M_PCI_MAX_RESOURCES];
 	u32	dest[RZV2M_PCI_MAX_RESOURCES];
+	u32	dest_u[RZV2M_PCI_MAX_RESOURCES];
 };
 
 struct rzv2m_pci_window_set {
@@ -282,8 +288,8 @@ struct rzv2m_interrupt_set {
 };
 
 struct rzv2m_save_reg {
-	struct rzv2m_axi_window_set	axi_window;
-	struct rzv2m_pci_window_set	pci_window;
+	struct rzv2m_axi_window_set		axi_window;
+	struct rzv2m_pci_window_set		pci_window;
 	struct rzv2m_interrupt_set		interrupt;
 };
 
@@ -293,12 +299,6 @@ struct rzv2m_pcie {
 	struct rzv2m_save_reg	save_reg;
 };
 
-
-struct rzv2m__pcie {
-	struct device		*dev;
-	void __iomem		*base;
-};
-
 void rzv2m_pci_write_reg(struct rzv2m_pcie *pcie, u32 val, unsigned long reg);
 u32 rzv2m_pci_read_reg(struct rzv2m_pcie *pcie, unsigned long reg);
 void rzv2m_rmw(struct rzv2m_pcie *pcie, int where, u32 mask, u32 data);
